<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DLM_DSP_CARAT" xml:space="preserve">
    <value>Carat (^, ASCII code 0x5E)</value>
    <comment>Display value for carat character as delimiter character</comment>
  </data>
  <data name="DLM_DSP_CARRIAGE_RETURN" xml:space="preserve">
    <value>Carriage return (CR, ASCII code 0x0D)</value>
    <comment>Display value for carriage return character as delimiter character</comment>
  </data>
  <data name="DLM_DSP_COMMA" xml:space="preserve">
    <value>Comma (, ASCII code 0x2C)</value>
    <comment>Display value for commacharacter as delimiter character</comment>
  </data>
  <data name="DLM_DSP_LINE_FEED" xml:space="preserve">
    <value>Line feed (LF, ASCII code 0x0A)</value>
    <comment>Display value for line feed character as delimiter character</comment>
  </data>
  <data name="DLM_DSP_OTHER" xml:space="preserve">
    <value>Other ({0}, ASCII code {1})</value>
    <comment>Display value for other character as delimiter or guard character</comment>
  </data>
  <data name="DLM_DSP_SPACE" xml:space="preserve">
    <value>Space (ASCII code 0x20)</value>
    <comment>Display value for space character as delimiter character</comment>
  </data>
  <data name="DLM_DSP_TAB" xml:space="preserve">
    <value>Tab (Horizontal Tab, ASCII code 0x09)</value>
    <comment>Display value for tab character as delimiter character</comment>
  </data>
  <data name="DLM_DSP_VERTICAL_BAR" xml:space="preserve">
    <value>Vertical Bar (|,  a. k. a. Pipe, ASCII code 0x7C)</value>
    <comment>Display value for vertical bar character as delimiter character</comment>
  </data>
  <data name="ERRMSG_SAME_CHAR_AS_DLM_AND_GUARD" xml:space="preserve">
    <value>The delimiter and guard characters must differ.{2}    Specified Delimiter Character = {0}{2}    Specified Guard Character     = {1}</value>
    <comment>Property setters use this message when the program attempts to use the same character as both the delimiter and the guard character.</comment>
  </data>
  <data name="ERRMSG_SETTINGS_ARE_LOCKED" xml:space="preserve">
    <value>Settings on this instance are locked.</value>
    <comment>Property setters use this message in the InvalidOperationException exception that they throw when a program attempts to set a property after the object's properties are locked.</comment>
  </data>
  <data name="ERRMSG_TYPE_MISMATCH" xml:space="preserve">
    <value>{0} is of type {1}, which cannot be meaningfully compared to a {2}, which is of type {3}.</value>
    <comment>The Equals override of the two private structures that store the preset delimiter and guard characters uses this template to construct the message for an InvalidCastException if a caller attempts to compare a structure with an object of another type.</comment>
  </data>
  <data name="GRD_DSP_BACK_QUOTE" xml:space="preserve">
    <value>Back Quotation Mark (`, ASCII code 0x60)</value>
    <comment>Display value for backquote as guard character</comment>
  </data>
  <data name="GRD_DSP_DOUBLE_QUOTE" xml:space="preserve">
    <value>Double Quotation Mark (", ASCII code 0x22)</value>
    <comment>Display value for double quatation mark as guard character</comment>
  </data>
  <data name="GRD_DSP_SINGLE_QUOTE" xml:space="preserve">
    <value>Single Quotation Mark (', ASCII code 0x27)</value>
    <comment>Display value for single quotation mark as guard character</comment>
  </data>
  <data name="HASH_CODE_TEMPLATE" xml:space="preserve">
    <value>{0},{1},{2},{3},{4},{5}</value>
    <comment>The Equals override uses this template to construct a test value.</comment>
  </data>
  <data name="TOSTRING_TEMPLATE" xml:space="preserve">
    <value>Delimiter         = {0}{6}Guard Character   = {1}{6}Trim White Space  = {2}{6}Guard Disposition = {3}{6}Lock State        = {4}{6}Lock Method       = {5}{6}</value>
    <comment>The ToString override uses this template to construct its value.</comment>
  </data>
</root>