<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.DLLServices2</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.ArrayInfo">
            <summary>
            This class organizes constants and routines for working with arrays. The
            constants are mostly synonyms for constants that exist in other classes
            and assemblies.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.DLLServices2.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT">
            <summary>
            Since array subscripts start at zero, the first element of any array
            is zero. Since the same holds for most things that go into square
            brackets or are called some kind of index, this constant works as
            well with indexes.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY">
            <summary>
            The Length and LongLength properties of an array return zero
            (ARRAY_IS_EMPTY) when the array is empty.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX">
            <summary>
            It follows from the fact that array indices count from zero that
            anything less is invalid.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT">
            <summary>
            There is an amazing number of situations that require a refeerence
            to the second element of an array or list.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL">
            <summary>
            If ORDINAL_FROM_INDEX is +1, then its inverse should be -1. Thus,
            both operations are additions, which are typically a tad faster,
            since they don't have to manage a Carry flag.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.NEXT_INDEX">
            <summary>
            The next index is plus one, which is ambiguous, at best, in code
            listings.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
        </member>
        <member name="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX">
            <summary>
            This grain of syntactic sugar is used in OrdinalFromIndex and made
            visible as documentation and for coding similar math inline when
            space permits.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
        </member>
        <member name="M:WizardWrx.ArrayInfo.IndexFromOrdinal(System.Int32)">
            <summary>
            Given an ordinal, such as an array element count, return the
            equivalent index (subscript) value.
            </summary>
            <param name="pintOrdinal">
            Specify the ordinal to convert.
            </param>
            <returns>
            The return value is the index equivalent to pintIndex.
            </returns>
            <remarks>
            Mathematically, the index is pintOrdinal - ORDINAL_FROM_INDEX.
            Hence, this routine is syntactic sugar, which a good optimizer will
            optimize away by generating the code inline.
            </remarks>
            <seealso cref="M:WizardWrx.ArrayInfo.OrdinalFromIndex(System.Int32)"/>
        </member>
        <member name="M:WizardWrx.ArrayInfo.OrdinalFromIndex(System.Int32)">
            <summary>
            Given an index, such as an array subscript, return the equivalent
            ordinal value.
            </summary>
            <param name="pintIndex">
            Specify the index to convert.
            </param>
            <returns>
            The return value is the ordinal equivalent to pintIndex.
            </returns>
            <remarks>
            Mathematically, the ordinal is pintIndex + ORDINAL_FROM_INDEX.
            Hence, this routine is syntactic sugar, which a good optimizer will
            optimize away by generating the code inline.
            </remarks>
            <seealso cref="M:WizardWrx.ArrayInfo.IndexFromOrdinal(System.Int32)"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.AssemblyLocatorBase">
            <summary>
            Use a class derived from this class to get the fully qualified name of
            the file from which the assembly in which the derived class is defined
            was loaded. See Remarks.
            </summary>
            <remarks>
            Given the location from which an assembly was loaded, you can learn
            almost anything else you need to know about that file, such as its size,
            age, and directory. Given the directory, you can locate satellite files,
            such as custom configuration files.
            </remarks>
            <seealso cref="T:WizardWrx.DLLServices2.PropertyDefaults"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.AssemblyLocatorBase.ASSEMBLYDATAPATH_TOKEN">
            <summary>
            Use this token in file names stored in DLL configuration files to
            explicitly state that the file is expected to inhabit the directory
            from which the assembly is loaded, unless the assembly was loaded
            from the Global Assembly Cache (GAC). In that case, substitute the
            application directory.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.AssemblyLocatorBase._strAssemblyLocation">
            <summary>
            Once the energy required to gather the location has been expended,
            save it for future use.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.AssemblyLocatorBase._strAssemblyDataPath">
            <summary>
            Likewise, hang onto the AssemblyDataPath.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.AssemblyLocatorBase._strAssemblyConfigPath">
            <summary>
            The assembly configuration file has the same name as does the
            assembly, with an extension of .config appended. However, if the DLL
            loaded from the GAC, its configuration file must live in the
            application directory.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.AssemblyLocatorBase.#ctor">
            <summary>
            Initialize the one and only property of this class, which holds the
            fully qualified path from which the containing assembly was loaded.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.AssemblyLocatorBase.GetAssemblyBuildDate(System.DateTimeKind)">
            <summary>
            Return the LastWriteTime of the file that contains the executing
            assembly. For all practical purposes, that is the date on which the
            assembly was built.
            </summary>
            <param name="pdtmKind">
            This DateTimeKind enumeration member specifies whether to report the
            LastWriteTime or the LastWriteTimeUtc.
            </param>
            <returns>
            The return value is a fully initialized DateTime structure, which
            contains the requested LastWriteTime (Local or UTC) of the file that
            contains the code of the executing assembly.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.AssemblyLocatorBase.GetAssemblyVersion">
            <summary>
            Return the Version structure, to expedite parsing its parts.
            </summary>
            <returns>
            The return value is the version component of the fully qualified
            assembly name.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.AssemblyLocatorBase.GetAssemblyVersionString">
            <summary>
            Return the complete version of the executing assembly.
            </summary>
            <returns>
            The return value is a string representation of all version number
            "octets" - Major, Minor, Build, and Revision.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.AssemblyLocatorBase.GetDLLSetting(System.String)">
            <summary>
            Return the specified setting value, as a string.
            </summary>
            <param name="pstrSettingsKey">
            This string is the name (key) of the desired setting.
            </param>
            <returns>
            The return value is a string representation of the value stored in
            the named key.
            </returns>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.AssemblyDataPath">
            <summary>
            Gets a string containing the fully qualified path of the directory
            from which the assembly was loaded, unless it was loaded from the
            Global Assembly Cache (GAC). In that case, the return value is the
            fully qualified name of the directory from which the first assembly
            was loaded into the current process. See Remarks.
            </summary>
            <remarks>
            So far as I know, assemblies must load from one of two locations.
            Unsigned assemblies MUST load from the application directory. If the
            assembly is signed with a strong name, it MAY  be loaded from either
            the application directory or the Global Assembly Cache. If a signed
            assembly is in the local GAC, it loads from there, even if a copy is
            also stored in the application directory.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.AssemblyLocation">
            <summary>
            Gets a string containing the fully qualfied file name from which
            the assembly in which the derived class is defined was loaded.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.ConfigMessage">
            <summary>
            This property returns a message when the configuration file is
            missing or empty. Under normal conditions, it returns the empty
            string.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.DLLConfiguration">
            <summary>
            Gets a reference to the entire Configuration object tied to the
            assembly in which the derived class is defined.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.DLLettingsSection">
            <summary>
            Gets a reference to the entire AppSettingsSection object tied to
            the assembly in which the derived class is defined.
            </summary>
            <remarks>
            Since this property starts from the ConfigurationManager object
            returned by its DLLConfiguration sibling, it requires only a single
            statement, with a little help from an explicit cast.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.AssemblyLocatorBase.DLLSettings">
            <summary>
            Gets the DLL Settings section as a KeyValueConfigurationCollection.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.CmdLneArgsBasic">
             <summary>
             An instance of this class efficiently processes command line switches,
             named arguments, and positional arguments, in such a way that they are
             easily accessible. The command line is completely parsed in a single
             pass.
            
             Switches, named arguments, and positional arguments may be freely mixed
             in any way; your users aren't confined to specifying all switches and/or
             named arguments first, last, or in any other order.
            
             Since command line parsing happens in the constructor, your code must
             define all the rules in its parameters. To that end, there are 26
             constructors, which provide access to all of the rich capabilities of
             this object. In spite of the multitude of constructors, their
             organization, coupled with consistent naming and documentation of their
             arguments, is intended to make their features readily accessible.
            
             While it is fairly trivial to reverse engineer the underlying Dictionary
             object, and read the arguments directly, the supported method of reading
             them is through its methods: GetArgByName, GetArgByPosition, and
             GetSwitchByName.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ARG_LIST_HAS_ARGS">
            <summary>
            When the ArgListIsEmpty property has this value, the command line
            contains at least one argument. See Remarks.
            </summary>
            <remarks>
            ArgListIsEmpty being false means only that there is an argument in
            the command line, which may be invalid. Check the ArgMatching array
            or the two invalid argument counters, InvalidNamedArgsInCmd and
            InvalidSwitchesInCmd.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ARG_LIST_IS_EMPTY">
            <summary>
            When the ArgListIsEmpty property has this value, the command line is
            empty, consisting solely of the name of the executing assembly.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.BLANK_AS_DEFAULT_ALLOWED">
            <summary>
            When the AllowEmptyStringAsDefault property has this value, an empty
            string is permitted as a default value. See the Remarks section of 
            the on-line documentation of the AllowEmptyStringAsDefault property
            for complete details.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.BLANK_AS_DEFAULT_FORBIDDEN">
            <summary>
            When the AllowEmptyStringAsDefault property has this value, an empty
            string as a default value is forbidden. See the Remarks section of 
            the on-line documentation of the AllowEmptyStringAsDefault property
            for complete details.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.FIRST_POSITIONAL_ARG">
            <summary>
            Use this constant with the GetArgByPosition method to get the first
            positional argument, or as the initializer of a For loop to get all
            positional arguments.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.NAME_VALUE_DELIMITER">
            <summary>
            This class uses the equal sign as its delimiter between the name and
            value of named arguments.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.NONE">
            <summary>
            Counts are initialized to this value (zero). Making it public
            simplifies coding well-documented tests.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.POSITIONAL_ARGS_COUNT_LIMIT">
            <summary>
            This constant defines the default number of positional arguments
            that instances of this class will capture.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.VALUE_NOT_SET">
            <summary>
            This symbolic constant maps to the empty string, and indicates that
            a specified named or positional argument was omitted from the
            command line.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor">
            <summary>
            Initialize an instance that supports exclusively positional
            arguments.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Int32)">
             <summary>
             Initialize an instance that supports exclusively positional
             arguments, and enforces a user-specified limit, in lieu of a default
             limit of 99 positional arguments
            
             Please see Remarks for important security considerations.
             </summary>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[])">
            <summary>
            Initialize the instance with a list of valid switches, all having a
            default value of Properties.Resources.SWITCH_IS_OFF.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.String[])">
            <summary>
            Initialize the instance with a list of valid named arguments, each
            having a default value of VALUE_NOT_SET.
            </summary>
            <param name="pastrValidNamedArgs">
            Array of strings, each of which is a valid (supported) argument
            name. All arguments are initialized to VALUE_NOT_SET.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.String[])">
            <summary>
            Initialize the instance with lists of valid switches and named arguments.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
            <param name="pastrValidNamedArgs">
            Array of strings, each of which is a valid (supported) argument
            name. All arguments are initialized to VALUE_NOT_SET.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String})">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the value specified in the corresponding item in pdctValidSwitches.
            </summary>
            <param name="pdctValidSwitches">
            Dictionary, keyed by switch name, a character, containing its desired
            default value, a string.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the instance with a list of valid named arguments, each
            having the default value specified in the corresponding item in
            pdctValidNamedArgs.
            </summary>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the default value specified in the corresponding item in
            pdctValidSwitches, and a separate list of valid named arguments,
            defined in the same manner.
            </summary>
            <param name="pdctValidSwitches">
            Dictionary, keyed by switch name, a character, containing its desired
            default value, a string.
            </param>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid switches, all having a
            default value of Properties.Resources.SWITCH_IS_OFF.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid named arguments, each
            having a default value of VALUE_NOT_SET.
            </summary>
            <param name="pastrValidNamedArgs">
            Array of strings, each of which is a valid (supported) argument
            name. All arguments are initialized to VALUE_NOT_SET.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with lists of valid switches and named arguments.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
            <param name="pastrValidNamedArgs">
            Array of strings, each of which is a valid (supported) argument
            name. All arguments are initialized to VALUE_NOT_SET.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the value specified in the corresponding item in pdctValidSwitches.
            </summary>
            <param name="pdctValidSwitches">
            Dictionary, keyed by switch name, a character, containing its desired
            default value, a string.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid named arguments, each
            having the default value specified in the corresponding item in
            pdctValidNamedArgs.
            </summary>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the default value specified in the corresponding item in
            pdctValidSwitches, and a separate list of valid named arguments,
            defined in the same manner.
            </summary>
            <param name="pdctValidSwitches">
            Dictionary, keyed by switch name, a character, containing its desired
            default value, a string.
            </param>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, all having a
             default value of Properties.Resources.SWITCH_IS_OFF.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.String[],System.Int32)">
             <summary>
             Initialize the instance with a list of valid named arguments, each
             having a default value of VALUE_NOT_SET.
             </summary>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.String[],System.Int32)">
             <summary>
             Initialize the instance with lists of valid switches and named arguments.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the value specified in the corresponding item in pdctValidSwitches.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
             <summary>
             Initialize the instance with a list of valid named arguments, each
             having the default value specified in the corresponding item in
             pdctValidNamedArgs.
             </summary>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the default value specified in the corresponding item in
             pdctValidSwitches, and a separate list of valid named arguments,
             defined in the same manner.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, all having a
             default value of Properties.Resources.SWITCH_IS_OFF.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid named arguments, each
             having a default value of VALUE_NOT_SET.
             </summary>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with lists of valid switches and named arguments.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the value specified in the corresponding item in pdctValidSwitches.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid named arguments, each
             having the default value specified in the corresponding item in
             pdctValidNamedArgs.
             </summary>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the default value specified in the corresponding item in
             pdctValidSwitches, and a separate list of valid named arguments,
             defined in the same manner.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the default value specified in the corresponding item in
            pdctValidSwitches, and a separate list of valid named arguments, in
            an array of strings, with the class supplying a standard default.
            </summary>
            <param name="pdctValidSwitches">
            Dictionary, keyed by switch name, a character, containing its desired
            default value, a string.
            </param>
            <param name="pastrValidNamedArgs">
            Array of strings, each of which is a valid (supported) argument
            name. All arguments are initialized to VALUE_NOT_SET.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching)">
            <summary>
            Initialize the instance with a list of valid named arguments, in
            a dictionary strings, where each value is the corresponding default,
            and a list of valid switches in an array of characters, with their
            default values as the class default.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
            <param name="penmArgMatching">
            Use this member of the CmdLneArgs.ArgMatching enumeration to set the
            argument matching rules. At present, two rules are defined. See the
            IntelliSense documentation of any CmdLneArgs argument for details.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the instance with a list of valid switches, each having
            the default value defined by the class, and a separate list of valid
            named arguments, each defined as a DictionaryItem, with its default
            value given in the value member.
            </summary>
            <param name="pachrValidSwitches">
            Array of characters, each of which is a valid (supported) switch.
            All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
            </param>
            <param name="pdctValidNamedArgs">
            Dictionary, keyed by argument name, a string, containing its desired
            default value, also a string.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.Collections.Generic.Dictionary{System.String,System.String},WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the default value defined by the class, and a separate list of valid
             named arguments, each defined as a DictionaryItem, with its default
             value given in the value member.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.String[],WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching,System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             its default value defined by the value member of a DictionaryItem,
             and a separate list of valid named arguments, each defined as a
             DictionaryItem, with its default value given in the value member.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="penmArgMatching">
             Use this member of the CmdLneArgs.ArgMatching enumeration to set the
             argument matching rules. At present, two rules are defined. See the
             IntelliSense documentation of any CmdLneArgs argument for details.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Char[],System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             the default value defined by the class, and a separate list of valid
             named arguments, each defined as a DictionaryItem, with its default
             value given in the value member.
             </summary>
             <param name="pachrValidSwitches">
             Array of characters, each of which is a valid (supported) switch.
             All switches are initialized to Properties.Resources.SWITCH_IS_OFF.
             </param>
             <param name="pdctValidNamedArgs">
             Dictionary, keyed by argument name, a string, containing its desired
             default value, also a string.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.#ctor(System.Collections.Generic.Dictionary{System.Char,System.String},System.String[],System.Int32)">
             <summary>
             Initialize the instance with a list of valid switches, each having
             its default value defined by the value member of a DictionaryItem,
             and a separate list of valid named arguments, defined in an array of
             strings, with the default value supplied by the class.
             </summary>
             <param name="pdctValidSwitches">
             Dictionary, keyed by switch name, a character, containing its desired
             default value, a string.
             </param>
             <param name="pastrValidNamedArgs">
             Array of strings, each of which is a valid (supported) argument
             name. All arguments are initialized to VALUE_NOT_SET.
             </param>
             <param name="pintPositionalArgCountLimit">
             The default limit on the number of positional arguments is
             POSITIONAL_ARGS_COUNT_LIMIT, which is currently set to 9. Use this
             argument to set a lower or higher limit.
            
             A pintPositionalArgCountLimit value of less than zero is discarded
             silently, and the default limit remains in force.
            
             Please see Remarks for important security considerations.
             </param>
             <remarks>
             SECURITY NOTE
            
             All constructors in this class enforce a limit on the number of
             positional arguments permitted. The default limit is 9, which is
             defined as a public constant, POSITIONAL_ARGS_COUNT_LIMIT.
            
             This limit is imposed to protect your program from being fed an
             excessively long command line, in an attempt to cause a denial of
             service. Although few applications require more than nine positional
             command line arguments, the level is made adjustable, to meet that
             once per career need for more than nine arguments.
            
             While objects of this class cannot do anything about the number of
             characters in the command line (That is the responsibility of the
             Common Language Runtime.), they can, and do, limit the amount of
             memory allowed to be consumed to hold arguments parsed from it.
            
             No such limits are imposed on switches and named arguments, because
             the number of valid arguments (hence, the upper limit on memory
             consumed by them) is under programmer control, and unlikely to be an
             issue, since invalid arguments are discarded.
            
             WHY NINE?
            
             I chose the number nine mostly for historical reasons. Starting with
             MS-DOS 1.0, the number of positional parameters supported by batch
             files (without resorting to tricks with SHIFT) is 9.
            
             This limit has been carried forward into modern command processors,
             including CMD.EXE, the default console mode command processor of
             Windows NT, 2000, XP, Vista, etc.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByMultipleAliases(System.String[])">
            <summary>
            Return the value of an argument that has two or more aliases.
            </summary>
            <param name="pastrValiddArgNames">
            This is an array of strings, each of which is the name of a command
            line argument that is a synonym. See Remarks.
            </param>
            <returns>
            The return value is the specified value, or its default value, of
            none of the synonyms appears in the input. See Remarks.
            </returns>
            <remarks>
            Arguments are evaluated in the order specified in pastrValiddArgNames,
            Synonyms are assumed to return the same default value.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByName(System.String)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pstrDefault is
            returned.
            </returns>
            <remarks>
            This overload is a wrapper around the second overload,
            GetArgByName ( int, string ), which does the real work.
            This method calls it internally, passing a default value of
            VALUE_NOT_SET.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByName(System.String,System.String)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pstrDefault">
            Specify a default value to return if the argument was omitted from
            the command line, or VALUE_NOT_SET or a null reference (Nothing in
            Visual Basic), to use an empty string as the default.
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pstrDefault is
            returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByName(System.String,System.String,System.Boolean)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pstrDefault">
            Specify a default value to return if the argument was omitted from
            the command line, or VALUE_NOT_SET or a null reference (Nothing in
            Visual Basic), to use an empty string as the default.
            </param>
            <param name="pfAllowEmptyStringAsDefault">
            Set this to TRUE if you want an empty string for the value of the
            pstrDefault argument treated as a valid default value. Otherwise,
            empty strings are treated as null references (Nothing in Visual
            Basic).
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pstrDefault is
            returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsChar(System.String)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pchrDefault is
            returned.
            </returns>
            <remarks>
            This method returns through GetArgByName, by way of 
            FirstCharFromString. Hence, everything that applies to either of
            them applies as well to this method.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsChar(System.String,System.Char)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pchrDefault">
            Specify a default value to return if the argument was omitted from
            the command line, or VALUE_NOT_SET or a null reference (Nothing in
            Visual Basic), to use a null character as the default.
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pchrDefault is
            returned.
            </returns>
            <remarks>
            This method returns through GetArgByName, by way of 
            FirstCharFromString. Hence, everything that applies to either of
            them applies as well to this method.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsChar(System.String,System.Char,System.Boolean)">
            <summary>
            Given the external name of a named argument (the name that was
            supplied to the constructor), return its value, which is either the
            value given on the command line or the default specified in this
            method call.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pchrDefault">
            Specify a default value to return if the argument was omitted from
            the command line, or VALUE_NOT_SET or a null reference (Nothing in
            Visual Basic), to use a null character as the default.
            </param>
            <param name="pfAllowEmptyStringAsDefault">
            Set this to TRUE if you want an empty string for the value of the
            pstrDefault argument treated as a valid default value. Otherwise,
            empty strings are treated as null references (Nothing in Visual
            Basic).
            </param>
            <returns>
            If the requested name is valid, and the argument was entered on the
            command line, the value supplied on the command line is returned. If
            the argument was omitted from the command line, or if the specified
            name is invalid, the value specified in argument pchrDefault is
            returned.
            </returns>
            <remarks>
            This method returns through GetArgByName, by way of 
            FirstCharFromString. Hence, everything that applies to either of
            them applies as well to this method.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsInt(System.String)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            zero.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <returns>
            This method passes the value returned by GetArgByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsInt(System.String,System.Int32)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            pintDefault.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pintDefault">
            Specify a default value to return if the argument was omitted from
            the command line.
            </param>
            <returns>
            This method passes the value returned by GetArgByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByNameAsInt(System.String,System.Int32,System.Boolean)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            pintDefault.
            </summary>
            <param name="pstrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pintDefault">
            Specify a default value to return if the argument was omitted from
            the command line.
            </param>
            <param name="pfAllowEmptyStringAsDefault">
            Set this to TRUE if you want an empty string for the value of the
            pstrDefault argument treated as a valid default value. Otherwise,
            empty strings are treated as null references (Nothing in Visual
            Basic).
            </param>
            <returns>
            This method passes the value returned by GetArgByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByPosition(System.Int32)">
            <summary>
            Get a positional argument by its ordinal position.
            </summary>
            <param name="pintIndex">
            Position of argument in list. Arguments are numbered from 1.
            </param>
            <returns>
            The argument value at the ordinal position specified by pintIndex is
            returned, unless pintIndex is out of range, in which case an empty
            string is returned.
            </returns>
            <remarks>
            This overload is a wrapper around the second overload,
            GetArgByPosition ( int, string ), which does the real work.
            This method calls it internally, passing a default value of
            VALUE_NOT_SET.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByPosition(System.Int32,System.String)">
            <summary>
            Get a positional argument by its ordinal position.
            </summary>
            <param name="pintIndex">
            Position of argument in list. Arguments are numbered from 1.
            </param>
            <param name="pstrDefault">
            Default value to return if argument ordinal is greater than the
            number of positional arguments entered on the command line.
            </param>
            <returns>
            The argument value at the ordinal position specified by pintIndex is
            returned, unless pintIndex is out of range, in which case, the
            default value specified in pstrDefault is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByPositionAsInt(System.Int32)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            zero.
            </summary>
            <param name="pintIndex">
            Position of argument in list. Arguments are numbered from 1.
            the constructor.
            </param>
            <returns>
            This method passes the value returned by GetArgByPosition to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetArgByPositionAsInt(System.Int32,System.Int32)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            pintDefault.
            </summary>
            <param name="pintIndex">
            Position of argument in list. Arguments are numbered from 1.
            the constructor.
            </param>
            <param name="pintDefault">
            Specify a default value to return if the argument was omitted from
            the command line.
            </param>
            <returns>
            This method passes the value returned by GetArgByPosition to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetBooleanSwitchByName(System.Char)">
            <summary>
            Test for the presence of a defined switch. The modifier, if any, is
            ignored.
            </summary>
            <param name="pchrName">
            Character to identify switch. This must be one of the characters
            stored in the array, or used as keys in the dictionary passed into
            the instance constructor.
            </param>
            <returns>
            The return value is TRUE if the switch is present, with or without a
            modifier (which is ignored). Otherwise, the return value is FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByName(System.Char)">
            <summary>
            Return the value stored for a switch argument.
            </summary>
            <param name="pchrName">
            Character to identify switch. This must be one of the characters
            stored in the array, or used as keys in the dictionary passed into
            the instance constructor.
            </param>
            <returns>
            If the switch was defined in the constructor, and it was specified
            on the command line of the executing assembly, the value defined on
            the command line is returned. Otherwise, the default value, if any,
            passed into the constructor is returned. Failing both of those, the
            generic default value constant, Properties.Resources.SWITCH_IS_OFF,
            is returned.
            </returns>
            <remarks>
            This overload is a wrapper around the other overload,
            GetSwitchByName ( char, string ), which does the real work.
            This method calls it internally, passing a default value of
            Properties.Resources.SWITCH_IS_OFF.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByName(System.Char,System.String)">
            <summary>
            Return the value stored for a switch argument.
            </summary>
            <param name="pchrName">
            Character to identify switch. This must be one of the characters
            stored in the array, or used as keys in the dictionary passed into
            the instance constructor.
            </param>
            <param name="pstrDefault">
            Default value to return if argument pchrName is not in the list of
            valid switches passed into the constructor. See pchrName.
            </param>
            <returns>
            If the switch was defined in the constructor, and it was specified
            on the command line of the executing assembly, the value defined on
            the command line is returned. Otherwise, the default value, if any,
            passed into the constructor is returned. Failing both of those, the
            generic default value constant, Properties.Resources.SWITCH_IS_OFF,
            is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByName(System.Char,System.String,System.Boolean)">
            <summary>
            Return the value stored for a switch argument.
            </summary>
            <param name="pchrName">
            Character to identify switch. This must be one of the characters
            stored in the array, or used as keys in the dictionary passed into
            the instance constructor.
            </param>
            <param name="pstrDefault">
            Default value to return if argument pchrName is not in the list of
            valid switches passed into the constructor. See pchrName.
            </param>
            <param name="pfAllowEmptyStringAsDefault">
            Set this to TRUE if you want an empty string for the value of the
            pstrDefault argument treated as a valid default value. Otherwise,
            empty strings are treated as null references (Nothing in Visual
            Basic).
            </param>
            <returns>
            If the switch was defined in the constructor, and it was specified
            on the command line of the executing assembly, the value defined on
            the command line is returned. Otherwise, the default value, if any,
            passed into the constructor is returned. Failing both of those, the
            generic default value constant, Properties.Resources.SWITCH_IS_OFF,
            is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByNameAsInt(System.Char)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            zero.
            </summary>
            <param name="pchrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <returns>
            This method passes the value returned by GetSwitchByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByNameAsInt(System.Char,System.Int32)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            pintDefault.
            </summary>
            <param name="pchrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pintDefault">
            Specify a default value to return if the argument was omitted from
            the command line.
            </param>
            <returns>
            This method passes the value returned by GetSwitchByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.GetSwitchByNameAsInt(System.Char,System.Int32,System.Boolean)">
            <summary>
            If the value of a switch is an integer, return it. Otherwise, return
            pintDefault.
            </summary>
            <param name="pchrArgName">
            Specify the external name of the argument, as it was identified to
            the constructor.
            </param>
            <param name="pintDefault">
            Specify a default value to return if the argument was omitted from
            the command line.
            </param>
            <param name="pfAllowEmptyStringAsDefault">
            Set this to TRUE if you want an empty string for the value of the
            pstrDefault argument treated as a valid default value. Otherwise,
            empty strings are treated as null references (Nothing in Visual
            Basic).
            </param>
            <returns>
            This method passes the value returned by GetSwitchByName to the 
            int.TryParse method. Hence, everything that applies to either of
            them applies as well to this method.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgNameFromKeyValue(System.String)">
            <summary>
            Extract the argument name from a string that consists of the key
            (index) of the collection.
            </summary>
            <param name="pstrArgKey">
            Specify the key to parse and strip, so that it can be fed into an
            instance method to retrieve the value of a named argument or switch.
            </param>
            <returns>
            If the function succeeds, the return value is the name of a named
            argument or of a switch, which can be fed into GetArgByName, 
            GetSwitchByName, or one of their siblings.
            </returns>
            <remarks>
            Since this class derives from a Dictionary whose keys and values are
            strings, given the string that becomes the pstrArgKey argument of
            this method, you could just as easily get the value directly.
            However, if you did so, you would lose the benefit of default value
            assignment, not to mention the accessors that bundle conversions to
            Integer, Boolean, and Character types. Moreover, reaching into the
            base class makes it slightly less obvious that the value retrieved
            is that of a command line argument, let alone its name and intrinsic
            type (switch versus named argument versus positional argument).
            
            A wiser design would hide the dictionary from view. Notwithstanding
            this one-off use, it is not too late to do so, since this is the
            only case in which I have reached into the base class in this way.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.FirstCharFromString(System.String)">
            <summary>
            Extract the first character from a string, and return it as a char
            value type.
            </summary>
            <param name="pstrIn">
            The first character in this string is returned.
            </param>
            <returns>
            The return value is the first character of string pstrIn, as a
            scalar value type.
            </returns>
            <exception cref="T:System.ArgumentException">
            If the input string, pstrIn, is null or empty, an ArgumentException
            is thrown. See the next overload for an alternative that doesn't
            throw exceptions.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.CmdLneArgsBasic.FirstCharFromString(System.String,System.Char)">
            <summary>
            Extract the first character from a string, and return it as a char
            value type.
            </summary>
            <param name="pstrIn">
            The first character in this string is returned.
            </param>
            <param name="pchrDefault">
            If string pstrIn is null or empty, this character is returned.
            </param>
            <returns>
            The return value is the first character of string pstrIn, as a
            scalar value type.
            </returns>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgListIsEmpty">
             <summary>
             This property returns True (ARG_LIST_IS_EMPTY) when the command line
             is devoid of arguments.
            
             Otherwise, it returns False (ARG_LIST_HAS_ARGS), indicating that the
             command line contains at least one argument. See Remarks.
             </summary>
             <remarks>
             ArgListIsEmpty being false means only that there is an argument in
             the command line, which may be invalid. Check the ArgMatching array
             or the two invalid argument counters, InvalidNamedArgsInCmd and
             InvalidSwitchesInCmd.
             </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.AllowEmptyStringAsDefault">
            <summary>
            The value of this property determines how the GetArgDefaultToUse and
            GetSwitchDefaultToUse methods treat an empty string supplied as a
            default value to return. See Remarks for complete details.
            </summary>
            <remarks>
            The AllowEmptyStringAsDefault property is initialized to FALSE, to
            maintain backwards compatibility with previous versions of the
            library that exports this class.
            
            By default switches return a string value of "OFF" to indicate their
            omission from the command line. To override this behavior, you must
            call the two-argument overload of GetSwitchDefaultToUse, specifying
            a default string value as the second argument.
            
            Prior to version 2.0, this overload treated both null references
            (Nothing in Visual Basic) and empty strings equally, returning the
            class default value of "OFF" in both cases.
            
            Beginning with version 2.0, this behavior can be overridden in one
            of two ways.
            
            1) Setting the AllowEmptyStringAsDefault property to TRUE (signified
            by symbolic constant BLANK_AS_DEFAULT_ALLOWED) changes the behavior
            for the entire class for the rest of its lifetime, or until it is
            set back to its default, whichever comes first.
            
            2) Calling method GetSwitchDefaultToUse or GetArgDefaultToUse with a
            third (Boolean) argument that affects only the behavior of that one
            call, regardless of the current AllowEmptyStringAsDefault setting.
            This method leaves the AllowEmptyStringAsDefault property unchanged.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgumentMatching">
            <summary>
            Although you cannot change the rules in the middle of the game,
            transparency is highly desirable.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgumentTypeArray">
            <summary>
            This property is an array of ArgType enumerated types, which has one
            element for each command line argument. Use this list to find and
            report invalid command line arguments, if any.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.DefinedNamedArgs">
            <summary>
            Count of named arguments defined by the constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.DefinedSwitches">
            <summary>
            Count of switches defined by the constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.InvalidArgsCount">
            <summary>
            Total number of invalid arguments found in the command line. This is
            the sum of InvalidNamedArgsInCmd and InvalidSwitchesInCmd. Use it as
            a quick check for invalid arguments.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.InvalidNamedArgsInCmd">
            <summary>
            Count of invalid named arguments found in the command line.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.InvalidSwitchesInCmd">
            <summary>
            Count of invalid switches found in the command line.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.PositionalArgsInCmdLine">
            <summary>
            Count of positional arguments found in the command line.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.SWITCH_IS_OFF">
            <summary>
            Gets the SWITCH_IS_OFF string, which is loaded from the string
            resources of the DLL into a private static read-only string.
            </summary>
            <remarks>
            This static read-only property replaces a like named constant, which
            I moved into the resource strings because that is really where it
            belongs, so that the library can be adapted for another language by
            substituting a localized string resource.
            
            While the simplest approach would be to assign these names to the
            private strings, and mark them public, doing so would obscure their
            their true nature.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.SWITCH_IS_ON">
            <summary>
            Gets the SWITCH_IS_ON string, which is loaded from the string
            resources of the DLL into a private static read-only string.
            </summary>
            <remarks>
            This static read-only property replaces a like named constant, which
            I moved into the resource strings because that is really where it
            belongs, so that the library can be adapted for another language by
            substituting a localized string resource.
            
            While the simplest approach would be to assign these names to the
            private strings, and mark them public, doing so would obscure their
            their true nature.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.ValidNamedArgsInCmdLine">
            <summary>
            Count of valid named arguments found in the command line.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.CmdLneArgsBasic.ValidSwitchesInCmdLine">
            <summary>
            Count of valid switches found in the command line.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching">
            <summary>
            Argument matching may be either case sensitive (default) or case
            insensitive (by constructor override). Constructor argument
            penmArgMatching is of this type.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching.CaseSensitive">
            <summary>
            Argument matching is case sensitive.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgMatching.CaseInsensitive">
            <summary>
            Argument matching is case insensitive.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType">
             <summary>
             Arguments may be of three types:
            
             1) Named
             2) Positional
             3) Switch
            
             Further, the first and third types may be invalid arguments of their
             respective types. That is, a switch may be invalid, or the name of a
             Named Argument may be invalid.        ///
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType.InvalidNamed">
            <summary>
            The specified argument appears to be a named argument, but its
            name is undefined (not on the list of valid names).
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType.InvalidSwitch">
            <summary>
            The specified argument appears to be a switch, but its name is
            undefined (not on the list of valid switch characters).
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType.Named">
            <summary>
            The argument is named, and its value is in the list of valid
            names.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType.Positional">
            <summary>
            The argument is positional. That is, it is neither a named
            argument, nor a switch. Its meaning is defined by its order of
            appearance in the command line.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.CmdLneArgsBasic.ArgType.Switch">
            <summary>
            The argument is a switch, and its value is in the list of valid
            switch characters.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.CSVFileInfo">
            <summary>
            Use these constants and service routines to simplify working with CSV
            type files.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.DLLServices2.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.CSVFileInfo.EMPTY_FILE">
            <summary>
            The Length property of a file returns this value to indicate that a
            file is absolutely empty.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.DLLServices2.ListInfo.LIST_IS_EMPTY"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.CSVFileInfo.FIRST_RECORD">
            <summary>
            When you use Syatem.IO.File.ReadAllLines to read an entire file into
            an array of strings, this constant refers to the first data row of a
            labeled CSV file.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.CSVFileInfo.LABEL_ROW">
            <summary>
            When you use Syatem.IO.File.ReadAllLines to read an entire file into
            an array of strings, this constant refers to the label row of a
            labeled CSV file.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.RecordCount(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.LongRecordCount(System.String[])"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.CSVFileInfo.RecordCount(System.String[])">
            <summary>
            Derive the record count from the length of an array of records
            loaded from a labeled CSV type file.
            </summary>
            <param name="pastrWholeFile">
            Array populated with all records read from a text file
            
            Please see the Remarks section.
            </param>
            <returns>
            Number of records in file, excluding the expected label row
            
            Please see the Remarks section.
            </returns>
            <remarks>
            This method starts from the Length property of array pastrWholeFile.
            
            For the most part, this function is syntactic sugar. Given an array,
            pastrWholeFile, populated with strings that represent every record
            in a text file, this function returns the record count, adjusted for
            the label row that is assumed to be present.
            
            This assumption is justified by the fact that I almost always put a
            label row in my delimited ASCII text files, even if the intended use
            doesn't require one, because it makes diagnostic studies so much
            easier. In the long run, I prefer to have my programs discard the
            unneeded label row than have a carbon unit try to figure out what is
            supposed to be in each of its columns.
            </remarks>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.LongRecordCount(System.String[])"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.CSVFileInfo.LongRecordCount(System.String[])">
            <summary>
            Derive the record count from the length of an array of records
            loaded from a labeled CSV type file.
            </summary>
            <param name="pastrWholeFile">
            Array populated with all records read from a text file
            
            Please see the Remarks section.
            </param>
            <returns>
            Number of records in file, excluding the expected label row
            
            Please see the Remarks section.
            </returns>
            <remarks>
            This method starts from the LongLength property of array
            pastrWholeFile.
            
            For the most part, this function is syntactic sugar. Given an array,
            pastrWholeFile, populated with strings that represent every record
            in a text file, this function returns the record count, adjusted for
            the label row that is assumed to be present.
            
            This assumption is justified by the fact that I almost always put a
            label row in my delimited ASCII text files, even if the intended use
            doesn't require one, because it makes diagnostic studies so much
            easier. In the long run, I prefer to have my programs discard the
            unneeded label row than have a carbon unit try to figure out what is
            supposed to be in each of its columns.
            </remarks>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.EMPTY_FILE"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.FIRST_RECORD"/>
            <seealso cref="F:WizardWrx.DLLServices2.CSVFileInfo.LABEL_ROW"/>
            <seealso cref="M:WizardWrx.DLLServices2.CSVFileInfo.RecordCount(System.String[])"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.DisplayFormats">
            <summary>
            Pass these constants to the ToString method on an object of the
            appropriate type to render the object for printing.
            
            The comment associated with each constant identifies the types for
            which it is appropriate.
            
            There are service methods to facilitate using the Date/Time formatting
            constants, which cannot be fed to ToString, except, perhaps, with a
            custom formatting engine. Use these service methods, or call the
            ReformatSysDate function, which also belongs to this library, directly.
            
            NOTE: The time formatting strings and routines in this class are time
            zone agnostic. If you want or need the time zone, use the companion
            method, GetDisplayTimeZone, defined in sibling class Util.
            </summary>
            <seealso cref="T:WizardWrx.DLLServices2.SysDateFormatters"/>
            <seealso cref="T:WizardWrx.DLLServices2.TimeDisplayFormatter"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_LC">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as an arbitrary string of hexadecimal digits, using lower
            case glyphs..
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_UC">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as an arbitrary string of hexadecimal digits, using upper
            case glyphs..
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_2">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 2 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_4">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 4 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_8">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it as a string of 8 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0h.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0H.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0x.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Substitute this into a format string as a prefix to a hexadecimal
            number display. This string renders exactly as shown, 0X.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.NUMBER_PER_REG_SETTINGS">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey ALL of the
            settings, including the number of digits to display after the
            decimal point for a whole number.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 0.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 2, which happens to be the default for a US
            installation. Nevertheless, uses this value if changes made by the
            user would mess up your work.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Pass this constant to the ToString method on any integral type to
            format it according to the current settings in the Regional Settings
            part of the Windows Control Panel.
            
            This format string causes the formatting engine to obey all of the
            settings, EXCEPT the number of digits to display after the decimal
            point for a whole number.
            
            This format string overrides the digits after decimal value
            specified by the iDigits value of Windows Registry key
            HKCU\Control Panel\International, causing it to behave as if it had
            been set to 3.
            
            The override applies only to the instance ToString method being
            called; the Registry is unchanged.
            
            See http://technet.microsoft.com/en-us/library/cc978638.aspx.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.PERCENT">
            <summary>
            Pass this constant to the ToString method on a single or double
            precision floating point number to be displayed as an integral
            percentage.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.PERCENT_DIGITS_2">
            <summary>
            Pass this constant to the ToString method on a single or double
            precision floating point number to be displayed as a fixed point
            percentage, accurate to two decimal places.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.STANDARD_DISPLAY_DATE_FORMAT">
            <summary>
            I use this with my SysDateFormatters class to format a date (sans
            time) so that it prints as YYYY/MM/DD.
            
            IMPORTANT: This string specifically targets the methods in the
            SysDateFormatters class. SysDateFormatters strings are incompatible
            with ToString.
            </summary>
            <example>
            2014/09/04
            </example>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.STANDARD_DISPLAY_DATE_TIME_FORMAT">
            <summary>
            I use this with my SysDateFormatters class to format a date and time
            so that it prints as YYYY/MM/DD HH:MM:SS.
            
            IMPORTANT: This string specifically targets the methods in the
            SysDateFormatters class. SysDateFormatters strings are incompatible
            with ToString.
            </summary>
            <example>
            2014/09/04 16:17:30
            </example>
        </member>
        <member name="F:WizardWrx.DLLServices2.DisplayFormats.STANDARD_DISPLAY_TIME_FORMAT">
            <summary>
            I use this with my SysDateFormatters class to format a time (sans
            date) so that it prints as HH:MM:SS.
            
            IMPORTANT: This string specifically targets the methods in the
            SysDateFormatters class. SysDateFormatters strings are incompatible
            with ToString.
            </summary>
            <example>
            16:17:30
            </example>
        </member>
        <member name="M:WizardWrx.DLLServices2.DisplayFormats.FormatDateForShow(System.DateTime)">
            <summary>
            Use my standard format string for displaying date stamps in
            reports, to format a DateTime structure.
            </summary>
            <param name="pdtmTestDate">
            Specify the populated DateTime to be formatted. Since only the date
            goes into the format, the time component MAY be uninitialized.
            </param>
            <returns>
            The return value is a string representation of the date and time,
            rendered according to constant STANDARD_DISPLAY_TIME_FORMAT.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.DisplayFormats.FormatDateTimeForShow(System.DateTime)">
            <summary>
            Use my standard format string for displaying date/time stamps in
            reports, to format a DateTime structure.
            </summary>
            <param name="pdtmTestDate">
            Specify the populated DateTime to be formatted. Since the date and
            time go into the output string, the entire structure must be
            initialized.
            </param>
            <returns>
            The return value is a string representation of the date and time,
            rendered according to constant STANDARD_DISPLAY_DATE_TIME_FORMAT.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.DisplayFormats.FormatTimeForShow(System.DateTime)">
            <summary>
            Use my standard format string for displaying time stamps in reports,
            to format a DateTime structure.
            </summary>
            <param name="pdtmTestDate">
            Specify the populated DateTime to be formatted. Since only the time
            goes into the format, the date component MAY be uninitialized.
            </param>
            <returns>
            The return value is a string representation of the date and time,
            rendered according to constant STANDARD_DISPLAY_TIME_FORMAT.
            </returns>
        </member>
        <member name="T:WizardWrx.EnhancedIOException">
            <summary>
            This class is a thin veneer over its base class, System.IO.IOException,
            which exists solely to expose its HRESULT property, so that it can be
            tested, rather than being hostage to a message. Breaking free of the
            message makes this class locale agnostic.
            </summary>
        </member>
        <member name="M:WizardWrx.EnhancedIOException.#ctor">
            <summary>
            Though technically optional, I prefer to make the default
            constructor explicit.
            </summary>
            <remarks>
            Since the next constructor is the only one that is usable, this one
            is hidden.
            </remarks>
        </member>
        <member name="M:WizardWrx.EnhancedIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is intended for use by the public EnhancedIOException
            constructor, which takes an IOException Exception, which must be
            serialized, then read into the subclassed object.
            </summary>
            <param name="pserInfo">
            The SerializationInfo object is a collection of key-value pairs that
            stores the properties of the parent class, an instance of an
            System.IO.IOException Exception.
            </param>
            <param name="pscxContext">
            The StreamingContext is maintained by the serialization engine. You
            can safely treat it as a black box.
            </param>
        </member>
        <member name="M:WizardWrx.EnhancedIOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Since the object is created by importing an IOException that was
            serialized to a JSON string, this is the only constructor that needs
            to be public.
            </summary>
            <param name="pserInfo">
            The SerializationInfo object is a collection of key-value pairs that
            stores the properties of the parent class, an instance of an
            System.IO.IOException Exception.
            </param>
            <param name="pscxContext">
            The StreamingContext is maintained by the serialization engine. You
            can safely treat it as a black box.
            </param>
        </member>
        <member name="M:WizardWrx.EnhancedIOException.SubclassIOException(System.IO.IOException)">
            <summary>
            This method provides a roundabout mechanism to subclass IOException
            exceptions.
            </summary>
            <param name="pexIOBase">
            This public constructor take a roundabout path, through a JSON
            serialization engine, to subclass the IOException thrown by a
            System.IO object.
            </param>
            <returns>
            The return value is the initialized EnhancedIOException.
            </returns>
        </member>
        <member name="P:WizardWrx.EnhancedIOException.HRESULT">
            <summary>
            The sole objective of creating this class is to expose the protected
            HRESULT property of the base class as a read only property for an
            assembly that targets version 2.0 of the Microsoft .NET Framework.
            
            Since newer versions expose the HRESULT, they can dispense with this
            device.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ErrorMessagesInColor">
             <summary>
             Console.Error.Write and Console.Error.WriteLine methods that write in
             living color.
             </summary>
             <remarks>
             There are two identical sets of methods.
            
             1) Static methods write text in your choice of foreground and background
             colors, then revert the console colors to their initial values (that is,
             the values they had when the program loaded).
            
             2) Instance methods go a step further, by maintaining a record of the
             current colors, so that the colors can progress through a range, without
             reverting to the initial colors.
            
             For each overload of Console.Error.Write, there are corresponding static
             and instance methods. The only difference in their signatures is that
             these methods specify a foreground color and a background color,
             followed by the same arguments that would apply to the corresponding
             overload of the Console.Error.Write method.
             </remarks>
             <seealso cref="T:WizardWrx.DLLServices2.MessageInColor"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.#ctor">
            <summary>
            Constructing an instance saves the current foreground and background
            colors into two pairs of read only ConsoleColor properties. Methods
            facilitate changing one or both colors, while retaining the original
            colors in the other two ConsoleColor properties, which are never
            changed after the class instance comes into being.
            </summary>
            <remarks>
            This method is provided to facilitate construction of a List or
            other sortable collection of ErrorMessagesInColor objects, and 
            allows for a future version of this class to be exposed to COM.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.#ctor(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            This constructor creates an instance with its foreground and
            background colors properties set to the specified ConsoleColor
            values, which presumably differ from the initial foreground and
            background colors.
            </summary>
            <param name="pclrTextForeColor">
            Specify the ConsoleColor property to use as the text (foreground)
            color in generated messages.
            </param>
            <param name="pclrTextBackColor">
            Specify the ConsoleColor property to use as the background color in
            generated messages.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substitution token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substitution tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substitution tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substitution tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substitution token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substitution tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substitution tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substitution tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substitution token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substitution tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substitution tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substitution tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substitution token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substitution tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substitution tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substitution tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.GetDefaultErrorMessageColors(WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity)">
            <summary>
            Return a new ErrorMessagesInColor object with its text and
            background colors initialized from the specified default color pair.
            </summary>
            <param name="penmErrorSeverity">
            Specify a member of the ErrorSeverity enumeration to indicate which
            of the two default color schemes is wanted.
            </param>
            <returns>
            The returned ErrorMessagesInColor object is ready for use with the
            instance Write and WriteLine methods to display error messages of
            the specified type on the STDERR (Standard Error) console stream.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.GetDefaultMessageColors(WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity)">
            <summary>
            Return a new MessageInColor object with its text and background
            colors initialized from the specified default color pair.
            </summary>
            <param name="penmErrorSeverity">
            Specify a member of the ErrorSeverity enumeration to indicate which
            of the two default color schemes is wanted.
            </param>
            <returns>
            The returned MessageInColor object is ready for use with the
            instance Write and WriteLine methods of its class to display
            messages of the specified type on the STDOUT (Standard Output)
            console stream.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.SetDefaultErrorMessageColors(WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Simultaneously override the default text and background colors that
            are read into four static ConsoleColor properties when the library
            initializes. This can also be accomplished by setting the text and
            background color properties separately, but this accomplishes the
            task with one method call.
            </summary>
            <param name="penmErrorSeverity">
            Specify a member of the ErrorSeverity enumeration to indicate which
            of the two default color schemes is wanted.
            </param>
            <param name="pclrTextForeColor">
            Specify the ConsoleColor property to use as the text (foreground)
            color in generated messages.
            </param>
            <param name="pclrTextBackColor">
            Specify the ConsoleColor property to use as the background color in
            generated messages.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RestoreOrigColors">
            <summary>
            Use this method to simultaneously restore the background and
            foreground colors to the values that they had when the ErrorMessagesInColor
            instance was constructed.
            </summary>
            <remarks>
            The current background and foreground colors can be obtained at any
            time by querying the corresponding read/write Console property
            (BackgroundColor property and ForegroundColor, respectively).
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.SaveOrigColors">
            <summary>
            The constructors use this method to save the console colors as they
            were when the constructor ran.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.SaveTextColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            The constructors use this method to initialize the properties that
            keep the selected foreground and background colors for use by the
            instance Write and WriteLine methods.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use as the text (foreground) color.
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use as the background color behind the
            text.
            </param>
            <remarks>
            The constructors pass in the same colors that were saved by the
            SaveOrigColors method for any unused color.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.SetMessageColors">
            <summary>
            This instance method saves the current Console.BackgroundColor and
            Console.ForegroundColor properties, so that they can be subsequently
            restored, then sets them to the message colors to the values stored
            in the MessageBackgroundColor and MessageForegroundColor properties.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.RestoreMessageColors">
            <summary>
            This instance method uses the ConsoleColor values saved by the
            SetMessageColors method to restore the colors to the values that
            were in use when the instance Write or WriteLine method was called.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColor.SetMessageColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Change the foreground and background colors, but make no effort to
            retain their old or new values. See Remarks.
            </summary>
            <param name="pclrNewForeColor">
            Specify a member of the ConsoleColor enumeration that will become
            the new foreground color, which remains in effect until changed by a
            subsequent call to SetMessageColors.
            </param>
            <param name="pclrNewBackColor">
            Specify a member of the ConsoleColor enumeration that will become
            the new background color, which remains in effect until changed by a
            subsequent call to SetMessageColors.
            </param>
            <remarks>
            The current background and foreground colors can be obtained at any
            time by querying the corresponding read/write Console property
            (BackgroundColor property and ForegroundColor, respectively).
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.OriginalBackgroundColor">
            <summary>
            Gets the Console.BackgroundColor that was in force when the instance
            was constructed.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.OriginalForegroundColor">
            <summary>
            Gets the Console.ForegroundColor that was in force when the instance
            was constructed.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.MessageBackgroundColor">
            <summary>
            Gets or sets the Console.BackgroundColor to use for messages
            generated by the instance Write and WriteLine methods.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.MessageForegroundColor">
            <summary>
            Gets or sets the Console.ForegroundColor to use for messages
            generated by the instance Write and WriteLine methods.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.FatalExceptionTextColor">
             <summary>
             Get the color to apply to the text of a fatal exception message.
            
             The return value is a member of the System.ConsoleColors enumeration
             that is intended to be treated as a foreground (text) color.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.FatalExceptionBackgroundColor">
             <summary>
             Get the color to use as the background of a fatal exception message.
            
             The return value is a member of the System.ConsoleColors enumeration
             that is intended to be treated as a background color.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.RecoverableExceptionTextColor">
             <summary>
             Get the color to apply to the text of a recoverable exception
             message.
            
             The return value is a member of the System.ConsoleColors enumeration
             that is intended to be treated as a foreground (text) color.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ErrorMessagesInColor.RecoverableExceptionBackgroundColor">
             <summary>
             Get the color to use as the background of a recoverable exception
             message.
            
             The return value is a member of the System.ConsoleColors enumeration
             that is intended to be treated as a background color.
             </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity">
            <summary>
            Use this enumeration to specify the desired color scheme to the
            GetDefaultErrorMessageColors and GetDefaultMessageColors methods.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity.Fatal">
            <summary>
            The error is fatal, and the program has terminated.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ErrorMessagesInColor.ErrorSeverity.Recoverable">
            <summary>
            The program recovered from the error, and the message is for
            your information. You can probably prevent it by some corrective
            action.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ErrorMessagesInColorConverter">
            <summary>
            Although its scope is public, the only practical use for this class is
            to facilitate storage of default or user specified ErrorMessagesInColor
            values in application settings files. That being the case, I put it at
            the end of the source file that defines that class.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Return True if inputs of the specified type can be converted.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="ptypSourceType">
            This argument specifies the System.Type to be evaluated. Treat it as
            a black box.
            </param>
            <returns>
            This method returns TRUE if ptypSourceType is typeof ( string ). Any
            other type returns FALSE.
            </returns>
            <remarks>
            This method and its companions ConvertFrom and ConvertTo are 
            delegates, which the runtime engine calls as needed. Hence, the
            arguments described above as black boxes are required, although this
            implementation ignores them, since it processes string
            representations of the System.Console.ConsoleColors enumerated type.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from string (the only supported source type) to
            ErrorMessagesInColor.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="pCulture">
            This argument supplies a reference to the current CultureInfo object
            that drives many aspects of text and numeric conversions. Treat it as
            a black box.
            </param>
            <param name="pobjValue">
            Specify the source object to be converted. Although the method
            signature requires this argument to be cast to Object, the only type
            supported is System.string. In any event, treat it as a black box.
            </param>
            <returns>
            Although specified as object to meet the requirements of the base
            class, the return value is expected to be an ErrorMessagesInColor
            object.
            </returns>
            <remarks>
            This method and its companions CanConvertFrom and ConvertTo are 
            delegates, which the runtime engine calls as needed. Hence, the
            arguments described above as black boxes are required, although this
            implementation ignores them, since it processes string
            representations of the System.Console.ConsoleColors enumerated type.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ErrorMessagesInColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Given an ErrorMessagesInColor object, return a string representation
            that is suitable for storage in a standard application settings file.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="pCulture">
            This argument supplies a reference to the current CultureInfo object
            that drives many aspects of text and numeric conversions. Treat it as
            a black box.
            </param>
            <param name="pobjValue">
            Although the method signature calls for an generic System.Object,
            this argument must actually be an ErrorMessagesInColor object.
            </param>
            <param name="pDestType">
            The only valid value for this argument is typeof ( string ). The
            specification type is dictated by the signature of the ConvertTo
            method in the base class.
            </param>
            <returns>
            Although specified as object to meet the requirements of the base
            class, the return value is expected to be a System.string.
            </returns>
            <remarks>
            This method and its companions CanConvertFrom and ConvertFrom are 
            delegates, which the runtime engine calls as needed. Hence, the
            arguments described above as black boxes are required, although this
            implementation ignores them, since it processes string
            representations of the System.Console.ConsoleColors enumerated type.
            </remarks>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger">
             <summary>
             This Singleton class exposes methods for formatting data from instances
             of the System.Exception class, and commonly used derived classes, and
             displaying the formatted data on a console (strictly speaking, on
             STDOUT, which can be redirected to a file), and recording them in a
             Windows event log.
            
             Unlike most of the classes defined in this library, this class may be
             inherited.
            
             All methods of this class are thread-safe. See Remarks.
             </summary>
             <remarks>
             This class was developed to report exceptions in a multi threaded console
             application. Its methods were designed to report messages in a manner
             that is thread-safe, yet keeps each message intact.
            
             Both objectives are achieved fairly easily.
            
             1) All methods use only local variables. The only class level static
             data is a handful of constants, which are, by definition, read only, and
             the private SyncRoot object used to synchronize access to the object and
             its properties. This satisfies the first condition of thread safety,
             because all methods have exclusive access to all of their data.
            
             2) Each message is built up, line by line, by appending to an instance
             of a StringBuilder class, using its AppendFormat method, which behaves
             like the static Format method of the System.String class. Although the
             AppendFormat method is an instance method, since the associated instance
             is local, thread safety remains intact. See Reference 1.
            
             2) A single call to TextWriter.Synchronized ( Console.Out ).WriteLine
             or TextWriter.Synchronized ( Console.Error ).WriteLine writes the
             message, all at once, onto the console, preserving its integrity. Since
             the only event that uses a shared resource is called once only, and that
             call is synchronized, the message display is intact.
            
             Since each method uses the shared resource, access to the console
             Standard Error (STDERR) stream, once only, and does so in a synchronized
             (thread-safe) way, the entire method is thread-safe.
            
             As a reminder to include WizardWrx.DLLServices2.dll in your projects, I
             left this class in the WizardWrx.DLLServices2 namespace. Only symbolic
             constants got promoted to the root namespace.
             </remarks>
             <seealso cref="T:WizardWrx.DLLServices2.PropertyDefaults"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.GenericSingletonBase`1">
            <summary>
            Abstract class GenericSingletonBase is a complete implementation of the
            Singleton design pattern that takes full advantage of the Microsoft .NET
            Framework. Please see the Remarks for further details.
            </summary>
            <typeparam name="T">
            This class uses a recursive constraint on T, to require it to be derived
            from this base class.
            </typeparam>
            <remarks>
            The optimizations in this implementation take advantage of a guarantee
            made by the framework that it won't bother to call a static constructor
            on a class until its first use. Moreover, a static constructor is never
            called more than once, no matter how many subsequent references to the
            class occur.
            
            Taking advantage of these features of the framework eliminates the need
            for synchronization, and replaces a method call with a direct reference
            to the static read only property that returns a reference to the one and
            only instance.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.GenericSingletonBase`1.PRIVATE_CTOR_OK">
            <summary>
            The static GenericSingletonBase constructor uses this flag as the
            second of two arguments to Activator.CreateInstance, to tell it that
            a private constructor is acceptable, which meets a requirement of
            the Singleton design pattern.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.GenericSingletonBase`1.#ctor">
            <summary>
            The private constructor has no real work to do, but it must exist to
            prevent the framework from generating a public constructor, which
            would violate a critical constraint of the Singleton design pattern.
            </summary>
            <remarks>
            This property is marked protected to give derived classes direct
            access to it, which their static members require. For example, in
            ExceptionLogger, the static initializer has more work to do that it
            cannot start until an instance exists.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.GenericSingletonBase`1.#cctor">
            <summary>
            The static constructor initializes the private static 
            _genTheOnlyInstance member that holds the reference to the one and
            only instance of the derived class.
            </summary>
            <remarks>
            I had to stop and think for a minuted about why the first token in
            the r-value is the upper case T, enclosed in parentheses. Then, I
            realized that it is an explicit cast.
            
            More obvious, due to recent experience adding a static constructor
            to another class, is that the static constructor cannot have an
            access modifier, and is, by definition, private. This simplification
            of the Singleton design pattern takes advantage of the fact that the
            framework won't run the static constructor until the first reference
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.GenericSingletonBase`1.s_genTheOnlyInstance">
            <summary>
            This static member holds the reference to the one and only instance
            of the derived class that is permitted.
            </summary>
            <remarks>
            This property is marked protected to give derived classes direct
            access to it, which their static members require. For example, in
            ExceptionLogger, the static initializer has more work to do that it
            cannot start until an instance exists.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.GenericSingletonBase`1.TheOnlyInstance">
            <summary>
            This implementation simplifies access to the single instance by way
            of this static read-only property that returns the reference to the
            instance stored in its one and only private static member.
            </summary>
            <remarks>
            The sweet thing about this implementation is that your code doesn't
            really need a copy of the reference, since a tail call on the static
            property is always sufficient.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.WIZARDWRX_EVENT_SOURCE_ID">
            <summary>
            This string defines a default event source ID, WizardWrx, which I
            register on behalf of my own applications.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance">
             <summary>
             Call this static method from anywhere to get a reference to the
             ExceptionLogger singleton.
             </summary>
             <returns>
             The return value is a reference to the singleton, which is created
             the first time the method is called. Subsequent calls return a
             reference to the singleton.
             </returns>
             <remarks>
             All four overloads call this method, caching the returned reference
             in a local variable, before they override one or more of its default
             property values. When all overrides have been processed, the cached
             reference is returned through the overload that took the call.
            
             This roundabout procedure is necessary because the properties cannot
             be set until the object has been created. The most straightforward
             way to do this is to call the default method, which performs a task
             usually performed by a default constructor in this implementation of
             the singleton design pattern.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.Subsystem)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem property.
            </summary>
            <param name="penmSubsystem">
            Use this member of the Subsystem enumeration to modify the behavior
            of the exception logging methods, by enabling console output if the
            calling application has one.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.Subsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog)">
            <summary>
            Call this static method from anywhere in your code to get a
            reference to the ExceptionLogger singleton and set its AppSubsystem
            and EventLoggingState properties.
            </summary>
            <param name="penmSubsystem">
            Use this member of the Subsystem enumeration to modify the behavior
            of the exception logging methods, by enabling console output if the
            calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.Subsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem,
            EventLoggingState, AppStackTraceDisposition properties.
            </summary>
            <param name="penmSubsystem">
            Use this member of the Subsystem enumeration to modify the behavior
            of the exception logging methods, by enabling console output if the
            calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <param name="penmStackTraceDisposition">
            Use this member4 of the StackTraceDisposition enumeration to modify
            the behavior of the exception logging methods, by causing the stack
            trace to be either included or omitted.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.Subsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition,System.String)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem,
            EventLoggingState, AppStackTraceDisposition, and AppEventSourceID
            properties
            </summary>
            <param name="penmSubsystem">
            Use this member of the Subsystem enumeration to modify the behavior
            of the exception logging methods, by enabling console output if the
            calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <param name="penmStackTraceDisposition">
            Use this member4 of the StackTraceDisposition enumeration to modify
            the behavior of the exception logging methods, by causing the stack
            trace to be either included or omitted.
            </param>
            <param name="pstrEventSourceID">
            Use this string to override the default event source ID,  which is
            WIZARDWRX_EVENT_SOURCE_ID.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem
            property.
            </summary>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem
            and EventLoggingState properties.
            </summary>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem,
            EventLoggingState, AppStackTraceDisposition properties.
            </summary>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <param name="penmStackTraceDisposition">
            Use this member4 of the StackTraceDisposition enumeration to modify
            the behavior of the exception logging methods, by causing the stack
            trace to be either included or omitted.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition,System.String)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its AppSubsystem,
            EventLoggingState, AppStackTraceDisposition, and AppEventSourceID
            properties
            </summary>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <param name="penmStackTraceDisposition">
            Use this member4 of the StackTraceDisposition enumeration to modify
            the behavior of the exception logging methods, by causing the stack
            trace to be either included or omitted.
            </param>
            <param name="pstrEventSourceID">
            Use this string to override the default event source ID,  which is
            WIZARDWRX_EVENT_SOURCE_ID.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetTheSingleInstance(WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem,WizardWrx.DLLServices2.ExceptionLogger.OutputOptions,System.String)">
            <summary>
            Call this static method from anywhere to get a reference to the
            ExceptionLogger singleton and set its ProcessSubsystem,
            OptionFlags, and AppEventSourceID properties.
            </summary>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <param name="penmOutputOptions">
            The OutputOptions enumeration is organized for use as a bit mask.
            Set its flags as desired to control the format and content of output
            generated by the ReportException methods.
            </param>
            <param name="pstrEventSourceID">
            Use this string to override the default event source ID,  which is
            WIZARDWRX_EVENT_SOURCE_ID.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
            <remarks>
            This method looks entirely forward, which means that it doesn't
            bother with the obsolete properties.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.RestoreDefaultColors(System.Boolean)">
            <summary>
            Restore the default exception message colors.
            </summary>
            <param name="pfWipeSavedColors">
            To have the colors saved by the last call to SaveCurrentColors
            discarded, set this argument to TRUE. Otherwise, the saved colors
            are preserved.
            </param>
            <returns>
            The return value is the reinstated default exception message colors,
            which may be NULL if the color scheme is invalid (both colors set to
            the same value) or missing (no color scheme is configured).
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetReservedErrorMessage">
            <summary>
            Return a message suitable for display on a console to accompany a
            status code of ERROR_SUCCESS (zero) or ERROR_RUNTIME (one), both
            defined in the MagicNumbers class of standard constant definitions.
            </summary>
            <returns>
            Since its operation is self contained, this method should always
            succeed in returning an appropriate message.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)">
            <summary>
            Return a message suitable for display on a console to accompany a
            status code of ERROR_SUCCESS (zero) or ERROR_RUNTIME (one), both
            defined in the MagicNumbers class of standard constant definitions.
            </summary>
            <param name="penmErrorExitOptions">
            A member of the ErrorExitOptions specifies the desired action. This
            value overrides the corresponding bits in the OptionFlags bit mask.
            
            If an invalid value is specified, the returned string is an error 
            message that starts with "An internal error has occurred." If this
            happens, it should be treated as a coding error.
            </param>
            <returns>
            If the function succeeds, the returned message is ready to use; 
            appropriate substitutions have already been made. Otherwise, the
            return value is the error message described in the documentation
            of argument penmErrorExitOptions.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.OutputOptionsDisplay(System.String)">
            <summary>
            Return a labeled string representation of the current OptionFlags,
            along with decimal and hexadecimal representations of the bit mask.
            </summary>
            <param name="pstrLabel">
            Specify a label to be inserted into the message. This may be the
            empty string, or even a null reference, to omit the label.
            </param>
            <returns>
            The returned string is ready to display via Console.WriteLine or
            MessageBox.Show.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.OutputOptionTurnOff(WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
            <summary>
            Turn the specified bit in the OutputOptions bit mask OFF.
            </summary>
            <param name="penmOutputOptions">
            Specify the member of the OutputOptions enumerated type to turn OFF.
            </param>
            <returns>
            The return value is the updated OutputOptions enumerated type, which
            is organized as a bit mask.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.OutputOptionTurnOn(WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
            <summary>
            Turn the specified bit in the OutputOptions bit mask ON.
            </summary>
            <param name="penmOutputOptions">
            Specify the member of the OutputOptions enumerated type to turn ON.
            </param>
            <returns>
            The return value is the updated OutputOptions enumerated type, which
            is organized as a bit mask.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.RestoreDefaultOptions">
            <summary>
            Restore the state of the OutputOptions flags to their initial
            (default) values.
            </summary>
            <returns>
            The return value is the reinstated property value.
            </returns>
            <remarks>
            This routine calls the same static SetDefaultOptions method used by
            the static initializer, so that the defaults can be changed by
            visiting just one routine.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.RestoreSavedOptions">
            <summary>
            Restore the state of the OutputOptions flags from the copy saved by
            the last SaveCurrentOptions method call.
            </summary>
            <returns>
            This method returns the options that were just restored, so that
            callers can sanity check them against the expected settings.
            </returns>
            <remarks>
            CAUTION: Unless this method is preceded by a call to
            SaveCurrentOptions, this call clears all flags, not just back to
            their initial state, but truly clear - all flags OFF.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.RestoreSavedColors">
            <summary>
            Restore the ErrorMessageColors from the copy saved by the last
            SaveCurrentColors method call.
            </summary>
            <returns>
            This method returns the restored message colors, so that callers may
            sanity check them against the expected values.
            </returns>
            <remarks>
            CAUTION: Unless this method is preceded by a call to
            SaveCurrentColors, this call completely disables color error
            messages, unless the static initializer set default colors from a
            configuration file.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.SaveCurrentColors">
            <summary>
            Save a copy of the current colors defined by the ErrorMessageColors
            property into a private area reserved for the purpose.
            </summary>
            <returns>
            The current settings (the settings just saved) are returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.SaveCurrentOptions">
            <summary>
            Save a copy of the current state of the OutputOptions flags into a
            private area reserved for the purpose.
            </summary>
            <returns>
            The current settings (the settings just saved) are returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)">
            <summary>
            Return a message suitable for display on a console to accompany a
            status code of ERROR_SUCCESS (zero) or ERROR_RUNTIME (one), both
            defined in the MagicNumbers class of standard constant definitions.
            
            Call this method with penmErrorExitOptions equal to Succeeded to get
            the ERROR_SUCCESS placeholder string for your error message table.
            </summary>
            <param name="penmErrorExitOptions">
            A member of the ErrorExitOptions specifies the desired action. Since
            this is a static method, and doesn't have access to the instance
            properties, this value substitutes for the corresponding bits in the
            OptionFlags bit mask.
            
            If an invalid value is specified, the returned string is an error 
            message that starts with "An internal error has occurred." If this
            happens, it should be treated as a coding error.
            </param>
            <returns>
            If the function succeeds, the returned message is ready to use; 
            appropriate substitutions have already been made. Otherwise, the
            return value is the error message described in the documentation
            of argument penmErrorExitOptions.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.TimeStampedTraceWrite(System.String)">
            <summary>
            Append a message to a standard ISO-8601 time stamp.
            </summary>
            <param name="pstrMessage">
            Specify the message to record.
            </param>
            <remarks>
            Though written ostensibly for internal use, I marked this method as
            public because it will quickly find employment outside this library.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.Exception)">
             <summary>
             Format and report the properties of a generic Exception on a console
             in a thread-safe manner.
             </summary>
             <param name="perrAny">
             The instance of the base Exception class to process. See Remarks.
             </param>
             <remarks>
             This can be ANY exception type, although the intent is to limit its
             use to reporting exceptions thrown by the base class,
             System.Exception.
            
             Other overloads exist for reporting exceptions thrown by types
             derived from System.Exception.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentException)">
             <summary>
             Format and report the properties of an ArgumentException exception on
             a console in a thread-safe manner.
             </summary>
             <param name="perrBadArg">
             The instance of the ArgumentException exception to process. See
             Remarks.
             </param>
             <remarks>
             Although this method can process objects of ANY class which derives
             from ArgumentException, other methods of this class specialize in
             processing objects of the commonly used ArgumentOutOfRangeException
             and ArgumentNullException derived classes.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentOutOfRangeException)">
            <summary>
            Format and report the properties of an ArgumentOutOfRangeException
            exception on a console in a thread-safe manner.
            </summary>
            <param name="perrBadArg">
            The instance of the ArgumentOutOfRangeException class to process.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentNullException)">
            <summary>
            Format and report the properties of an ArgumentNullException
            exception on a console in a thread-safe manner. See Remarks.
            </summary>
            <param name="perrNullArg">
            The instance of an ArgumentNullException exception to process.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ObjectDisposedException)">
             <summary>
             Format and report the properties of an ObjectDisposedException
             exception on a console in a thread-safe manner. See Remarks.
             </summary>
             <param name="perrDisposed">
             The instance of the ObjectDisposedException Exception class to
             process.
             </param>
             <remarks>
             Any process that throws an ObjectDisposedException exception is in
             serious trouble, and deserves to crash, and be investigated, because
             this type of exception is almost invariably caused by a programming
             logic error.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.IO.IOException,System.IO.FileInfo)">
             <summary>
             Format and report the properties of an IOException exception on a
             console in a thread-safe manner.
             </summary>
             <param name="perrIOError">
             The instance of the IOException class to process. See Remarks.
             </param>
             <param name="pfi">
             The FileInfo object makes available much more than the file name,
             allowing for the possibility of an override to deliver more detailed
             information about the file being processed.
             </param>
             <remarks>
             This routine processes ANY exception of the IOException class and
             its derivatives. Methods for parsing published derived classes are
             somewhere on my ToDo list.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.FormatException,System.String)">
            <summary>
            Format and report the properties of an FormatException exception on
            a console in a thread-safe manner.
            </summary>
            <param name="perrrBadFormat">
            The instance of the FormatException class to process.
            </param>
            <param name="pstrFormatString">
            This should be the format string which caused the exception. There
            should be a way to feed this to the exception, or recover it, but I
            have yet to find it.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.Exception,System.String)">
             <summary>
             Format and report the properties of a generic Exception on a console
             in a thread-safe manner.
             </summary>
             <param name="perrAny">
             The instance of the base Exception class to process. See Remarks.
             </param>
             <param name="pstrCurrMethodName">
             This should be the name of the method in which the error is caught
             and reported. See Remarks.
             </param>
             <remarks>
             This can be ANY exception type, although the intent is to limit its
             use to reporting exceptions thrown by the base class,
             System.Exception.
            
             Other overloads exist for reporting exceptions thrown by types
             derived from System.Exception.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentException,System.String)">
             <summary>
             Format and report the properties of an ArgumentException exception on
             a console in a thread-safe manner.
             </summary>
             <param name="perrBadArg">
             The instance of the ArgumentException exception to process. See
             Remarks.
             </param>
             <param name="pstrCurrMethodName">
             This should be the name of the method in which the error is caught
             and reported. See Remarks.
             </param>
             <remarks>
             Although this method can process objects of ANY class which derives
             from ArgumentException, other methods of this class specialize in
             processing objects of the commonly used ArgumentOutOfRangeException
             and ArgumentNullException derived classes.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentOutOfRangeException,System.String)">
            <summary>
            Format and report the properties of an ArgumentOutOfRangeException
            exception on a console in a thread-safe manner.
            </summary>
            <param name="perrBadArg">
            The instance of the ArgumentOutOfRangeException class to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ArgumentNullException,System.String)">
            <summary>
            Format and report the properties of an ArgumentNullException
            exception on a console in a thread-safe manner. See Remarks.
            </summary>
            <param name="perrNullArg">
            The instance of an ArgumentNullException exception to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.ObjectDisposedException,System.String)">
             <summary>
             Format and report the properties of an ObjectDisposedException
             exception on a console in a thread-safe manner. See Remarks.
             </summary>
             <param name="perrDisposed">
             The instance of the ObjectDisposedException Exception class to
             process.
             </param>
             <param name="pstrCurrMethodName">
             This should be the name of the method in which the error is caught
             and reported. See Remarks.
             </param>
             <remarks>
             Any process that throws an ObjectDisposedException exception is in
             serious trouble, and deserves to crash, and be investigated, because
             this type of exception is almost invariably caused by a programming
             logic error.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.IO.IOException,System.String,System.IO.FileInfo)">
             <summary>
             Format and report the properties of an IOException exception on a
             console in a thread-safe manner.
             </summary>
             <param name="perrIOError">
             The instance of the IOException class to process. See Remarks.
             </param>
             <param name="pstrCurrMethodName">
             This should be the name of the method in which the error is caught
             and reported. See Remarks.
             </param>
             <param name="pfi">
             The FileInfo object makes available much more than the file name,
             allowing for the possibility of an override to deliver more detailed
             information about the file being processed.
             </param>
             <remarks>
             This routine processes ANY exception of the IOException class and
             its derivatives. Methods for parsing published derived classes are
             somewhere on my ToDo list.
            
             The TargetSite property, exposed by descendants of System.Exception,
             is the name of the method in which the exception was thrown.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportException(System.FormatException,System.String,System.String)">
            <summary>
            Format and report the properties of an FormatException exception on
            a console in a thread-safe manner.
            </summary>
            <param name="perrrBadFormat">
            The instance of the FormatException class to process.
            </param>
            <param name="pstrCurrMethodName">
            This should be the name of the method in which the error is caught
            and reported. See Remarks.
            </param>
            <param name="pstrFormatString">
            This should be the format string which caused the exception. There
            should be a way to feed this to the exception, or recover it, but I
            have yet to find it.
            </param>
            <remarks>
            The TargetSite property, exposed by descendants of System.Exception,
            is the name of the method in which the exception was thrown.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetStandardHandleStates(WizardWrx.DLLServices2.StateManager)">
            <summary>
            The StateManager calls this method once, immediately after both it
            and the ExceptionLogger exist.
            </summary>
            <param name="psmOfThisApp">
            To simplify matters a bit, the state manager passes a reference to
            itself.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.OptionIsOn(WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
            <summary>
            Test whether an OutputOptions is ON or OFF.
            </summary>
            <param name="penmTestThisOption">
            Specify the OutputOptions enumeration member to test.
            </param>
            <returns>
            Return TRUE if the specified option is ON; otherwise, return FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReportAsDirected(System.String,System.String)">
             <summary>
             Report as indicated by the flags stored in the _enmOutputOptions bit
             mask.
             </summary>
             <param name="pstrMsg">
             The message string to return to the caller.
             </param>
             <param name="pstrLogMsg">
             To correctly report inner exceptions, the messages for the user and
             the event log must be segregated and built concurrently.
             </param>
             <returns>
             The message to report.
             </returns>
             <remarks>
             This is the only private instance method. Making it static would
             require four additional arguments into it. I'd rather save those 128
             bytes of stack frame for when I really need it.
            
             The same message is recorded on the console, if so indicated, and in
             the application event log, EXCEPT that the copy that goes into the
             event log ALWAYS gets a stack trace attached for the exception and
             each inner exception, if any. Finally, the text is returned, so that
             the caller can use it, for example, in a message box.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.SetMessageColors">
            <summary>
            This method attends to default message colors, setting or
            reinstating them as needed.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.AddCommonElementsReportAndReturn(System.Exception,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            The last two blocks of every ReportException method are identical,
            and are extracted to reduce the code size.
            </summary>
            <param name="perrAny">
            Pass in a reference to the exception being reported, from which
            private method AddCommonElements, which may get folded into it,
            extracts the TargetSite, StackTrace, and other common properties,
            depending on the current state of the option flags.
            </param>
            <param name="psbMsg">
            Pass in a reference to the partially constructed message, which has
            the raw or parsed message, along with other properties that vary by
            exception type.
            
            This StringBuilder is eventually sent to the console if the option
            flags so indicate, and becomes the value returned by the method.
            </param>
            <param name="psbLogMsg">
            Pass in a reference to the partially constructed message, which has
            the raw or parsed message, along with other properties that vary by
            exception type.
            
            This StringBuilder is eventually sent to a Windows Event Log, if the
            option flags so indicate; otherwise, it is discarded.
            </param>
            <returns>
            The completed sbLogMsg is always returned to the calling routine,
            which may dispose of it as it sees fit, and usually discards it if
            the calling routine is a console program, or displays it in a
            message box if the program is running in the graphical subsystem.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.AddCommonElements(System.Text.StringBuilder,System.Text.StringBuilder,System.Exception,WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
             <summary>
             Add the Source, TargetSite, and StackTrace properties to the
             exception report. See Remarks.
             </summary>
             <param name="psbMsg">
             Append the report items to this StringBuilder.
             </param>
             <param name="psbLogMsg">
             Since the stack trace is always included, the message for the event
             log must be assembled separately. If event logging is disabled, this
             argument is a null reference, so we don't waste effort if it would
             be discarded.
             </param>
             <param name="perrAnyKind">
             This is an instance of the System.Exception class, or one of its
             derivatives. See Remarks.
             </param>
             <param name="penmOutputOptions">
             Combine members of the OutputOptions enumeration to specify items to
             include in the report, and how to log the error. (The enumeration is
             a bit mask.)
             </param>
             <remarks>
             This method is called recursively to process inner exceptions.
            
             By default, all exceptions which derive from System.Exception expose
             these three properties, and any of them can be cast to this type.
            
             The TargetSite string contains the name of the method that threw the
             exception.
            
             The Source string contains the name of the class to which the method
             named in the TargetSite string belongs.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.CreateForEventLog(WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
            <summary>
            Return a new empty StringBuilder if event logging is enabled.
            Otherwise, return a null reference, which signals the exception
            reporting routines to skip building a message for it.
            </summary>
            <param name="penmOutputOptions">
            Since some of the methods with which it works are static because
            they are called recursively, this routine must also be static, and
            it must receive a copy of the OutputOptions bit mask, successor to
            the RecordinEventLog flag.
            </param>
            <returns>
            If a copy of the report is bound for a Windows event log, it is
            constructed in the StringBuilder returned by this method. Otherwise,
            the null reference signals the message formatters not to bother.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.FormatStackTrace(System.Exception)">
            <summary>
            Format the stack trace to make it (hopefully) a tad easier to read.
            </summary>
            <param name="perrAnyKind">
            A reference to the entire exception is passed into the method, from
            which this routine extracts the stack trace.
            </param>
            <returns>
            The returned string contains the formatted stack trace.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetDefaultEventSourceID">
             <summary>
             Read the default event source ID string from the DLL configuration.
             </summary>
             <returns>
             If the function succeeds, the return value is the event source ID
             string stored in the configuration file that comes along for the
             ride whenever this DLL is imported into a project. Otherwise, the
             default event source ID defined in WIZARDWRX_EVENT_SOURCE_ID is
             returned.
            
             To save trips to the disk or its cache, once read, the event source
             ID is cached in static string s_strDefaultEventSource.
             </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.GetMessageTruncationStart(System.Guid)">
             <summary>
             Look up the exception in the list of known exceptions and, if found,
             return a string that marks the point where the displayed message is
             to be truncated.
             </summary>
             <param name="pguidExceptionTypeName">
             This string contains the fully qualified type name of the exception,
             which is the key to an public Dictionary of strings that mark the
             point where the message should be truncated for display. Please see
             the Remarks section.
             </param>
             <returns>
             The return value, which may be the empty string, is text, such as a
             fixed label, that marks a point where the message supplied by the
             exception is truncated.
             </returns>
             <remarks>
             Typically, a message is truncated because we present the information
             in a more visually appealing and/or accessible format. Of the myriad
             exceptions exposed by the Base Class Library, not to mention custom
             exceptions derived from System.Exception, only a handful are "known"
             types that require attention.
            
             Messages from types that are unknown to this class (i. e., they have
             no entry in the s_dctKnowExceptionTypes dictionary, are preserved.
            
             This private method hides the processing required to cover for the
             unknown exception type.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.IncludeStackTraceIfRequested(System.String,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition)">
            <summary>
            This private method returns a stack trace or empty string, depending
            on the value of the StackTraceDisposition flag.
            </summary>
            <param name="pstrPrettyStackTrace">
            Since a beautified stack trace is always added to the event log, one
            always created, although this method may ignore it.
            </param>
            <param name="penmStackTraceDisposition">
            This flag determines whether this method returns the stack trace or
            empty string.
            </param>
            <returns>
            The return value is whatever goes into the message that will be
            returned to the calling method.
            </returns>
            <remarks>
            Although this method could be coded inline, I chose this approach to
            minimize the overall amount of code in the many overloads that would
            otherwise each need IF statements and pairs of almost identical
            format statements.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.ReformatExceptionMessage(System.Exception,System.String,System.String)">
            <summary>
            This private method beautifies the format of invalid argument
            exception reports.
            </summary>
            <param name="pexAnyKind">
            Reference to exception from which to extract and format its Message
            property.
            </param>
            <param name="pstrRoutineLabel">
            This string identifies the place in the source code where the
            exception was thrown.
            </param>
            <param name="pstrMessageTemplate">
            Format string, suitable for use with String.Format, from which the
            beautified message is constructed.
            </param>
            <returns>
            Beautified string, suitable for presentation on a console.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.SetDefaultOptions">
            <summary>
            The purpose of this routine is to keep the code that sets the
            default option flags in one place only.
            </summary>
            <returns>
            The return value is the OutputOptions bit mask with all flags set to
            their initial default values.
            </returns>
            <remarks>
            I expect this one-line syntactic candy to be optimized away in the
            Release build.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.InitializeInstance(WizardWrx.DLLServices2.ExceptionLogger,WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem,WizardWrx.DLLServices2.ExceptionLogger.Subsystem,WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog,WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition)">
            <summary>
            Synchronize old and new flags and set default message colors if
            necessary.
            </summary>
            <param name="pTheInstance">
            Since this method must be static, a reference to the ExceptionLogger
            singleton must be passed into it.
            </param>
            <param name="penmProcessSubsystem">
            Use this member of the ProcessSubsystem enumeration to modify the
            default behavior of the exception logging methods, by enabling
            console output if the calling application has one.
            </param>
            <param name="penmSubsystem">
            Use this member of the Subsystem enumeration to modify the behavior
            of the exception logging methods, by enabling console output if the
            calling application has one.
            </param>
            <param name="penmEventLoggingState">
            Use this member of the RecordinEventLog enumeration to modify the
            behavior of the exception logging methods by enabling or disabling
            recording of exceptions in the application event log.
            </param>
            <param name="penmStackTraceDisposition">
            Use this member4 of the StackTraceDisposition enumeration to modify
            the behavior of the exception logging methods, by causing the stack
            trace to be either included or omitted.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.ExceptionLogger.UseEventLog(WizardWrx.DLLServices2.ExceptionLogger.OutputOptions)">
            <summary>
            Hide the complexity of bit mask testing from cursory scanning of the
            code, so that the reader doesn't feel compelled to slow down to
            study the bit test. At compile time, this routine is optimized away,
            replaced by inline code.
            </summary>
            <param name="penmOutputOptions">
            The OutputOptions enumeration is organized for use as a bit mask.
            Set its flags as desired to control the format and content of output
            generated by the ReportException methods.
            </param>
            <returns>
            Return TRUE if event logging is enabled.
            </returns>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.AppEventSourceID">
             <summary>
             Along with the EventLoggingState property, this property governs
             recording of events in the Windows Application Event Log or in a
             custom event log of your choice.
            
             The value of this property is the event source ID string to use. To
             simplify applications, this property has a default value, defined by
             WIZARDWRX_EVENT_SOURCE_ID.
            
             IMPORTANT: Each event source ID string is machine specific, and each
             maps to one, and only one, event log, which is designated when the
             source is registered, as it must be before its first use.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.ErrorMessageColors">
             <summary>
             Set this property to cause error messages to be displayed in a
             distinctive pair of foreground and background colors.
            
             Unless the AppSubsystem property is Console or CUI, this property is
             meaningless.
            
             Unlike other properties, ErrorMessageColors must be set directly,
             and it may be changed at any time.
             </summary>
             <remarks>
             A hidden MessageInColor is maintained in tandem with this property,
             for use with STDERR. In this way, messages written to either STDOUT
             or STDERR use the same color scheme.
             </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.OptionFlags">
            <summary>
            Gets or sets the new OutputOptions enumeration, which supersedes the
            obsolete individual flags.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.EventLoggingState">
             <summary>
             Along with the AppEventSourceID property, this property governs
             recording of events in a Windows Event Log.
            
             Since event logging is not always permissible for some application
             domains, such as ASP.NET applications, event logging is disabled by
             default.
            
             If logging is enabled, exceptions are recorded in the Application
             Event Log, using the event source ID string stored in the
             AppEventSourceID property.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.AppStackTraceDisposition">
            <summary>
            The value of this property determines whether the stack trace is
            included in the exception report or omitted from it.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.AppSubsystem">
             <summary>
             The value of this property determines whether the exception
             report is automatically output on the application console.
            
             Its default value suppresses output.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.ExceptionLogger.ApplicationSubsystem">
            <summary>
            The value of this property is the actual subsystem ID reported by a
            native ("unmanaged" Win32 function, GetProcessSubsystem_WW, through
            P/Invoke wrapper method IP6CUtilLib1.GetProcessSubsystem.
            </summary>
            <remarks>
            This property uses GetExeSubsystem in lieu of GetProcessSubsystem to
            circumvent an anomaly in the Visual Studio debugging engine, which
            causes that function to return 2 (Windows GUI subsystem) when you
            use the Visual Studio Hosting Process, which runs in the Windows
            subsystem. The cause of this behavior is that the Visual Studio
            Hosting Process trades places with the process under study, becoming
            the first executable file loaded into the active process.
            </remarks>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions">
            <summary>
            // Use these flags to control the output. There is no flag for the
            Message property, which always becomes part of the message.
            </summary>
            <seealso cref="T:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.Method">
             <summary>
             Show Method Name if TRUE.
            
             If the EventLog flag is also set, the method name is always
             written there.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.Source">
             <summary>
             Show Source (Assembly) Name if TRUE.
            
             If the EventLog flag is also set, the originating assembly name
             is always written there.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.Stack">
             <summary>
             Show Stack Trace if TRUE.
            
             If the EventLog flag is also set, the stack trace is always
             written there.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.EventLog">
             <summary>
             Post to associated event log if TRUE.
            
             The value of the event source associated with the current
             ExceptionLogger instance determines which event log gets the
             message.
            
             WARNING: Unless your event source string is already registered,
             the application MUST run, one time only, with full administrator
             privileges AND use the event source to write a message into the
             Windows event log in order for it to be registered with Windows,
             which maps it to an event log.
            
             Once the event source string is registered, the application can
             use it to post messages to the event log in any Windows security
             context.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.StandardOutput">
             <summary>
             Write message on STDOUT if TRUE and if the application has a
             working console.
            
             CAUTION: Although it is technically legal to set both
             StandardOutput and StandardError to TRUE, this can have the
             unwanted consequence of generating TWO copies of the message,
             unless STDOUT and/or STDERR is directed to a file or if both are
             redirected to the SAME file.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.StandardError">
             <summary>
             Write message on STDERR if TRUE and if the application has a
             working console.
            
             CAUTION: Although it is technically legal to set both
             StandardOutput and StandardError to TRUE, this can have the
             unwanted consequence of generating TWO copies of the message,
             unless STDOUT and/or STDERR is directed to a file or if both are
             redirected to the SAME file.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.Reserved1">
            <summary>
            Undefined - reserved for future use
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.Reserved2">
            <summary>
            Undefined - reserved for future use
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.ActiveProperties">
            <summary>
            Use this bit mask to include all auxiliary properties of the
            Exception (StackTrace, TargetSite, and Source) in the report,
            or to strip them form a set of flags.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.ActivePropsToEventLog">
            <summary>
            Use this bit mask to include all auxiliary properties of the
            Exception (StackTrace, TargetSite, and Source) in the report,
            and to send the report to a Windows event log.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.ActivePropsToStdErr">
            <summary>
            Use this bit mask to include all auxiliary properties of the
            Exception (StackTrace, TargetSite, and Source) in the report,
            and to send the report to the standard error stream.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.ActivePropsToStdOut">
            <summary>
            Use this bit mask to include all auxiliary properties of the
            Exception (StackTrace, TargetSite, and Source) in the report,
            and to send the report to the standard output stream.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.ActivePropsEverywhere">
            <summary>
            Use this bit mask to include all auxiliary properties of the
            Exception (StackTrace, TargetSite, and Source) in the report,
            and to send the report to a Windows event log and both the
            standard output and standard error streams. This is useful when
            you know that the standard output is redirected, and you want to
            preserve the report in the output file, in addition to having a
            copy displayed on the console.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.AllProperties">
            <summary>
            Use this flag to include all auxiliary properties of the 
            Exception (StackTrace, TargetSite, Source, Reserved1, and
            Reserved2) in the report, or to strip them form a set of flags.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.AllDestiations">
            <summary>
            Use this flag to include all destinations for output, or as a
            mask to strip them from a set of flags.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions.AllFlags">
            <summary>
            This flag turns on everything, and is of no practical use, but
            is defined for reference, to document that every bit in the byte
            is accounted for.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions">
            <summary>
            Use with the static GetSpecifiedReservedErrorMessage method or with
            the overloaded instance GetReservedErrorMessage method that allows
            callers to override the behavior dictated by its properties.
            </summary>
            <remarks>
            The correspondence between the naming and numbering of the members
            of this enumeration is by design, since the two work hand in hand
            internally, and the consistency should simplify writing calls to the
            GetReservedErrorMessage methods.
            </remarks>
            <see cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <see cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <seealso cref="T:WizardWrx.DLLServices2.ExceptionLogger.OutputOptions"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions.Succeeded">
            <summary>
            Execution succeeded; return the ERROR_SUCCESS placeholder for
            the table of error messages.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions.RecordedInEventLog">
            <summary>
            Details of the run-time exception were reported in a Windows
            Event Log.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions.RecordedInStandardOutput">
            <summary>
            Details of the run-time exception were listed on STDOUT if the
            application has a working console.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions.RecordedInStandardError">
            <summary>
            Details of the run-time exception were listed on STDERR if the
            application has a working console.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog">
            <summary>
            Use this enumeration to disable or enable event logging.
            </summary>
            <remarks>
            The penmEventLoggingState argument is defined and specified in terms
            of this enumeration.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog.Disabled">
            <summary>
            By default, events are not recorded in the event log.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.RecordinEventLog.Enabled">
            <summary>
            This value enables event logging.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition">
            <summary>
            Use this enumeration to specify whether to include or omit the
            StackTrace from the report. See Remarks.
            </summary>
            <remarks>
            The penmStackTraceDisposition is specified in terms of this
            enumeration.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition.Include">
            <summary>
            Include the StackTrace.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.StackTraceDisposition.Omit">
            <summary>
            Omit (suppress) the StackTrace.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.Subsystem">
            <summary>
            Use this enumeration to specify the subsystem (console or graphical)
            targeted by the application. Although I have read that the console
            I/O methods silently fail if called from a GUI application, I chose
            to skip calls to them unless the application signals explicitly that
            it has a console.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.Subsystem.Unknown">
            <summary>
            The subsystem type is unknown. The class must assume that it is
            running WITHOUT a console.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.Subsystem.Console">
             <summary>
             The application is running in the character mode subsystem, and
             it has a console.
             </summary>
            
             CUI is a synonym.
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.Subsystem.CUI">
             <summary>
             The application is running in the character mode subsystem, and
             it has a console.
            
             Console is a synonym.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.Subsystem.Graphical">
             <summary>
             The application is running in the graphical subsystem. The class
             must assume that it is running WITHOUT a console.
            
             GUI is a synonym.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.Subsystem.GUI">
             <summary>
             The application is running in the graphical subsystem. The class
             must assume that it is running WITHOUT a console.
            
             Graphical is a synonym.
             </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem">
            <summary>
            The new ProcessSubsystem enumeration maps exactly to the subsystem
            ID returned by GetExeSubsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem.Unknown">
            <summary>
            Subsystem is unknown, either because GetExeSubsystem hasn't been
            called, or because it returned zero and called SetLastError.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem.Windows">
            <summary>
            Application runs in the graphical subsystem; it is a true blue
            Windows application.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ExceptionLogger.ProcessSubsystem.Console">
            <summary>
            Application runs in the character mode subsystem; it is a
            console mode (a. k. a. Character Mode) application.
            </summary>
        </member>
        <member name="T:WizardWrx.FileInfoExtension">
            <summary>
            Extend the System.IO.FileInfo class with methods for testing, setting,
            and clearing file attribute flags, including the ability to save and
            restore flags to their initial states.
            </summary>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.#ctor(System.String)">
            <summary>
            We insist on a file name.
            </summary>
            <param name="pstrFileName">
            String containing the name of a file to process. This string must
            point to an existing file.
            </param>
            <remarks>
            Because of its intended use, this class is designed without a public
            default constructor. I believe that it is extrenely unlikely that a
            user would need to serialize an instance of this class.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveClear">
            <summary>
            Clear the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasArchive property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveReinstate">
            <summary>
            Restore the initial state of the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ArchiveSet">
            <summary>
            Set the Archive flag.
            </summary>
            <returns>
            Previous state of the Archive flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasArchive property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenClear">
            <summary>
            Clear the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasHidden property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenReinstate">
            <summary>
            Restore the initial state of the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.HiddenSet">
            <summary>
            Set the Hidden flag.
            </summary>
            <returns>
            Previous state of the Hidden flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasHidden property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlyClear">
            <summary>
            Clear the Read ONly flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasReadOnly property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlyReinstate">
            <summary>
            Restore the initial state of the Read Only flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.ReadOnlySet">
            <summary>
            Set the Read Only flag.
            </summary>
            <returns>
            Previous state of the Read ONly flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasReadOnly property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemClear">
            <summary>
            Clear the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasSystem property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemReinstate">
            <summary>
            Restore the initial state of the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the return value is strictly informational, callers may safely
            ignore or discard it.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileInfoExtension.SystemSet">
            <summary>
            Set the System flag.
            </summary>
            <returns>
            Previous state of the System flag.
            </returns>
            <remarks>
            Since the initial state of the flag is preserved internally by the
            class, and can be read from the WasSystem property, callers may
            safely ignore or discard the return value.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.TheFile">
            <summary>
            Return the underlying FileInfo object, which is initialized by the
            constructor.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Archive">
            <summary>
            This property returns the current state of the Archive attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Compressed">
            <summary>
            This property returns the current state of the Compressed attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Encrypted">
            <summary>
            This property returns the current state of the Encrypted attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Hidden">
            <summary>
            This property returns the current state of the Hidden attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.NotContentIndexed">
            <summary>
            This property returns the current state of the NotContentIndexed attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Offline">
            <summary>
            This property returns the current state of the Offline attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.ReadOnly">
            <summary>
            This property returns the current state of the ReadOnly attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.System">
            <summary>
            This property returns the current state of the System attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.Temporary">
            <summary>
            This property returns the current state of the Temporary attribute.
            </summary>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasArchive">
            <summary>
            Return the initial state of the Archive flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            ArchiveReinstate method is called, and before either ArchiveClear
            or ArchiveSet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasReadOnly">
            <summary>
            Return the initial state of the ReadOnly flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            ReadOnlyReinstate method is called, and before either ReadOnlyClear
            or ReadOnlySet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasHidden">
            <summary>
            Return the initial state of the Hidden flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            HiddenReinstate method is called, and before either HiddenClear
            or HiddenSet has been called on an instance.
            </remarks>
        </member>
        <member name="P:WizardWrx.FileInfoExtension.WasSystem">
            <summary>
            Return the initial state of the System flag.
            </summary>
            <remarks>
            The value of this property is meaningless after the
            SystemReinstate method is called, and before either SystemClear
            or SystemSet has been called on an instance.
            </remarks>
        </member>
        <member name="T:WizardWrx.FileInfoExtension.enmInitialStatus">
            <summary>
            Define the three possible initial states.
            </summary>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.Unknown">
            <value >
            This is the initial state, before the flag is tested.
            </value>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.WasCleared">
            <value>
            The flag was initially in the Cleared state.
            </value>
        </member>
        <member name="F:WizardWrx.FileInfoExtension.enmInitialStatus.WasSet">
            <value>
            The flag was initially in the Set state.
            </value>
        </member>
        <member name="T:WizardWrx.DLLServices2.FileIOFlags">
            <summary>
            Use these flags to document stream I/O method calls.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_COPY_OVERWRITE_FORBIDDEN">
            <summary>
            File copy and stream I/O operations on existing files must fail.
            
            This is the default behavior, and an existing file raises an
            IOException exception.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_COPY_OVERWRITE_PERMITTED"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_COPY_OVERWRITE_PERMITTED">
            <summary>
            File copy and stream I/O operations on existing files overwrite.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_COPY_OVERWRITE_FORBIDDEN"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_READ_ENCODING_CHECK_FOR_BOM">
            <summary>
            When opening a text file for input, use the Byte Order Mark, if 
            present, to establish its encoding.
            
            The documentation in the MSDN library describes this parameter as
            follows.
            
            "The detectEncodingFromByteOrderMarks parameter detects the encoding
            by looking at the first three bytes of the stream. It automatically
            recognizes UTF-8, little-endian Unicode, and big-endian Unicode text
            if the file starts with the appropriate byte order marks. Otherwise,
            the UTF8Encoding is used."
            
            The documentation implies, without explicitly saying so, the text is
            assumed to be UTF-8 encoded unless you check for a Byte Order Mark,
            one is present, and it indicates otherwise.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_READ_ENCODING_IGNORE_BOM"/>
            <see href="https://msdn.microsoft.com/en-us/library/9y86s1a9(v=vs.110).aspx"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_READ_ENCODING_IGNORE_BOM">
            <summary>
            When opening a text file for input, ignore (expect none) the Byte
            Order Mark to establish its encoding.
            
            The documentation in the MSDN library describes this parameter as
            follows.
            
            "The detectEncodingFromByteOrderMarks parameter detects the encoding
            by looking at the first three bytes of the stream. It automatically
            recognizes UTF-8, little-endian Unicode, and big-endian Unicode text
            if the file starts with the appropriate byte order marks. Otherwise,
            the UTF8Encoding is used."
            
            The documentation implies, without explicitly saying so, the text is
            assumed to be UTF-8 encoded unless you check for a Byte Order Mark,
            one is present, and it indicates otherwise.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_READ_ENCODING_CHECK_FOR_BOM"/>
            <see href="https://msdn.microsoft.com/en-us/library/9y86s1a9(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_APPEND">
            <summary>
            Opening an output stream on a file that exists extends the file. The
            file is created if it doesn't exist.
            
            The documentation implies, without explicitly saying so, that the
            default is overwrite.
            </summary>
            <seealso href="https://msdn.microsoft.com/en-us/library/0wf7ab94(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_CREATE"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_CREATE">
            <summary>
            Opening an output stream on a file that exists overwrites the file.
            Otherwise, a new file is created.
            
            The documentation implies, without explicitly saying so, that the
            default is overwrite.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_APPEND"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/0wf7ab94(v=vs.110).aspx"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS">
            <summary>
            Open stream for asynchronous I/O.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_APPEND"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.FILE_OUT_CREATE"/>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_SYNCHRONOUS">
            <summary>
            Open stream for synchronous I/O. This is the default.
            </summary>
            <seealso cref="F:WizardWrx.DLLServices2.FileIOFlags.MAKE_STREAM_IO_ASYNCHRONOUS"/>
        </member>
        <member name="T:WizardWrx.FileNameTricks">
            <summary>
            This class exposes numerous static methods for manipulating file names.
            Unlike the objects in the System.File namespace, these methods don't 
            need a real file object. All work on strings that represent file names.
            </summary>
        </member>
        <member name="F:WizardWrx.FileNameTricks.OS_EXTENSION_DELIM">
            <summary>
            Strangely, I haven't found a property that returns the extension delimiter.
            </summary>
            <seealso cref="F:WizardWrx.FileNameTricks.OS_DRIVE_PATH_DELIMITER"/>
            <seealso cref="F:WizardWrx.FileNameTricks.UNC_SERVER_DELIM"/>
        </member>
        <member name="F:WizardWrx.FileNameTricks.OS_DRIVE_PATH_DELIMITER">
            <summary>
            Along with the OS extension delimiter, the sequence of volume
            separator, followed immediately by a directory separator, is
            undefined, though one could easily be constructed at run time,
            although such a construction wouldn't qualify as a constant.
            </summary>
            <seealso cref="F:WizardWrx.FileNameTricks.OS_EXTENSION_DELIM"/>
            <seealso cref="F:WizardWrx.FileNameTricks.UNC_SERVER_DELIM"/>
        </member>
        <member name="F:WizardWrx.FileNameTricks.UNC_SERVER_DELIM">
            <summary>
            The server delimiter string.
            </summary>
            <seealso cref="F:WizardWrx.FileNameTricks.OS_DRIVE_PATH_DELIMITER"/>
            <seealso cref="F:WizardWrx.FileNameTricks.OS_EXTENSION_DELIM"/>
        </member>
        <member name="M:WizardWrx.FileNameTricks.EnsureHasTerminalBackslash(System.String)">
            <summary>
            Ensure that a path string has NO terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed to HAVE a terminal backslash.
            </returns>
            <remarks>
            This method is deprecated. Use PathAddBackslash.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.EnsureNoTerminalBackslash(System.String)">
            <summary>
            Ensure that a path string has a terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed NOT to have a terminal backslash.
            </returns>
            <remarks>
            This method is deprecated. Use PathRemoveBackslash.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathAddBackslash(System.String)">
            <summary>
            Ensure that a path string has NO terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed to HAVE a terminal backslash.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathMakeRelative(System.String,System.String)">
            <summary>
            Given a path, such as the fully qualified name of a resource DLL, and
            a second fully qualified name, such as that of the program directory
            or current working directory, compute a relative path to the first
            named path.
            </summary>
            <param name="pstrFQPath">
            This string is the fully qualified path for which a relative path is
            required. This string may be the name of a file or a directory, but
            it must exist in the file system.
            </param>
            <param name="pstrDirectoryRelativeTo">
            This string is the fully qualified path relative to which a path to
            pstrFQPath is required. This string may be the name of a file or a
            directory, but it must exist in the file system. Whether you supply
            a file name or that of its directory, the outcome is the same, since
            this has no effect on the relative path to pstrFQPath.
            </param>
            <returns>
            The returned string is a relative path string, ready for use.
            </returns>
            <remarks>
            This method uses methods of the System.Uri class to perform its path
            math, taking advantage of the fact that a path in the file system is
            a valid URI.
            </remarks>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathRemoveBackslash(System.String)">
            <summary>
            Ensure that a path string has a terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String to evaluate and change if needed.
            </param>
            <returns>
            Path string that is guaranteed NOT to have a terminal backslash.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FileDirName(System.String,WizardWrx.FileNameTricks.TerminaBackslash)">
            <summary>
            Extract the directory name from a fully qualified file name.
            </summary>
            <param name="pstrFQFN">
            String containing file name to evaluate.
            </param>
            <param name="penmTerminaBackslash">
            A member of the TerminaBackslash, which specifies whether the
            returned string should have a terminal backslash.
            </param>
            <returns>
            If the function succeeds, the return value is the directory name
            stripped of its file name.
            </returns>
            <see cref="T:WizardWrx.FileNameTricks.TerminaBackslash"/>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FileExtn(System.String)">
            <summary>
            Given a string that contains a partially or fully qualified file
            name, return the extension, without the delimiting dot.
            </summary>
            <param name="pstrFQFN">
            File name string to evaluate.
            </param>
            <returns>
            Extension, less the delimiting dot.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.FQFBasename(System.String)">
            <summary>
            Extract the fully qualified base name, that is, all but the
            extension, from a partially or fully qualified file name.
            </summary>
            <param name="pstrFQFN">
            Fully or partially qualified file name to evaluate.
            </param>
            <returns>
            All of pstrFQFN except its extension and extension delimiter.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.MakeFQFN(System.String,System.String)">
            <summary>
            Given a file name and a default directory, which may be a null
            reference or an empty string, return a file name that is guaranteed
            to be fully qualified.
            </summary>
            <param name="pstrUQFN">
            String which is assumed to be a relative file name.
            </param>
            <param name="pstrDefaultDir">
            String to use as a default path, unless argument pstrUQFN is a fully
            qualified file name.
            
            If this value is null, or an empty string, the current working
            directory is used.
            </param>
            <returns>
            String that contains a string that is guaranteed to represent a
            fully qualified file name.
            </returns>
        </member>
        <member name="M:WizardWrx.FileNameTricks.PathFixup(System.String,WizardWrx.FileNameTricks.TerminaBackslash)">
            <summary>
            Originally a private method, this method returns a path (directory)
            name string that is guaranteed to meet the specified requirement,
            with respect to presence or absence of a terminal backslash.
            </summary>
            <param name="pstrInputPath">
            String containing path (directory) name to evaluate.
            </param>
            <param name="penmBackslash">
            A member of the TerminaBackslash, which specifies whether the
            returned string should have a terminal backslash.
            </param>
            <returns>
            Path (directory) name string that is guaranteed to either have, or
            omit, a terminal backslash, as specified.
            </returns>
            <see cref="T:WizardWrx.FileNameTricks.TerminaBackslash"/>
        </member>
        <member name="M:WizardWrx.FileNameTricks.UQFBasename(System.String)">
            <summary>
            Given a string that represents the name of a file, extract only the
            base name (EXCLUDING the extension).
            </summary>
            <param name="pstrFQFN">
            String to evaluate.
            </param>
            <returns>
            Base name extracted from string. This means the unqualified file
            name, less its directory and its extension.
            </returns>
        </member>
        <member name="T:WizardWrx.FileNameTricks.TerminaBackslash">
            <summary>
            Use a member of this enumeration with FileDirName and PathFixup, to
            specify whether you want a path string with or without a trailing
            backslash.
            </summary>
            <see cref="M:WizardWrx.FileNameTricks.FileDirName(System.String,WizardWrx.FileNameTricks.TerminaBackslash)"/>
            <see cref="M:WizardWrx.FileNameTricks.PathFixup(System.String,WizardWrx.FileNameTricks.TerminaBackslash)"/>
        </member>
        <member name="F:WizardWrx.FileNameTricks.TerminaBackslash.Include">
            <summary>
            Include the trailing backslash, for example, if you intend to
            append another string containing a relative path name or an
            unqualified file name.
            </summary>
        </member>
        <member name="F:WizardWrx.FileNameTricks.TerminaBackslash.Omit">
            <summary>
            Exclude the trailing backslash, for example, if you intend to
            display the name in an unambiguous context.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.IniFileReader">
            <summary>
            Provide a managed interface to GetPrivateProfileString in the Windows
            API, with methods to retrieve the values of individual keys and lists of
            the keys in a section or the sections in a file.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IniFileReader.path">
            <summary>
            This string holds the fully qualified name of the private profile
            file to process, which is passed into the constructor, but can be
            changed as needed.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.IniFileReader.#ctor(System.String)">
            <summary>
            Construct an instance of the class.
            </summary>
            <param name="INIPath">
            This string must be the fully qualified name of a well formed
            private profile (INI) file.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.IniFileReader.GetSectionNames">
            <summary>
            The Function called to obtain the SectionHeaders, and returns them
            in an Dynamic Array
            </summary>
            <returns>
            The return value is an array of strings, each of which is the name
            of a section.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.IniFileReader.GetEntryNames(System.String)">
            <summary>
            The Function called to obtain the EntryKeys from the given
            SectionHeader string passed, and returns them in an Dynamic Array
            </summary>
            <param name="section">
            This string must be the name of a section which is expected to be
            present, though possibly empty.
            </param>
            <returns>
            The return value is an array of strings, each of which is the name
            of a key (entry) in the specified section.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.IniFileReader.GetEntryValue(System.String,System.String)">
            <summary>
            The Function called to obtain the EntryKey Value from the given
            SectionHeader and EntryKey string passed, then returned
            </summary>
            <param name="section">
            This string must be the name of a section that is expected to exist.
            </param>
            <param name="entry">
            This string must be the name of a key (entry) that is expected to
            exist, though it might be empty.
            </param>
            <returns>
            The return value is a string, which may be empty.
            </returns>
        </member>
        <member name="T:WizardWrx.DLLServices2.IP6CUtilLib1">
            <summary>
            This class exposes static methods imported from its namesake library of
            unmanaged native routines for getting information not otherwise easily
            retrievable by managed code.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.SUBSYSTEM_UNKNOWN">
            <summary>
            GetProcessSubsystem and GetExeSubsystem return this when they fail.
            </summary>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.s_astrPESubsystemTypeStrings">
            <summary>
            XlateProcessSubsystem uses this array of strings to map the ID
            returned by GetExeSubsystem or GetExeSubsystemID to a descriptive
            string suitable for display on a report.
            </summary>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetProcessSubsystem">
            <summary>
            Return the subsystem ID of the executing Portable Executable.
            </summary>
            <returns>
            The subsystem ID is returned as an unsigned integer.
            
            COMPATIBLITY NOTE: If you are running the Visual Studio debugger and
            the Visual Studio Hosting Process (which is TRUE by default), this
            routine always returns 2 (Windows GUI Subsyste) because the hosting
            process, which is a Windows GUI program, is the first program loaded
            into the process. In most cases, you can get away without the Visual
            Studio hosting process.
            
            For additional information, please see "Debugging and the Hosting
            Process (Visual Studio 2010)," in the MSDN library, at
            http://msdn.microsoft.com/en-us/library/ms242202(v=vs.100).aspx.
            </returns>
            <remarks>
            The return value maps to a member of the PESubsystemID enumeration,
            which is used internally by XlateProcessSubsystem.
            
            Although this routine imports native code, since the code cleans up
            after itself before it returns control to its caller, there are no
            unmanaged resources to clean up.
            </remarks>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(System.UInt32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)">
            <summary>
            Return the subsystem ID of the specified Portable Executable.
            </summary>
            <param name="plpExeName">
            Specify the name of the Portable Executable to be tested. The file
            name must be specified in such a way that the Win32 CreateFile
            routine can open a read only handle on it.
            </param>
            <returns>
            The subsystem ID is returned as an unsigned integer.
            </returns>
            <remarks>
            The return value maps to a member of the PESubsystemID enumeration,
            which is used internally by XlateProcessSubsystem.
            
            Since this routine operates on the Portable Executable file named by
            its caller, it is immune to the compatibility issues that affect
            GetProcessSubsystem.
            
            If you infer from the reference to CreateFile in the requirements 
            for argument plpMMainModuleFQFN that this routine imports native
            code, you are correct. Rather than develop a managed implementation,
            I imported a working native Win32 routine, GetExeSubsystemW_WW,
            from a DLL that contains dozens of routines that I have refined over
            the last nine years or so.
            
            Although this routine imports native code, since the code cleans up
            after itself before it returns control to its caller, there are no
            unmanaged resources to clean up.
            </remarks>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(System.UInt32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetStdHandleFNCLI(System.UInt32)">
            <summary>
            Given the ID of a redirected standard console file handle, return
            the name of the file to which it is redirected.
            </summary>
            <param name="puintStdHandleID">
            A member of the ShsStandardHandle enumeration, cast to an unsigned integer
            </param>
            <returns>
            Absolute (fully qualified) name of file to which the specified handle is
            redirected.
            </returns>
            <remarks>
            This method wraps a StringBuilder around the private
            SafeNativeMethods.SHS_GetStdHandleFNCLI method.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)">
            <summary>
            Return the subsystem ID of the specified Portable Executable cast to
            a member of the PESubsystemID enumeration, thus clearly documenting
            its correct interpretation.
            </summary>
            Specify the name of the Portable Executable to be tested. The file
            name must be specified in such a way that the Win32 CreateFile
            routine can open a read only handle on it.
            <returns>
            The subsystem ID is returned as a member of the PESubsystemID
            enumeration, thus documenting its correct interpretation.
            </returns>
            <remarks>
            This method calls sibling method GetExeSubsystem. At the cost of a
            very short extra stack frame, this approach clearly documents the
            data flow.
            </remarks>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(System.UInt32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(System.UInt32)">
            <summary>
            Translate a subsystem ID, such as the value returned by 
            GetProcessSubsystem, into a descriptive sentence.
            </summary>
            <param name="puintSubsystemID">
            Pass in the raw ID returned by GetProcessSubsystem To have it
            translated into English.
            </param>
            <returns>
            The return value is a string, suitable for display in a message.
            </returns>
            <remarks>
            The strings are read from resource strings that are stored in the
            DLL that exports this routine.
            
            Unlike the other two routines defined by this class, this routine is
            100% managed C# code.
            
            The first version of this method was implemented as a switch block.
            This improved version uses a lookup table, which should be faster.
            </remarks>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID)">
            <summary>
            Translate a subsystem ID, such as the value returned by 
            GetProcessSubsystem, into a descriptive sentence.
            </summary>
            <param name="penmPESubsystemID">
            Pass in the PESubsystemID returned by GetExeSubsystemID To have it
            translated into English.
            </param>
            <returns>
            The return value is a string, suitable for display in a message.
            </returns>
            <remarks>
            The strings are read from resource strings that are stored in the
            DLL that exports this routine.
            
            Unlike the other two routines defined by this class, this routine is
            100% managed C# code.
            
            Internally, this routine casts its input to unsigned integer, then
            hands off to the original overload, which validates the argument and
            returns the string.
            </remarks>
            <seealso cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID">
            <summary>
            Map the unsigned integer returned by GetExeSubsystem onto an
            enumerated type that conveys its correct interpretation.
            </summary>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystem(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.GetExeSubsystemID(System.String)"/>
            <see cref="M:WizardWrx.DLLServices2.IP6CUtilLib1.XlateProcessSubsystem(WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID)"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
            Unknown subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_NATIVE">
            <summary>
            Image doesn't require a subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
            Image runs in the Windows GUI subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
            Image runs in the Windows character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_OS2_CUI">
            <summary>
            Image runs in the OS/2 character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
            Image runs in the Posix character subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_NATIVE_WINDOWS">
            <summary>
            Image is a native Win9x driver.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
            Image runs in the Windows CE subsystem.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>
            Image is an EFI Application.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>
            Image is a EFI Boot Service Driver.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>
            Image is a EFI Runtime Driver.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>
            Image runs from a EFI ROM.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.IP6CUtilLib1.PESubsystemID.IMAGE_SUBSYSTEM_XBOX">
            <summary>
            Image runs on XBOX.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.SafeNativeMethods">
            <summary>
            This class exposes my two P/Invoke methods in a way that enables the CLR
            to treat them as safe for use in any application, including partial
            trust applications.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.ListInfo">
            <summary>
            This static class exposes handy constants for working with buffers,
            lists, and substrings.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.BEGINNING_OF_BUFFER">
            <summary>
            Use this to signify the beginning of a binary I/O buffer.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_FIRST_ELEMENT,
            which is logical, since a buffer is an array.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.BINARY_SEARCH_NOT_FOUND">
            <summary>
            Since the BinarySearch method on a List returns the array subscript
            where the value was found, a return value of less than zero
            (BINARY_SEARCH_NOT_FOUND) means that no matching item exists in the
            list.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_INVALID_INDEX.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.EMPTY_STRING_LENGTH">
            <summary>
            The Length property of a string returns a value of zero
            (EMPTY_STRING_LENGTH) when the string is empty.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.INDEXOF_NOT_FOUND">
            <summary>
            This constant defines the value returned by the IndexOf method on a
            string to indicate that the search character or substring is not
            found.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_INVALID_INDEX.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.LIST_IS_EMPTY">
            <summary>
            The Count property of a list returns a value of zero (LIST_IS_EMPTY)
            when the list is empty.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.SUBSTR_BEGINNING">
            <summary>
            Since a string is an array of Unicode characters, it makes sense to
            treat substrings as arrays.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_FIRST_ELEMENT,
            which is logical, since a substring is an array of Unicode
            characters.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.ListInfo.SUBSTR_SECOND_CHAR">
            <summary>
            Since a string is an array of Unicode characters, it makes sense to
            treat substrings as arrays.
            
            Coincidentally, this happens to be ArrayInfo.ARRAY_SECOND_ELEMENT,
            which is logical, since a substring is an array of Unicode
            characters.
            </summary>
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
        </member>
        <member name="M:WizardWrx.DLLServices2.ListInfo.FirstCharOfString(System.String)">
            <summary>
            Return the first character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the first character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            first character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ListInfo.LastCharacterOfString(System.String)">
            <summary>
            Return the last character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the last character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            last character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ListInfo.NthCharacterOfString(System.String,System.Int32)">
            <summary>
            Returns the character at the Nth position in a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the last character.
            </param>
            <param name="pintOrdinalPosition">
            Specify the ordinal position of the desired character. Unlike array
            subscripts, which start at zero, ordinals start at one.
            </param>
            <returns>
            Unless the input string is empty (or null), or pintOrdinalPosition
            is less than 1 or greater than the length of the string, the return
            value is the character at the specified (Nth) position.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ListInfo.PenultimateCharactrOfString(System.String)">
            <summary>
            Return the next to last, or penultimate, character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the penultimate character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            penultimate character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.ListInfo.SecondCharacterOfString(System.String)">
            <summary>
            Return the second character of a string.
            </summary>
            <param name="pstrIn">
            Specify the string from which to return the second character.
            </param>
            <returns>
            Unless the input string is empty (or null), the return value is its
            second character.
            
            If the function cannot return the requested character, the return
            value is SpecialCharacters.NUL, the null character.
            </returns>
        </member>
        <member name="T:WizardWrx.DLLServices2.Logic">
            <summary>
            This sealed class exposes methods that encapsulate many common, tricky
            loop state tests.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its first
            iteration.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintInitialValue">
            Specify the integer initial value.
            </param>
            <returns>
            This function returns TRUE if the index of a FOR loop is at its
            initial value, indicating the first iteration of the loop.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its last
            iteration, given that the limit criterion is pintLoopIndex is
            greater than pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the next increment of the loop index
            would set one less than pintLimit, stopping the loop without another
            iteration.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its last
            iteration, given that the limit criterion is pintLoopIndex is
            greater than or equal to pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the next increment of the loop index
            would set equal to pintLimit, stopping the loop without another
            iteration.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its last
            iteration, given that the limit criterion is pintLoopIndex is
            greater than pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the next increment of the loop index
            would set one less than pintLimit, stopping the loop without another
            iteration.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its last
            iteration, given that the limit criterion is pintLoopIndex is less
            than or equal to pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the next increment of the loop index
            would set it equal to pintLimit, stopping the loop without another
            iteration.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on its last
            iteration, given that the limit criterion is pintLoopIndex is less
            than pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the next increment of the loop index
            would set it equal to pintLimit, stopping the loop without another
            iteration.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex is on a
            subsequent iteration.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintInitialValue">
            Specify the integer initial value.
            </param>
            <returns>
            This function returns TRUE if the index of a FOR loop has passed its
            initial value, indicating that it is on a subsequent iteration of
            the loop.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex has one or more
            iteration to go, given that the limit criterion is pintLoopIndex is
            equal to pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the index and limit indicate that one
            or more iterations remain.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex has one or more
            iteration to go, given that the limit criterion is pintLoopIndex is
            greater than or equal to pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the index and limit indicate that one
            or more iterations remain.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex has one or more
            iteration to go, given that the limit criterion is pintLoopIndex is
            greater than pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the index and limit indicate that one
            or more iterations remain.
            </returns>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex has one or more
            iteration to go, given that the limit criterion is pintLoopIndex is less
            than or equal to pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the index and limit indicate that one
            or more iterations remain.
            </returns>
            <remarks>
            Sometimes, it is more sensible to test whether there are iterations
            remaining.
            </remarks>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLT(System.Int32,System.Int32)">
            <summary>
            Return TRUE if the FOR loop driven by pintLoopIndex has one or more
            iteration to go, given that the limit criterion is pintLoopIndex is less
            than pintLimit.
            </summary>
            <param name="pintLoopIndex">
            Specify the integer loop index.
            </param>
            <param name="pintLimit">
            Specify the integer limit value.
            </param>
            <returns>
            This function returns TRUE if the index and limit indicate that one
            or more iterations remain.
            </returns>
            <remarks>
            Sometimes, it is more sensible to test whether there are iterations
            remaining.
            </remarks>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsFirstForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsLastForIterationLT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.IsNextForIteration(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeEQ(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGE(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeGT(System.Int32,System.Int32)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Logic.MoreForIterationsToComeLE(System.Int32,System.Int32)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Logic.Unless(System.Boolean)">
            <summary>
            Return the inverse of the truth value of an expression.
            </summary>
            <param name="pfUnlessWhat">
            Specify the expression to invert.
            </param>
            <returns>
            Return TRUE if pfUnlessWhat is FALSE, and vice vers.
            </returns>
            <remarks>
            I shamelessly borrowed this idiom from Perl, with full credit to
            Larry Wall, and implemented it as a macro for the C and C++ source
            code preprocessors about a decade ago. I don't know why it's taken
            me this long to realize that it is equally easy to implement in C#,
            and the implementation is sufficiently small that the code optimizer
            will almost certainly inline it, so that its performance impact is
            equivalent to the C/C++ macro.
            
            The C# implementation is not quite as neat as the C/C++ macro.
            </remarks>
        </member>
        <member name="T:WizardWrx.MagicBooleans">
            <summary>
            This class defines frequently used Boolean values whose correct values
            are easier to remember with the help of a mnemonic.
            
            This class is one of a constellation of static classes that define a
            wide variety of symbolic constants that I use to make my code easier to
            understand when I need a refresher or am about to change it.
            </summary>
            <remarks>
            The constants defined herein are pairs. The first part of the name of
            each pair associates it with the method or constructor with which it is
            intended to be used. The remainder of the name identifies the behavior
            elicited from the object or method by specifying this value.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.DLLServices2.ListInfo"/>
            <seealso cref="T:WizardWrx.DLLServices2.FileIOFlags"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_INSENSITIVE">
            <summary>
            Use this constant as the third (ignoreCase) argument of the static
            Enum.Parse method to cause the evaluation to be case INsensitive.
            </summary>
            <see href="!:https://msdn.microsoft.com/en-us/library/vstudio/kxydatf9(v=vs.80).aspx"/>
            <seealso cref="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_SENSITIVE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_SENSITIVE">
            <summary>
            Use this constant as the third (ignoreCase) argument of the static
            Enum.Parse method to cause the evaluation to be case sensitive. This
            is the default behavior of Enum.Parse exhibited by the two-argument
            overload of this method.
            </summary>
            <see href="!:https://msdn.microsoft.com/en-us/library/vstudio/essfb559(v=vs.80).aspx"/>
            <seealso cref="F:WizardWrx.MagicBooleans.ENUM_PARSE_CASE_INSENSITIVE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_FORBIDDEN">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to explicitly forbid file overwriting. See Remarks.
            </summary>
            <remarks>
            If you NEVER want overwriting, use the default (two-argument)
            form of the Copy method.
            </remarks>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_PERMITTED"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_PERMITTED">
            <summary>
            Use with the third argument of the static Copy method of the File 
            class to enable file overwriting, which is forbidden by default.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_COPY_OVERWRITE_FORBIDDEN"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_OUT_APPEND">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to append to a file
            if one exists.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_OUT_CREATE"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.FILE_OUT_CREATE">
            <summary>
            Use this symbolic constant to set the append argument to an
            overloaded StreamWriter constructor, to cause it to overwrite a file
            if one exists.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.FILE_OUT_APPEND"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_ASYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to TRUE, allowing I/O to be asynchronous.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_SYNCHRONOUS"/>
        </member>
        <member name="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_SYNCHRONOUS">
            <summary>
            Use this symbolic constant to set the useAsync argument to a
            FileStream constructor to FALSE, allowing I/O to be synchronous,
            which is the default.
            </summary>
            <seealso cref="F:WizardWrx.MagicBooleans.MAKE_STREAM_IO_ASYNCHRONOUS"/>
        </member>
        <member name="T:WizardWrx.MagicNumbers">
            <summary>
            This class defines constants for commonly used magic numbers. Others are
            defined in companion class ArrayInfo, while SpecialCharacters defines
            character representations of the visually ambiguous numbers and letters,
            for use in place of literals.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.DLLServices2.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicBooleans"/>
            <seealso cref="T:WizardWrx.PathPositions"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.APPLICATION_ERROR_MASK">
            <summary>
            This constant defines the standard APPLICATION_ERROR_MASK bit, which
            distinguishes application errors from system errors in the status
            codes returned by Marshal.GetLastWin32Error.
            </summary>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_01KB">
            <summary>
            Constant for sizing a 1 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_02KB">
            <summary>
            Constant for sizing a 2 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_04KB">
            <summary>
            Constant for sizing a 4 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_08KB">
            <summary>
            Constant for sizing a 8 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_16KB">
            <summary>
            Constant for sizing a 16 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_32KB">
            <summary>
            Constant for sizing a 32 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_64KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_64KB">
            <summary>
            Constant for sizing a 64 KB StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.CAPACITY_MAX_PATH">
            <summary>
            Constant for sizing a MAX_PATH StringBuilder, array, or buffer.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_01KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_02KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_04KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_08KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_16KB"/>
            <seealso cref="F:WizardWrx.MagicNumbers.CAPACITY_32KB"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.EMPTY_STRING_LENGTH">
            <summary>
            Use this constant to document when zero stands for the length of the
            empty string, or is the lower limit of a string length argument.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.SpecialStrings.EMPTY_STRING"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ERROR_SUCCESS">
            <summary>
            Use this with environment.exit() and other situations when you want
            to report the default "success" exit code of zero.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_RUNTIME"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.LoadErrorMessageTable(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ERROR_RUNTIME">
            <summary>
            This exit code is reserved for reporting runtime exceptions.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_SUCCESS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.LoadErrorMessageTable(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <seealso cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.MINUS_ONE">
            <summary>
            Use this constant to disambiguate a negative 1 from a positive 1
            immediately following a minus sign that is intended to be an
            operator.
            </summary>
            <remarks>
            This constant is especially useful in an expression that follows any
            algebraic operator with an operand value of -1.
            </remarks>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_ONE">
            <summary>
            Use this constant to disambiguate a numeric value of 1 from a
            literal upper case I or lower case L, either of which is a legal
            variable name, and all of which are almost impossible to reiaably
            distinguish visually in source code.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_TWO">
            <summary>
            Number 2, to clearly distinguish it from a letter Z and a numeral 7,
            which can look a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.PLUS_SEVEN">
            <summary>
            Number 7, to clearly distinguish it from a letter Z and a numeral 2,
            which can look a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            												
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.STRING_INDEXOF_NOT_FOUND">
            <summary>
            Value returned by the IndexOf methods, e. g., of the String class,
            if the object sought is not found.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.STRING_SUBSTR_BEGINNING">
            <summary>
            Use with the Substring method of the String class to denote the
            first character in a string.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.ZERO"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.UNC_PREFIX_START_POS">
            <summary>
            A UNC prefix starts here.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.UNC_PREFIX_START_LEN">
            <summary>
            A UNC prefix is this long.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
        </member>
        <member name="F:WizardWrx.MagicNumbers.ZERO">
            <summary>
            Constant equivalent to integer value of zero, to disambiguate zero
            literal values in code.
            
            Compare to character constants CHAR_LC_O and CHAR_UC_O.
            </summary>
            <seealso cref="F:WizardWrx.MagicNumbers.MINUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_ONE"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_TWO"/>
            <seealso cref="F:WizardWrx.MagicNumbers.PLUS_SEVEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.MessageInColor">
             <summary>
             Console.Write and Console.WriteLine metods that write in living color.
             </summary>
             <remarks>
             There are two identical sets of methods.
            
             1) Static methods write text in your choice of foreground and background
             colors, then revert the console colors to their initial values (that is,
             the values they had when the program loaded).
            
             2) Instance methods go a step further, by maintaining a record of the
             current colors, so that the colors can progress through a range, without
             reverting to the initial colors.
            
             For each overload of Console.Write, there are corresponding static and
             instance methods. The only difference in their signatures is that these
             methods specify a foreground color and a background color, followed by
             the same arguments that would apply to the corresponding overload of the
             Console.Write method.
             </remarks>
             <seealso cref="T:WizardWrx.DLLServices2.ErrorMessagesInColor"/>
             <seealso cref="T:WizardWrx.DLLServices2.PropertyDefaults"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.#ctor">
            <summary>
            Constructing an instance saves the current foreground and background
            colors into two pairs of read only ConsoleColor properties. Methods
            facilitate changing one or both colors, while retaining the original
            colors in the other two ConsoleColor properties, which are never
            changed after the class instance comes into being.
            </summary>
            <remarks>
            This method is provided to facilitate construction of a List or
            other sortable collection of MessageInColor objects, and allows for
            a future version of this class to be exposed to COM.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.#ctor(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            This constructor creates an instance with its foreground and
            background colors properties set to the specified ConsoleColor
            values, which ppresumably differ from the initial foreground and
            background colors.
            </summary>
            <param name="pclrTextForeColor">
            Specify the ConsoleColor property to use as the text (foreground)
            color in generated messages.
            </param>
            <param name="pclrTextBackColor">
            Specify the ConsoleColor property to use as the background color in
            generated messages.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substition token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substition tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substition tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substition tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substition token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substition tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substition tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substition tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substition token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substition tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substition tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWriteLine(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substition tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Boolean)">
            <summary>
            Write the string representation of a bool (Boolean) variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Boolean value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char)">
            <summary>
            Write the string representation of a char (a Unicode character).
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the Unicode character to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char[])">
            <summary>
            Write the string representation of a character array.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Specify the array of Unicode characters to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Decimal)">
            <summary>
            Write the string representation of a decimal variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the decimal value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Double)">
            <summary>
            Write the string representation of a double precision variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the double precision value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Single)">
            <summary>
            Write the string representation of a floating point variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the floating point value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Int32)">
            <summary>
            Write the string representation of an integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Int64)">
            <summary>
            Write the string representation of a long integer variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the long integer value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            Write the string representation of a generic Object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the object value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Write a string variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the string value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.UInt32)">
            <summary>
            Write the string representation of a uint (unsigned integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the uint (unsigned integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.UInt64)">
            <summary>
            Write the string representation of a ulong (unsigned long integer)
            variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="value">
            Specify the ulong (unsigned long integer) value to display.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object)">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may include at most
            one substitution token.
            </param>
            <param name="arg0">
            Replace the substition token with the string representation of this
            generic object.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Write a formatted message that includes the string representation of
            an generic object variable.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contains
            substitution tokens for each object in an array of generic Object
            variables.
            </param>
            <param name="arg">
            Substitute elements from this array of generic Object variables into
            the format string, replacing tokens with the element whose subscript
            is the number within its brackets.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.Char[],System.Int32,System.Int32)">
            <summary>
            Write a formatted message that includes a range of characters taken
            from an array of Unicode characters.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="buffer">
            Extract characters from this array of Unicode characters.
            </param>
            <param name="index">
            Subscript of character to substitute for token {0} in format.
            </param>
            <param name="count">
            Number of characters from buffer to substitute into string, which
            must contain at least count - 1 substitution tokens.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to two substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to two
            substition tokens, {0} and {1}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to three substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 3
            substition tokens, {0}, {1}, and {2}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RGBWrite(System.ConsoleColor,System.ConsoleColor,System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Write a formatted message that includes up to four substitution
            tokens.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use for the foreground (text).
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use for the background.
            </param>
            <param name="format">
            Use this string as the message template, which may contain up to 4
            substition tokens, {0}, {1}, {2}, and {3}.
            </param>
            <param name="arg0">
            The default string representation of this generic Object variable is
            substituted into format for token {0}.
            </param>
            <param name="arg1">
            The default string representation of this generic Object variable is
            substituted into format for token {1}.
            </param>
            <param name="arg2">
            The default string representation of this generic Object variable is
            substituted into format for token {2}.
            </param>
            <param name="arg3">
            The default string representation of this generic Object variable is
            substituted into format for token {3}.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RestoreOrigColors">
            <summary>
            Use this method to simultaneously restore the background and
            foreground colors to the values that they had when the MessageInColor
            instance was constructed.
            </summary>
            <remarks>
            The current background and foreground colors can be obtained at any
            time by querying the corresponding read/write Console property
            (BackgroundColor property and ForegroundColor, respectively).
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.SaveOrigColors">
            <summary>
            The constructors use this method to save the console colors as they
            were when the constructor ran.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.SaveTextColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            The constructors use this method to initialize the properties that
            keep the selected foreground and background colors for use by the
            instance Write and WriteLine methods.
            </summary>
            <param name="pclrForeColor">
            Specify the ConsoleColor to use as the text (foreground) color.
            </param>
            <param name="pclrBackColor">
            Specify the ConsoleColor to use as the background color behind the
            text.
            </param>
            <remarks>
            The constructors pass in the same colors that were saved by the
            SaveOrigColors method for any unused color.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.SetMessageColors">
            <summary>
            This instance method saves the current Console.BackgroundColor and
            Console.ForegroundColor properties, so that they can be subsequently
            restored, then sets them to the message colors to the values stored
            in the MessageBackgroundColor and MessageForegroundColor properties.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.RestoreMessageColors">
            <summary>
            This instance method uses the ConsoleColor values saved by the
            SetMessageColors method to restore the colors to the values that
            were in use when the instance Write or WriteLine method was called.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColor.SetMessageColors(System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Change the foreground and background colors, but make no effort to
            retain their old or new values. See Remarks.
            </summary>
            <param name="pclrNewForeColor">
            Specify a member of the ConsoleColor enumeration that will become
            the new foreground color, which remains in effect until changed by a
            subsequent call to SetMessageColors.
            </param>
            <param name="pclrNewBackColor">
            Specify a member of the ConsoleColor enumeration that will become
            the new background color, which remains in effect until changed by a
            subsequent call to SetMessageColors.
            </param>
            <remarks>
            The current background and foreground colors can be obtained at any
            time by querying the corresponding read/write Console property
            (BackgroundColor property and ForegroundColor, respectively).
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.MessageInColor.OriginalBackgroundColor">
            <summary>
            Gets the Console.BackgroundColor that was in force when the instance
            was constructed.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.MessageInColor.OriginalForegroundColor">
            <summary>
            Gets the Console.ForegroundColor that was in force when the instance
            was constructed.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.MessageInColor.MessageBackgroundColor">
            <summary>
            Gets or sets the Console.BackgroundColor to use for messages
            generated by the instance Write and WriteLine methods.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.MessageInColor.MessageForegroundColor">
            <summary>
            Gets or sets the Console.ForegroundColor to use for messages
            generated by the instance Write and WriteLine methods.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.MessageInColorConverter">
            <summary>
            Although its scope is public, the only practical use for this class is
            to facilitate storage of default or user specified MessageInColor values
            in application settings files.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Return True if inputs of the specified type can be converted.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="ptypSourceType">
            This argument specifies the System.Type to be evaluated.
            </param>
            <returns>
            This method returns TRUE if ptypSourceType is typeof ( string ). Any
            other type returns FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert from string (the only supported source type) to
            MessageInColor.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="pCulture">
            This argument supplies a reference to the current CultureInfo object
            that drives many aspects of text and numeric conversions.
            </param>
            <param name="pobjValue">
            Specify the source object to be converted. Although the method
            signature requires this argument to be cast to Object, the only type
            supported is System.string.
            </param>
            <returns>
            Although specified as object to meet the requirements of the base
            class, the actual return value is expected to be a MessageInColors
            object.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.MessageInColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Given a MessageInColors object, return a string representation that
            is suitable for storage in a standard application settings file.
            </summary>
            <param name="pIContext">
            This argument provides internal details about the type. Treat it as
            a black box.
            </param>
            <param name="pCulture">
            This argument supplies a reference to the current CultureInfo object
            that drives many aspects of text and numeric conversions.
            </param>
            <param name="pobjValue">
            Although the method signature calls for an generic System.Object,
            this argument must actually be a MessageInColors object.
            </param>
            <param name="pDestType">
            The only valid value for this argument is typeof ( string ). The
            specification type is dictated by the signature of the ConvertTo
            method in the base class.
            </param>
            <returns>
            Although specified as object to meet the requirements of the base
            class, the actual return value is expected to be a System.string.
            </returns>
        </member>
        <member name="T:WizardWrx.NumericFormats">
            <summary>
            This class defines standard numeric format strings, for use with the
            string.format method and its derivatives and relatives.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.CURRENCY">
            <summary>
            Currency, which obeys the Regional Settings for currency, including
            the currency symbol and number of decimal places to show.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of decimal
            (fraction) digits.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#CFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL">
            <summary>
            Decimal, which the documentation says is supported only for integral
            types. They mean business; if you try to use this type with a
            decimal or floating point number, you get an exception.
            
            If the number requires fewer than the specified minimum number of
            digits, it is padded on the left with zeros, and there are no
            thousands separators.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of digits to the
            left of the implied decimal point.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED">
            <summary>
            This is the minimal fixed point format string. Modifiers can be appended to it to specify significant digits after the decimal point.
            
            The negative sign comes from the regional settings, and leads the
            string, and the precision applies to the number of decimal
            (fraction) digits.
            
            To specify the number of places to print after the decimal point,
            use the static FixedPointDecimal ( int pintFractionDigits ) method,
            which supports any number between zero and ninety-nine, the limits
            imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_2">
            <summary>
            This gives fixed point, with 2 places to the right of the decimal
            point, and without thousands separators.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.FIXED_3">
            <summary>
            This gives fixed point, with 3 places to the right of the decimal
            point, and without thousands separators.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <seealso cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.GENERAL_LC">
            <summary>
            This is the default, and it's pretty minimal. The documentation
            states that the number is converted to the most compact format.
            
            When the size of the number and the specified precision dictate use
            of scientific notation, the exponential symbol is lower case; this
            is the only difference between this format and GENERAL_UC.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To specify the number of places to print after the decimal point,
            use the static GeneralXPrecision ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="F:WizardWrx.NumericFormats.GENERAL_UC"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.GENERAL_UC">
            <summary>
            This is the default, and it's pretty minimal, as it must be, since
            its status as the default means that it is the only format that
            supports all data types (numbers, dates, times, time spans, and all
            the rest. It is also among the few that render output left aligned.
            
            The documentation states that the number is converted to the most
            compact format.
            
            When the size of the number and the specified precision dictate use
            of scientific notation, the exponential symbol is UPPER case; this
            is the only difference between this format and GENERAL_LC.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To specify the number of places to print after the decimal point,
            use the static GeneralXPrecision ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="F:WizardWrx.NumericFormats.GENERAL_LC"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_LC">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing the fewest hexadecimal glyphs
            required to represent the number. The difference between this token
            and HEXADECIMAL_LC is that this token causes the returned string to
            contain UPPER case glyphs, while HEXADECIMAL_LC yields lower case
            glyphs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#XFormatString"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_UC">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing the fewest hexadecimal glyphs
            required to represent the number. The difference between this token
            and HEXADECIMAL_LC is that this token causes the returned string to
            contain UPPER case glyphs, while HEXADECIMAL_LC yields lower case
            glyphs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#XFormatString"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_2">
            <summary>
            Use this string as your argument to the ToString method of any
            integral data type to format it in hexadecimal notation, which 
            the documentation says is supported only for integral types.
            They mean business; if you try to use this type with a decimal or
            floating point number, you get an FormatException exception.
            
            This format yields a result containing a minimum of two hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_4">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of four hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_8"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_8">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of 8 hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexadecimal numerals required
            to represent the integer.
            
            Use this format to represent result codes returned by Windows DLLs
            and other such functions that return things such as HRESULTs.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_4"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any
            of the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to ToString with any
            of the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the HexadecimalInteger ( int pintTotalDigits ) method
            into the ToString method, which uses the returned format string,
            which is built using this string as its starting point, as if you
            had hard coded it.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_SUFFIX_H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            suffix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can substitute the output of static method IntegerToHexStr
            ( [T] , int pintTotalDigits , HexFormatDecoration penmDecoration ),
            which appends this string, to the ToString method on any integral
            type.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HEXADECIMAL_SUFFIX_H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            suffix for the string returned from a call to ToString with any of
            the HEXADECIMAL format strings.
            
            To easily specify the desired minimum number of hexadecimal glyphs,
            you can feed the output of HexadecimalInteger ( int pintTotalDigits ,
            HexFormatDecoration penmHexFormatDecoration ) method, which appends
            this string, to the ToString method on any integral type.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS">
            <summary>
            Format a number (any numeric type), using the Regional Settings
            (Locale) defaults for thousands separator, decimal symbol, number of
            decimal (fraction) places, and number of digits to display between
            each thousands separator.
            
            Use this string as your argument to the ToString method of any
            numeric data type to format it in decimal notation, with zero or
            more places after the decimal point.
            
            When the specified number of places after the decimal point is zero,
            the decimal point is omitted.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays ZERO digits to the
            right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays two digits to the
            right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Feed this string to the ToString method of any numeric value to
            format it according to the Regional Settings (Locale) defaults for
            thousands separator, decimal symbol, and number of digits to display
            between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays three digits to
            the right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static NumberPerRegSettings ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT">
            <summary>
            Display a fixed point number as a percentage, using the default
            number of decimal places, per the Regional Settings (Locale). The
            number is multiplied by 100 before the formatting is applied. Hence,
            0.25 renders as 25%.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2">
            <summary>
            Display a fixed point number as a percentage, showing two digits to
            the right of the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.ROUND_TRIP">
            <summary>
            Since the formatting engine ignores if for this type, there is no
            corresponding format string generator, and only one token, since
            there is no documented difference between the upper and lower case
            token. Before you use this token, read the documentation cited below
            carefully.
            </summary>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#RFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_LC">
            <summary>
            Scientific notation, with a lower case "e" for the exponent. Exactly one digit always precedes the decimal point.
            
            To specify the number of places to print after the decimal point,
            use the static PercentToDecimalPlaces ( int pintFractionDigits ) 
            method, which supports any number between zero and ninety-nine, the
            limits imposed by the framework.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.SCIENTIFIC_UC">
            <summary>
            Scientific notation, with an upper case "E" for the exponent. Exactly one digit always precedes the decimal point.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT">
             <summary>
             For some applications, such as the static methods of this class, we
             set our own default number of decimal places, rather than relying on
             the Regional Settings (Locale), which can be changed, at any time,
             by any user, even with restricted permissions.
             
             ========================================================================
             Format string            Generator Routine       Width Override
             -----------------------  ----------------------  -----------------------
             DECIMAL					 FixedWidthInteger		 int pintTotalDigits
             FIXED					 FixedPointDecimal		 int pintFractionDigits
             GENERAL                  GeneralXPrecision       int pintPrecisionDigits [1]
             HEXADECIMAL				 HexadecimalInteger		 int pintTotalDigits
             NUMBER_PER_REG_SETTINGS	 NumberPerRegSettings	 int pintFractionDigits
             PERCENT					 PercentToDecimalPlaces	 int pintFractionDigits
             ========================================================================
            
             Note 1: There is only one of these methods, and it accepts the
             pintTotalDigits argument.
             </summary>
             <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
             <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
             <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
             <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
             <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
             <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
             <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
             <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
             <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this lower limit.
            
            If the specified number is less than this value, the methods behave
            as if the default had been specified.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
        </member>
        <member name="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this upper limit.
            
            If the specified number is greater than this value, the methods
            behave as if the default had been specified.
            </summary>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger"/>
            <see cref="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal"/>
            <see cref="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger"/>
            <see cref="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings"/>
            <see cref="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces"/>
            <see cref="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <see cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <returns>
            Format string for formatting a fixed point number with the default
            number of digits to the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedPointDecimal(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <param name="pintFractionDigits">
            Number of digits to allow to the right of the decimal point.
            </param>
            <returns>
            Format string for formatting a fixed point number with the specified
            number of digits to the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#FFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_2"/>
            <seealso cref="F:WizardWrx.NumericFormats.FIXED_3"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_DEFAULT"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MIN"/>
            <seealso cref="F:WizardWrx.NumericFormats.DECIMAL_DIGITS_MAX"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <returns>
            Format string for formatting a fixed width integer, with the default
            number of digits.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.FixedWidthInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <param name="pintTotalDigits">
            Minimum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting a fixed width integer, with the specified
            number of digits.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#DFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.GeneralXPrecision(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value.
            </summary>
            <param name="pintPrecisionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits.
            </returns>
            <remarks>
            Since the General format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display. If more digits are required, General
            format reverts to scientific notation.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#GFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the default maximum number of numerals.
            </summary>
            <returns>
            Format string for formatting an integer as a hexadecimal number.
            </returns>
            <see cref="F:WizardWrx.NumericFormats.HEXADECIMAL_UC"/>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#XFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.HexadecimalInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the specified minimum number of numerals.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting an integer as a hexadecimal number
            containing the specified minimum number of numerals.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#XFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0H_UC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.HEXADECIMAL_PREFIX_0X_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.IntegerToHexStr``1(``0,System.Int32,WizardWrx.NumericFormats.HexFormatDecoration)">
            <summary>
            Properly formatting an integral type as a hexadecimal string,
            including the decorations commonly applied to them as prefix or
            suffix, is a bit beyond the reach of a simple ToString format
            string.
            </summary>
            <typeparam name="T">
            There are no compiler enforced constraints on this type, because the
            Base Class Library provides no mechanism to differentiate integral
            types in constraints for generics. See the remarks for a comment about
            how we get around this.
            </typeparam>
            <param name="pintegralValue">
            Specify the value to be formatted as hexadecimal. Integral types
            only, because that's the only type that may be formatted in this
            way.
            </param>
            <param name="pintTotalDigits">
            Specify the minimum number of hexadecimal "digits" (glyphs, really)
            to render. If the number needs more than the specified number, the
            method uses as many as it needs, causing the returned string to be
            longer than you expected. If the string needs fewer characters, it
            is left padded with zeros.
            </param>
            <param name="penmHexDecoration">
            The HexFormatDecoration has the Flags attribute set on it, so that
            it can be processed as a bit mask, enabling it to specify multiple
            items.
            </param>
            <returns>
            The returned string consists of the prefix, immediately followed by
            the hexadecimal number, itself, and, finally, the suffix. 
            
            Theoretically, you can have both a prefix and a suffix, but the idea
            is to have one or the other, but not both. You can mix and match
            upper and lower case glyphs in the main number string and the
            decorations.
            </returns>
            <remarks>
            The available options are overloading the single-argument ToString
            method on all fourteen integer types, or crafting one generic method
            that takes the integer to format as its first argument. Since it's a
            lot less work, I went that route.
            
            Although this method uses generics, there is no type constraint,
            because the Base Class Library offers no such constraint to filter
            integral types, of which there are at least fourteen, not counting
            BigInteger. Since the compiler won't enforce a type constraint, I
            wrote my own routine that enforces it at run time, by searching a
            table of known integral types, identified by their GUID properties.
            If the type of pintegralValue matches an entry in the list, the
            input is accepted. Otherwise, you get an ArgumentException exception
            that clearly explains what happened and why.
            </remarks>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display two digits to the right of the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.NumberPerRegSettings(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display a specified number of digits to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number with a specified number of digits to the right of the decimal
            point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#NFormatString"/>
            <see cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_0D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_2D"/>
            <seealso cref="F:WizardWrx.NumericFormats.NUMBER_PER_REG_SETTINGS_3D"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.PercentToDecimalPlaces(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage, displaying a specified number of digits to
            the right of the decimal point.
            </returns>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#PFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT"/>
            <seealso cref="F:WizardWrx.NumericFormats.PERCENT_DIGITS_2"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notation.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_UC"/>
        </member>
        <member name="M:WizardWrx.NumericFormats.ScientificXPrecisionUC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notation.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
            <see href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx#EFormatString"/>
            <seealso href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.100).aspx"/>
            <seealso cref="M:WizardWrx.NumericFormats.ScientificXPrecisionLC(System.Int32)"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_LC"/>
            <seealso cref="F:WizardWrx.NumericFormats.SCIENTIFIC_UC"/>
        </member>
        <member name="T:WizardWrx.NumericFormats.HexFormatDecoration">
            <summary>
            Use this enumeration with the third argument to IntegerToHexStr.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.None">
            <summary>
            Just return the hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Ox_LC">
            <summary>
            Prefix the hexadecimal glyphs with Ox.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Ox_UC">
            <summary>
            Prefix the hexadecimal glyphs with OX.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Oh_LC">
            <summary>
            Prefix the hexadecimal glyphs with Oh.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Prefix_Oh_UC">
            <summary>
            Prefix the hexadecimal glyphs with OH.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Suffix_h_LC">
            <summary>
            Suffix the hexadecimal glyphs with lower case h.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Suffix_h_UC">
            <summary>
            Suffix the hexadecimal glyphs with upper case h.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Glyphs_LC">
            <summary>
            Use lower case hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.Glyphs_UC">
            <summary>
            Use upper case hexadecimal glyphs.
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Prefixes">
            <summary>
            All prefix flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Suffixes">
            <summary>
            All suffix flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Glyphs">
            <summary>
            All glyph flags
            </summary>
        </member>
        <member name="F:WizardWrx.NumericFormats.HexFormatDecoration.All_Flags">
            <summary>
            All glyph flags
            </summary>
        </member>
        <member name="T:WizardWrx.PathPositions">
            <summary>
            Use these constants to document path string parsing.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.DLLServices2.ListInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.PathPositions.FQFN_PREFIX_START_POS">
            <summary>
            The FQFN prefix refers to the drive and path substring, ":\" which
            starts in the second position of the substring, preceded by the
            logical drive letter. In keeping with the treatment of strings and
            substrings as arrays, its value is an index. Accordingly, its value
            is equated to ArrayInfo.ARRAY_SECOND_ELEMENT.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.FQFN_PREFIX_START_LEN">
            <summary>
            The prefix of an absolute path string is TWO characters. Some very 
            OLD programs, display little or no awareness of directories. Hence,
            they render only the first of the two characters (the full colon).
            
            By this means, you can tell whether a path name is one of these
            'old" path strings, or, at the very least, must be interpreted
            relative to the logged directory on the specified logical drive.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.MAX_PATH">
            <summary>
            In theory, Windows NT supports really long file names that can run
            to thousands of characters. However, due to the limitations of the
            commonly used Windows file system APIs, the practical limit on the
            length of a file name string remains stuck at MAX_PATH, 260
            characters.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.UNC_HOSTNAME_PREFIX_POS">
            <summary>
            By their very nature, a canonical UNC path string is absolute, and
            it must begin with two fixed characters, "\\". In keeping with the
            treatment of string and substrings as arrays, its value is an index.
            Accordingly, its value is equated to ArrayInfo.ARRAY_SECOND_ELEMENT.
            </summary>
        </member>
        <member name="F:WizardWrx.PathPositions.UNC_HOSTNAME_START_POS">
            <summary>
            Since a UNC path string begins with two fixed characters, it follows
            that the hostname, itself, begins at offset 2 (character 3). In
            keeping with the treatment of string and substrings as arrays, its
            value is an index.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.PropertyDefaults">
            <summary>
            Expose the AppSettingsSection associated with this DLL. 
            
            The configuration settings come from the base class. The configuration
            settings come from the base class, AssemblyLocatorBase; hence, this
            class also serves as the concrete example that is recommended to
            accompany distribution of any	abstract base class.
            
            The settings exposed by this class inhabit a configuration file that is
            associated with the DLL, itself, as opposed to the application 
            configuration. Though its format is similar to that of the application
            configuration file, the DLL configuration lives in its own configuration
            file that has the same name as the DLL, with an additional suffix of
            .config.
            </summary>
            <remarks>
            The rationale behind segregating these settings is that the affected
            application properties are ones that you would be well served to keep
            consistent, or nearly so, across large groups of applications. Keeping
            them in a dedicated configuration file that travels with the DLL that
            implements them eliminates the thankless task of adding them to every
            application configuration file.
            </remarks>
            <seealso cref="T:WizardWrx.DLLServices2.ExceptionLogger"/>
            <seealso cref="T:WizardWrx.DLLServices2.MessageInColor"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.PropertyDefaults._DllConfigSettings">
            <summary>
            Keep a copy of the AppSettingsSection here.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.PropertyDefaults.#ctor">
            <summary>
            This class needs only a default constructor.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.PropertyDefaults.GetAssemblyBuildDate(System.DateTimeKind)">
            <summary>
            Get the date on which the assembly was built.
            </summary>
            <param name="pdtmKind">
            Specify whether to return local or UTC time. Altough all three types
            are nominally supported, Unspecified is treated as Local.
            </param>
            <returns>
            The return value is the System.DateTime when the assembly was built.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.PropertyDefaults.GetAssemblyVersionString">
            <summary>
            Get a version string, suitable for display in reports.
            </summary>
            <returns>
            The fully qualified varsion (i. e., all four parts) is returned.
            </returns>
        </member>
        <member name="P:WizardWrx.DLLServices2.PropertyDefaults.ValuesCollection">
            <summary>
            Return the KeyValueConfigurationCollection from the
            AppSettingsSection section of the DLL configuration file.
            </summary>
        </member>
        <member name="T:WizardWrx.RegExpSupport">
            <summary>
            Constants, some built from others by static methods, to expedite common
            tasks that use regular expressions.
            </summary>
            <remarks>
            Reference: RegExLib.com Regular Expression Cheat Sheet (.NET), at the
            cross reference cited below.
            </remarks>
            <see href="http://regexlib.com/CheatSheet.aspx"/>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ALTERNATION">
             <summary>
             Like the binary Logical OR operator in a logical expression, this
             character says "match either the character on its left OR the
             character on its right.
            
             Regular expressions may contain many alternations, forming a group
             that behaves commutatively.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ESCAPE">
             <summary>
             Preceding another meta-character, one of these tells the Engine to
             treat the meta character as a literal.
            
             Preceding certain other characters, one of these signals a special,
             non-printing character. For example, preceding a lower case a, it
             signifies an Alarm (Bell). More commonly, however, before a lower
             case t, this character signifies a Tab, before a lower case n means
             a Newline, and a lower case r denotes a Carriage Return.
            
             N. B. A Newline in the .NET RegExp Engine and in the Perl RegExp
             Engine are two different things.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_BEGIN">
            <summary>
            Define the start of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_GROUP_END">
            <summary>
            Define the end of a group. This is the same as a subexpression in
            Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_MULTIPLE_PREVIOUS_CHAR">
            <summary>
            Match zero or more of of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_ONE_OR_MORE_PREVIOUS_CHAR">
            <summary>
            Match one or more of of the previous character or expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_SHORTEST">
            <summary>
            Append to a greedy match to make it match the fewest possible characters.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_START">
            <summary>
            Match start of line, absent the String modifier, which changes its
            meaning to match start of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_STRING_END">
            <summary>
            Match end of line, absent the String modifier, which changes its
            meaning to match end of the entire String.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_WILDCARD_CHAR">
             <summary>
             Match one of any character, except a Newline (absent the String
             modifier, which adds the Newline to the list of matched characters.
            
             Use MATCH_MULTIPLE_PREVIOUS_CHAR to extend the match to a string of
             the same character.
            
             Use MATCH_SHORTEST, following this character, followed by
             MATCH_MULTIPLE_PREVIOUS_CHAR, to limit the match.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.CARRIAGE_RETURN">
            <summary>
            Represents a Carriage Return (CR in Windows text) in a Regular Expression
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_YYYYMMDD_FORMATTED">
            <summary>
            Match a date in YYYY/MM/DD format, where the delimiter can be ANY
            character.
            </summary>    
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSS_FORMATTED">
            <summary>
            Match a time in HH:MM:SS format, where the delimiter MUST be a
            colon, and all digits are required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MATCH_DTM_HHMMSSTTT_FORMATTED">
            <summary>
            Match a time in HH:MM:SS.TTT format, where the delimiter between
            hours, minutes, and seconds MUST be a colon, and the delimiter
            between seconds and milliseconds MUST be a point. All digits are
            required.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.ESCAPED_QUOTE">
            <summary>
            Escaped quote, used to embed quotation marks in regular expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.NEWLINE">
            <summary>
            Represents a Newline (CR/LF in Windows text) in a Regular Expression
            </summary>
            <remarks>
            See "How to avoid VBScript regular expression gotchas," at
            http://www.xaprb.com/blog/2005/11/04/vbscript-regular-expression-gotchas/,
            especially the responses.
            </remarks>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_PREFIX">
            <summary>
            Match the beginning of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.PAGE_TAG_SUFFIX">
            <summary>
            Match the end of the Page tag in a ASP.NET page.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.TITLE_ATTRIBUTE_LABEL">
            <summary>
            Title attribute of the ASP.NET Page tag looks like this.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_WHOLE_MATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            first group, whose index is zero, matches the whole expression.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_MATCH">
            <summary>
            Not surprisingly, the .NET regular expression returns a collection
            of matches. Like all collections, individual members are numbered
            from zero.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.REGEXP_FIRST_SUBMATCH">
            <summary>
            In the .NET version of the regular expression matching engine, the
            subexpressions are numbered from 1, just as they are in Perl.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_HTML_TAG_MATCH">
            <summary>
            Jeffrey Friedl's regular expression for matching any arbitrary HTML
            tag.
            
            Jeffrey Friedl is the author of Mastering Regular Expressions,
            published by O'Reily, which is regarded as the "Bible" of Regular
            Expressions.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.MODIFIED_FRIEDL_HTML_TAG_MATCH">
            <summary>
            This is a derivation of Jeffrey Friedl's regular expression, adapted
            to capture the tag name in the first submatch.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.FRIEDL_GRAY_WHOLE_HTML_TAG_MATCH">
            <summary>
            Use this to get the whole XML body in one long string. Repeated uses
            should allow you to perform stepwise refinements, until you get to
            the innermost tag.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_BODY">
            <summary>
            Match the whole body of any HTML document. Except in special cases,
            you must employ the String and IgnoreCase modifiers to get this
            expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HEAD">
            <summary>
            Match the entire Head section of any HTML document. Except in
            special cases, you must employ the String and IgnoreCase modifiers
            to get this expression to work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_HTML_DOC">
            <summary>
            Match the entirety of any HTML document. Use this expression to
            discard preceding HTTP headers. Except in special cases, you must
            employ the String and IgnoreCase modifiers to get this expression to
            work.
            </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ANY">
             <summary>
             Match any opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ANY">
             <summary>
             Match any closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_COMPLETE_TAG_ARBITRARY">
             <summary>
             Match an arbitrary HTML or XML tag that appears on a single line (or
             multiple lines, if the String modifier is employed).
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to static method MatchArbitraryHtmlTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_OPENING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary opening HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlOpeningTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlOpeningTag.
             </summary>
        </member>
        <member name="F:WizardWrx.RegExpSupport.SGML_CLOSING_TAG_ARBITRARY">
             <summary>
             Match an arbitrary closing HTML or XML tag.
            
             Except in special cases, you should employ the IgnoreCase modifier.
            
             You must interpolate the tag name into this string by calling the
             the static string.Format method, passing this string as the format
             and the tag as the sole substitution value.
            
             You may also pass a tag name to method MatchArbitraryHtmlClosingTag,
             which returns a pattern. For example, to find all Anchor tags, pass
             "A" to MatchArbitraryHtmlClosingTag.
             </summary>
        </member>
        <member name="M:WizardWrx.RegExpSupport.ALL_GREEDY_MATCH">
            <summary>
            Return a string that matches the maximum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.ALL_MINIMAL_MATCH">
            <summary>
            Return a string that matches the minimum number of any character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.PAGE_TAG_MATCH">
            <summary>
            Return a string that matches the Page tag in a ASP.NET document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.TITLE_ATTRIBUTE_MATCH">
            <summary>
            Expression to match the Title attribute of an ASP.NET page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_COMPLETE_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the tag named
            in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlOpeningTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_OPENING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the opening
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="M:WizardWrx.RegExpSupport.MatchArbitraryHtmlClosingTag(System.String)">
            <summary>
            Interpolate a tag name into the SGML_CLOSING_TAG_ARBITRARY match
            expression template.
            </summary>
            <param name="pstrTagName">
            String containing the name of the tag to match.
            </param>
            <returns>
            A Regular Expression match expression that will match the closing
            tag named in argument pstrTagName.
            </returns>
        </member>
        <member name="T:WizardWrx.DLLServices2.RegistryValues">
            <summary>
            This sealed class exposes static methods for efficiently testing for the
            presence of named values in a Registry key that behave more like the
            Item property of a collection, and retrieving Registry value types that
            require a transformation of one sort or another to get them into the
            appropriate native type.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.RegistryValues.REG_BINARY_NULL_FOR_ABSENT">
            <summary>
            Specify this constant as the value of RegQueryValue argument pfNullIsOK if
            your routine expects a null reference when the requested value is absent
            or the wrong type.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.RegistryValues.REG_BIANRY_EMPTY_ARRAY_FOR_ABSENT">
            <summary>
            Specify this constant as the value of RegQueryValue argument pfNullIsOK if
            your routine expects an array of some kind, even when the requested value
            is absent or the wrong type.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.RegQueryValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Get a REG_BINARY value from the Windows Registry.
            </summary>
            <param name="phRegKey">
            Specify the handle of the Registry key where the value is expected
            to exist. This must be the key that holds the value, since neither
            RegistryKey.GetValueKind, nor RegistryKey.GetValue supports paths.
            </param>
            <param name="pstrValueName">
            Specify the name, sans square brackets, which aren't needed, since
            the string is the unqualified name of a value.
            </param>
            <param name="pfNullIsOK">
            Specify True if your code tests the return value for a null
            reference. Otherwise, specify False, and expect an uninitialized
            one-element byte array.
            
            This is a specific instance in which I believe that a null reference
            is the best solution to the problem of what to use as a default for
            a missing REG_BINARY value.
            </param>
            <returns>
            If the specified value exists and its type is REG_BINARY, the return
            value is a byte array containing the value read from the Registry.
            Otherwise, the return value is null (Nothing in Visual Basic).
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference (Nothing in Visual Basic), when this
            method calls companion method ValueExists to query the Registry for
            the specified value, that method throws an ArgumentNullException
            exception, listing this method as its calling method in its stack
            trace.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.RegQueryValue(Microsoft.Win32.RegistryKey,System.String,System.Int32)">
            <summary>
            Get a REG_DWORD value from the Windows Registry.
            </summary>
            <param name="phRegKey">
            Specify the handle of the Registry key where the value is expected
            to exist. This must be the key that holds the value, since neither
            RegistryKey.GetValueKind, nor RegistryKey.GetValue supports paths.
            </param>
            <param name="pstrValueName">
            Specify the name, sans square brackets, which aren't needed, since
            the string is the unqualified name of a value.
            </param>
            <param name="pintDefault">
            Although a DWORD seems logically more like an unsigned integer, I am
            somewhat surprised that the framework casts it to int, which carries
            a sign. Nevertheless, since the return is cast to int, so is its
            default, which is returned if the specified value is absent, or if
            it exists, but has a different type (ValueKind) property.
            </param>
            <returns>
            If the named value exists in the specified key and its type is 
            REG_DWORD, it is returned, as a SIGNED integer. Otherwise, the value
            specified in pintDefault is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference (Nothing in Visual Basic), when this
            method calls companion method ValueExists to query the Registry for
            the specified value, that method throws an ArgumentNullException
            exception, listing this method as its calling method in its stack
            trace.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.RegQueryValue(Microsoft.Win32.RegistryKey,System.String,System.Int64)">
            <summary>
            Get a REG_QWORD value from the Windows Registry.
            </summary>
            <param name="phRegKey">
            Specify the handle of the Registry key where the value is expected
            to exist. This must be the key that holds the value, since neither
            RegistryKey.GetValueKind, nor RegistryKey.GetValue supports paths.
            </param>
            <param name="pstrValueName">
            Specify the name, sans square brackets, which aren't needed, since
            the string is the unqualified name of a value.
            </param>
            <param name="plngDefault">
            Although a QWORD seems logically more like an unsigned long, I am
            somewhat surprised that the framework casts it to long, which
            carries a sign. Nevertheless, since the return is cast to long, so
            is its default, which is returned if the specified value is absent,
            or if it exists, but has a different type (ValueKind) property.
            </param>
            <returns>
            If the named value exists in the specified key and its type is
            REG_QWORD, it is returned, as a SIGNED long integer. Otherwise, the
            value specified in plngDefault is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference (Nothing in Visual Basic), this
            method throws an ArgumentNullException exception.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.RegQueryValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Return the single string representation of a REG_SZ or 
            REG_EXPAND_SZ Registry value.
            </summary>
            <param name="phRegKey">
            Pass in a handle to the Registry sub-key that is supposed to contain
            the required REG_SZ or REG_EXPAND_SZ value.
            </param>
            <param name="pstrValueName">
            Pass in a string that contains the name of the value to be queried
            and returned if present. See notes in the Return Value comment.
            </param>
            <param name="pstrDefault">
            Specify the string to return if the value is missing or of the wrong type.
            </param>
            <returns>
            If the function succeeds, the return value is a string containing
            the value. If the value type is REG_EXPAND_SZ, environment variables
            are expanded.
            
            If the value specified by pstrValueName is missing entirely, the
            return value is pstrDefault.
            
            If the requested string is something other than REG_SZ or 
            REG_EXPAND_SZ, the return value is pstrDefault.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference (Nothing in Visual Basic), when this
            method calls companion method ValueExists to query the Registry for
            the specified value, that method throws an ArgumentNullException
            exception, listing this method as its calling method in its stack
            trace.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.RegQueryValue(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Return the multiple values stored in a REG_MULTI_SZ Registry value.
            </summary>
            <param name="phRegKey">
            Pass in a handle to the Registry sub-key that is supposed to contain
            the required REG_MULTI_SZ value.
            </param>
            <param name="pstrValueName">
            Pass in a string that contains the name of the value to be queried
            and returned if present. See notes in the Return Value comment.
            </param>
            <returns>
            If the function succeeds, the return value is an array of strings
            that contains one string for each substring in the REG_MULTI_SZ
            value.
            
            If the value specified by pstrValueName is missing entirely, an
            empty array is returned.
            
            If the requested string is something other than REG_MULTI_SZ, this
            method treats the call as a degenerate case, returning an array of
            one element if the value is either REG_SZ or REG_EXPAND_SZ.
            
            ALL other types return empty arrays.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference (Nothing in Visual Basic), when this
            method calls companion method ValueExists to query the Registry for
            the specified value, that method throws an ArgumentNullException
            exception, listing this method as its calling method in its stack
            trace.
            </exception>
        </member>
        <member name="M:WizardWrx.DLLServices2.RegistryValues.ValueExists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Return TRUE if a specified value exists on a specified key of the
            Windows Registry.
            </summary>
            <param name="phRegKey">
            Pass in a handle to the Registry sub-key that is supposed to contain
            the desired value.
            </param>
            <param name="pstrValueName">
            Pass in a string that contains the name of the value to be queried
            and returned if present. See notes in the Return Value comment.
            </param>
            <returns>
            The function returns true if the key contains a value with the 
            specified name, or if pstrValueName is the empty string or a null
            reference, either of which stands for the default value, which is
            always present, though seldom set. Otherwise, the return value is
            false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            If phRegKey is a null reference, an ArgumentNullException exception
            is thrown.
            </exception>
            <remarks>
            This was written as a service routine for companion methods
            GetRegDwordValue and GetRegMultiStringValue. However, since it is
            almost certain to find use on its own, I marked it public.
            </remarks>
        </member>
        <member name="T:WizardWrx.SpecialCharacters">
            <summary>
            Use these constants when you want or need your listings to be crystal
            clear about certain ambiguous literals.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialStrings"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN">
            <summary>
            Use this character anywhere in your code that requires a bare
            carriage return character.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.FULL_STOP">
            <summary>
            Use this character to unambiguously denote a period character, for
            example, when specifying a delimiter character or appending a full
            stop character to a string.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_I">
            <summary>
            Lower case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_I">
            <summary>
            Upper case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_L">
            <summary>
            Lower case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_L">
            <summary>
            Upper case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_O">
            <summary>
            Lower case O, for use in code where it might be easily mistaken for
            a number zero. 
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_O">
            <summary>
            Upper case O, for use in code where it might be easily mistaken for
            a number zero.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_LC_Z">
            <summary>
            Lower case Z, for use in code where it might be easily mistaken for
            a numeric character 2 or 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_UC_Z">
            <summary>
            Upper case Z, for use in code where it might be easily mistaken for
            a numeric character 2 or 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_0">
            <summary>
            Numeric character 0, for use in code where it might be mistaken for
            a letter O.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_O"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_O"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_1">
            <summary>
            Numeric character 1, for use in code where it might be mistaken for
            a lower case l or an upper case I.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_I"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_L"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2">
            <summary>
            Numeric character 2, for use in code where it might be mistaken for
            a letter Z or a numeral 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_7">
            <summary>
            Numeric character 2, for use in code where it might be mistaken for
            a letter Z or a numeral 7.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_LC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_UC_Z"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CHAR_NUMERAL_2"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.AMPERSAND">
            <summary>
            Use this when your code calls for a ampersand literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.COLON">
            <summary>
            Use this when your code calls for a colon literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.COMMA">
            <summary>
            Use this when your code calls for a comma literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE">
            <summary>
            Use this when your code calls for a double quotation mark literal, 
            when you want the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.EQUALS_SIGN">
            <summary>
            Use this constant whey your code calls for a literal equals sign.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.HYPHEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.HYPHEN">
            <summary>
            Literal hyphens are also easily confused in code, especially with
            minus signs.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.LINEFEED">
            <summary>
            Use this character anywhere in your code that requires a bare
            linefeed character.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.NULL_CHAR">
            <summary>
            Use this when your code calls for a literal null character, and you
            want the listing to be crystal clear. This can be especially useful
            to distinguish a null character from a null reference.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PERCENT_SIGN">
            <summary>
            Use this when your code calls for a ampersand literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialStrings.PERCENT_SIGN"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.PIPE_CHAR">
            <summary>
            How have I got on this long without my faithful field separator?
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SEMICOLON">
            <summary>
            Use this when your code calls for a semicolon literal, when you want
            the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE">
            <summary>
            Use this when your code calls for a single quotation mark literal, 
            when you want the listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.SPACE_CHAR">
            <summary>
            Use this when your code calls for a single space when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.TAB_CHAR">
            <summary>
            Use this when your code calls for a tab literal, when you want the
            listing to be crystal clear about what it is.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COLON"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.COMMA"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.PIPE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SEMICOLON"/>
        </member>
        <member name="F:WizardWrx.SpecialCharacters.UNDERSCORE_CHAR">
            <summary>
            Underscores can be really hard to see in code, both on paper and
            on screen.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.DOUBLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SINGLE_QUOTE"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.SPACE_CHAR"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.EQUALS_SIGN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.HYPHEN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.TAB_CHAR"/>
        </member>
        <member name="T:WizardWrx.SpecialStrings">
            <summary>
            This class defines special purpose strings that are either difficult to
            get right in the first place, or display ambiguously in text editors and
            printed source code listings.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <remarks>
            For ease of access, I promoted the classes that expose only constants to
            the root of the WizardWrx namespace.
            </remarks>
            <seealso cref="T:WizardWrx.ArrayInfo"/>
            <seealso cref="T:WizardWrx.MagicNumbers"/>
            <seealso cref="T:WizardWrx.SpecialCharacters"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.AMPERSAND">
            <summary>
            Use this when you need to remove or replace ampersand literals in a string.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.AMPERSAND"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE">
            <summary>
            A URI that ends with a forward slash calls forth this specially
            named page.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY">
            <summary>
            Key, in web.config, that contains the name of the application's
            start (home) page.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ASP_REL_EXEC_PATH_PREFIX">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_DIR_DEFAULT_START_PAGE"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_APP_START_PAGE_KEY"/>
            <seealso cref="F:WizardWrx.SpecialStrings.ASP_RELATIVE_PATH_BEGIN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.EMPTY_STRING">
            <summary>
            I like having a way to initialize a constant to the emptry string.
            </summary>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_FIRST_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_IS_EMPTY"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_INVALID_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ARRAY_SECOND_ELEMENT"/>
            <seealso cref="F:WizardWrx.ArrayInfo.INDEX_FROM_ORDINAL"/>
            <seealso cref="F:WizardWrx.ArrayInfo.NEXT_INDEX"/>
            <seealso cref="F:WizardWrx.ArrayInfo.ORDINAL_FROM_INDEX"/>
            <seealso cref="F:WizardWrx.MagicNumbers.EMPTY_STRING_LENGTH"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.ERRMSG_SUCCESS_PLACEHOLDER">
            <summary>
            Since ErrorExit is never invoked for ERROR_SUCCESS, and the table of
            error messages is indexed by status code, this string holds its spot
            in the table of error messages, but is never rendered. Hence, it can
            be kept out of the managed string resources for applications. This
            string is publicly accessible through a static method exported by
            this library, ExceptionLogger.GetSpecifiedReservedErrorMessage.
            </summary>
            <see cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.LoadErrorMessageTable(System.String[])"/>
            <seealso cref="M:WizardWrx.DLLServices2.ExceptionLogger.GetSpecifiedReservedErrorMessage(WizardWrx.DLLServices2.ExceptionLogger.ErrorExitOptions)"/>
            <see cref="F:WizardWrx.MagicNumbers.ERROR_SUCCESS"/>
            <seealso cref="F:WizardWrx.MagicNumbers.ERROR_RUNTIME"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_PREFIX">
            <summary>
            Minimal HTML (and XML) comment prefix string.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_PREFIX_SP">
            <summary>
            HTML (and XML) comment prefix string, followed by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_SUFFIX">
            <summary>
            Minimal HTML (and XML) comment suffix string.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_COMMENT_SUFFIX_SP">
            <summary>
            HTML (and XML) comment suffix string, preceded by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.HTML_NONBREAKING_SPACE">
            <summary>
            Web Developers are always needing a non-breaking space, for use as
            filler, especially in dynamically generated tables.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.LOCALHOST">
            <summary>
            The DNS name of the local loopback is always "localhost".
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.LOCALHOST_IP_ADDR">
            <summary>
            The local loopback has the reserved IP address of 127.0.0.1.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.PERCENT_SIGN">
            <summary>
            Use this when you need to remove or replace ampersand literals in a string.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.PERCENT_SIGN"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.SPACING_TEMPLATE">
            <summary>
            Use this template when you need to either precede or follow a line
            of otherwise static text with a newline.
            </summary>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            carriage returns only.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            line feeds only.
            </summary>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE"/>
        </member>
        <member name="F:WizardWrx.SpecialStrings.STRING_SPLIT_NEWLINE">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file into an array of
            strings, each element of which is a line of text, stripped of its
            line ending, if any.
            </summary>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.CARRIAGE_RETURN"/>
            <seealso cref="F:WizardWrx.SpecialCharacters.LINEFEED"/>
            <seealso cref="F:WizardWrx.SpecialStrings.STRING_SPLIT_CARRIAGE_RETURN"/>
        </member>
        <member name="T:WizardWrx.DLLServices2.StateManager">
            <summary>
            This class maintains run-time information about the executing assembly,
            assumed to be a desktop application, that calls it into being. Since it
            implements the Singleton design pattern, there is never more than one
            instance.
            </summary>
            <remarks>
            This class has several read-write properties, all of which are protected
            by thread-safe accessors. Both the Get and Set methods are protected, so
            that a get request blocks until a set request executing in another thread
            completes.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ASSEMBLYVERSION_COMPLETE">
            <summary>
            Specify this constant to the ToString method of a System.Version
            object (e. g., of an Assembly) to cause it to return the entire
            version string.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ASSEMBLYVERSION_EXCEPT_REVISION">
            <summary>
            Specify this constant to the ToString method of a System.Version
            object (e. g., of an Assembly) to cause it to return all but the
            build number.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ASSEMBLYVERSION_MAJOR_AND_MINOR">
            <summary>
            Specify this constant to the ToString method of a System.Version
            object (e. g., of an Assembly) to cause it to return only the
            major and minor version numbers.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ASSEMBLYVERSION_MAJOR_ONLY">
            <summary>
            Specify this constant to the ToString method of a System.Version
            object (e. g., of an Assembly) to cause it to return only the
            major version number.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.UNSUPPORTED_EXE_SUBSYSTEM">
            <summary>
            The DWLastDllError property returns this value when 
            StandardHandleState is called by code running in anything except the
            Windows character mode subsystem.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.#cctor">
            <summary>
            This method initializes all static members except the class, itself.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.#ctor">
            <summary>
            To prevent the framework from generating a default constructor and
            marking it public, which would break the singleton design pattern,
            we provide our own do-nothing constructor.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetTheSingleInstance">
             <summary>
             Call this static method from anywhere in your code to get a
             reference to the StateManager singleton.
             </summary>
             <returns>
             The return value is a reference to the singleton, which is created
             the first time the method is called. Subsequent calls return a
             reference to the singleton.
             </returns>
             <remarks>
             Version 6.0.381.32883 of this class called static method
             System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName
             to obtain the name of the main module. However, the first test of
             this library as a dependent exposed a moderately surprising, but not
             completely unexpected, side effect of having the Visual Studio
             Hosting Process enabled; it becomes the MainModule of the process.
             Worse yet, enumerating the ModulesCollection lists all the DLLs, but
             the expected MainModule, the main assembly under test, is nowhere to
             be found!
             
             Hence, beginning with version 6.0.389, this class reverts to a more
             reliable method, System.Reflection.Assembly.GetCallingAssembly(). To
             ensure that the optimizer doesn't inline it, although I find such an
             idea unlikely, the method is marked with a MethodImplAttribute,
             MethodImplOptions.Nogenerating the code inline. Since I don't have a
             Using directive, both must be fully qualified by System.Runtime.CompilerServices.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetTheSingleInstance(System.Reflection.Assembly)">
            <summary>
            Call this method from any class that exposes a reference to the
            singleton as a read only property. Please see the Remarks section.
            </summary>
            <param name="pasmCallingAssembly">
            Pass in a reference to the assembly that is calling this method on
            behalf of an object that exposes a reference to this object as a
            read only property. Please see the Remarks section.
            </param>
            <returns>
            The return value is a reference to the singleton, which is created
            the first time the method is called. Subsequent calls return a
            reference to the singleton.
            </returns>
            <remarks>
            Since making a protected constructor safe for use by a class that
            implements the Singleton design pattern, and a class that calls this
            method causes System.Reflection.Assembly.GetCalllingAssembly to
            report the assembly in which the call executes as the calling
            assembly, any such method must explicitly identify the assembly that
            contains the process entry point.
            
            When the Visual Studio Hosting Process is enabled, it becomes the
            entry assembly, hiding the "real" entry assembly (the assembly under
            test), System.Reflection.Assembly.GetEntryAssembly cannot be used
            safely. Moreover, since the Visual Studio Hosting Process runs in
            the graphical (Windows) subsystem, the entry assembly cannot be used
            to correctly determine whether the entry assembly runs in the
            character mode subsystem.
            
            Although the class needs only the Location property off the Assembly
            instance, I elected to call for the entire Assembly to be passed in,
            to make the needs of this method unambiguous. Since the calling
            method must call one of two static methods on the Assembly class,
            both of which return instances of Assembly, this doesn't impose any
            extra burden on the calling assembly.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetAssemblyFQFN">
             <summary>
             Return the fully qualified name of the assembly that started the
             current process.
             </summary>
             <returns>
             The return value is a string that contains the fully qualified name
             of the assembly that started the current process.
             </returns>
            <remarks>
             I made this a method so that it is computed as needed, even in a
             debugging session when the Visual Studio Hosting process runs all
             the property getters when an object is expanded in the locals and
             watch windows.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetAssemblyProductAndVersion">
            <summary>
            Get the assembly product name and version number is a string that is
            suitable for use as a window caption.
            </summary>
            <returns>
            The return value is a string, suitable for use as the caption of a
            window, such as a form or message box. The returned string contains
            the product name, followed by the entire 4-part version string.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetAssemblyProductAndVersion(WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest)">
            <summary>
            Get the assembly product name and version number is a string that is
            suitable for use as a window caption.
            </summary>
            <param name="penmAssemblyVersionRequest">
            Use a member of the AssemblyVersionRequest enumeration to indicate
            how many parts of the four-part version number to include.
            </param>
            <returns>
            The return value is a string, suitable for use as the caption of a
            window, such as a form or message box. The returned string contains
            the product name, followed by the specified number of parts of the
            product version.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetAppSubsystemID">
            <summary>
            Return the AppSubsystemID property, explicitly cast to a PESubsystemID.
            </summary>
            <returns>
            The return value is the AppSubsystemID property, cast to a member of
            the IP6CUtilLib1.PESubsystemID enumeration.
            </returns>
            <remarks>
            This method provides a more meaningful interpretation of the AppSubsystemID value.
            
            This routine is implemented as an instance method, so that its code runs only as needed.
            </remarks>
            <seealso cref="P:WizardWrx.DLLServices2.StateManager.AppSubsystemID"/>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.GetAppSubsystemString"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetAppSubsystemString">
             <summary>
             Return a sentence that identifies the subsystem in which the 
             assembly that started the current process runs.
             </summary>
             <returns>
             The return value is a short sentence that describes the subsystem in
             which the assembly that started the current process runs.
             </returns>
            <remarks>
             I made this a method so that it is computed strictly as needed, even
             in a debugging session when the Visual Studio Hosting process runs
             all the property getters when an object is expanded in the locals or
             watch window.
            
             This method is much more expensive than GetAssemblyFQFN, because it
             gets the returned string from a string resource.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.LoadErrorMessageTable(System.String[])">
             <summary>
             Load the table of error messages for use with the ErrorExit method.
             </summary>
             <param name="pastrErrorMessages">
             Array of strings, for use as error messages. See Remarks.
             </param>
             <returns>
             Count of error messages loaded into the object. Hence, the Ubound of
             the array is one less than the return value, and its LBound is zero.
             </returns>
             <remarks>
             Error message numbers are array subscripts. This imposes two
             requirements on the list.
            
             1) You must supply a message for the default exit code of zero,
             even if you don't use it.
            
             2) Status codes must be sequentially numbered.
            
             The second requirement can be relaxed, at the cost of inserting one
             or more dummy error messages, which may be empty strings, to account
             for the skipped numbers. The obvious disadvantage is some bloat in
             the message table.
            
             You must call this method before your program can get a useful error
             message from ErrorExit. Although the call to ErrorExit succeeds, the
             message is "Internal error: Unknown status code," followed by the
             supplied raw exit code.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.GetStdHandleFQFN(WizardWrx.DLLServices2.StateManager.ShsStandardHandle)">
            <summary>
            Report the file, if any, to which the specified standard handle is
            redirected.
            </summary>
            <param name="penmStdHandle">
            Specify the ShsStandardHandle member that corresponds to the handle
            for which you wish to know whether it is attached or redirected.
            </param>
            <returns>
            If the function succeeds and the handle is redirected, the return
            value is the name of the file to which the specified handle is
            redirected.
            
            Otherwise, the return value is one of two strings that explain the
            error.
            
            Properties.Resources.MSG_APP_CHARACTER_MODE_APPS_ONLY is the 
            complete text of the message displayed when the calling routine is
            running in the Windows graphical mode subsystem.
            
            Properties.Resources.ERRMSG_STD_HANDLE_STATE is the beginning of a
            message, which is followed by the returned system status code, shown
            in both hexadecimal and decimal notation, followed by the associated
            system message.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.StandardHandleState(WizardWrx.DLLServices2.StateManager.ShsStandardHandle)">
            <summary>
            Evaluate whether a standard handle is attached to a console or 
            redirected.
            </summary>
            <param name="penmStdHandle">
            Specify the ShsStandardHandle member that corresponds to the handle
            for which you wish to know whether it is attached or redirected.
            </param>
            <returns>
            If the function succeeds, the return value is either ShsAttached or
            ShsRedirected. Otherwise, there was an error, and you should call
            Marshal.GetLastWin32Error to determine exactly what happened. The 
            singleton has a private property where the return value is stored.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.StateManager.FormatSystemErrorMessage(System.Int32)">
            <summary>
            Return the message associated with a system status code.
            </summary>
            <param name="pdwLastError">
            Specify the status code for which the system message is desired.
            </param>
            <returns>
            A new Win32Exception exception is constructed from the specified
            status code, and its Message property is returned.
            </returns>
            <remarks>
            This convenience method amounts to syntactic sugar. Since it is very
            unlikely to ever be called by the method that motivated me to create
            it, I'll let it go ahead and call through it, even though calling
            the constructor directly, passing in the static member that holds the
            status code would be a couple of orders of magnitude more efficient.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppErrorMessages">
            <summary>
            Make the array of error messages available, for reading only, under
            guard of a lock, to ensure that another thread isns't adding to the
            array while it is being returned.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppReturnCode">
            <summary>
            Use this read/write property to set the application return code from
            anywhere, so that you don't have to use another, potentially awkward,
            method to get the word back to the main routine.
            </summary>
            <remarks>
            Access to this property is synchronized by an internally managed
            object lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppRootAssembly">
            <summary>
            This property has a static initializer, and is never changed. Use it
            to get a reference to a reflection-only copy of the application
            startup assembly.
            </summary>
            <remarks>
            The AppRootAssemblyFileBaseName, AppRootAssemblyFileDirName,
            AppRootAssemblyFileName, AppStartupTimeLocal, and
            AppStartupTimeLocal properties are shortcuts to frequently used
            properties of the WizardWrx.My object returned by this property.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppRootAssemblyFileBaseName">
            <summary>
            This property is a shortcut to the AssemblyFileBaseName property of
            the AppRootAssembly property.
            </summary>
            <remarks>
            Since the underlying property is read only, and has a static
            initializer, it is thread-safe without the overhead of a lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppRootAssemblyFileDirName">
            <summary>
            This property is a shortcut to the AssembyDirName property of
            the AppRootAssembly property.
            </summary>
            <remarks>
            Since the underlying property is read only, and has a static
            initializer, it is thread-safe without the overhead of a lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppRootAssemblyFileName">
            <summary>
            This property is a shortcut to the AssemblyFileName property of
            the AppRootAssembly property.
            </summary>
            <remarks>
            Since the underlying property is read only, and has a static
            initializer, it is thread-safe without the overhead of a lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppStartupTimeLocal">
            <summary>
            This property is a shortcut to the StartupTime property of
            the AppRootAssembly property.
            </summary>
            <remarks>
            Since the underlying property is read only, and has a static
            initializer, it is thread-safe without the overhead of a lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppStartupTimeUtc">
            <summary>
            This property is a shortcut to the StartupTimeUTC property of
            the AppRootAssembly property.
            </summary>
            <remarks>
            Since the underlying property is read only, and has a static
            initializer, it is thread-safe without the overhead of a lock.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppUptime">
            <summary>
            Gets the elapsed time since the application started.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppSubsystemID">
            <summary>
            Return the ID of the subsystem in which the assembly runs. Call the
            GetAppSubsystemString method to translate the ID into a human
            readable message. The translation is way too expensive to expose as
            a property, and too infrequently needed to justify having the
            constructor store it in a string.
            </summary>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.GetAppSubsystemID"/>
            <seealso cref="M:WizardWrx.DLLServices2.StateManager.GetAppSubsystemString"/>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.ConsoleMessageTimeFormat">
            <summary>
            Use this property to get a reference to the FormattedLocalTime
            object that governs the formatting of the times displayed in the BOJ
            and EOJ messages.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.DefaultEventSourceID">
            <summary>
            Gets the registered default event source ID.
            </summary>
            <remarks>
            If no event source is registered, this property returns the 
            WIZARDWRX_EVENT_SOURCE_ID string static ExceptionLogger string.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.InitialWorkingDirectoryName">
            <summary>
            Gets the initial working directory, which reflects its value when
            the application started.
            </summary>
            <remarks>
            This property has a static initializer, and is never changed.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.DWLastDllError">
            <summary>
            Query this property for the value returned by GetLastError.
            </summary>
            <remarks>
            Strictly speaking, the value is returned by Marshal.GetLastWin32Error.
            </remarks>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.AppExceptionLogger">
            <summary>
            This property returns a reference to the singleton ExceptionLogger,
            which is created immediately following creation of this instance.
            Hence, by the time the reference is returned, this reference is
            guaranteed to be valid and read only for work.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.StateManager.ShowUTCTime">
             <summary>
             Set this property to TRUE to cause UTC times to be displayed in all
             time stamps included in console BOJ and EOJ messages.
            
             Set it to FALSE to display only local times. The class default
             setting is TRUE.
            
             See the Remarks listed with the class definition.
             </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest">
            <summary>
            Use this enumeration as input to the overloaded StateManager class's
            GetAssemblyProductAndVersion method, to specify how many parts of
            the version string to return.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.MajorOnly">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_MAJOR_ONLY to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.MajorAndMinor">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_MAJOR_AND_MINOR to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.MajroMinorBuild">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_EXCEPT_REVISION to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            
            MajroMinorBuild and MajorMinorExceptRevision are synonyms.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.MajorMinorExceptRevision">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_EXCEPT_REVISION to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            
            MajroMinorBuild and MajorMinorExceptRevision are synonyms.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.MajorMinroBuildRevision">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_COMPLETE to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            
            MajorMinroBuildRevision and Complete are synonyms.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.AssemblyVersionRequest.Complete">
            <summary>
            This is functionally equivalent to specifying a constant value of
            ASSEMBLYVERSION_COMPLETE to the ToString method of a
            System.Version object, and is intended to do so through the
            GetAssemblyProductAndVersion instance method of this class.
            
            MajorMinroBuildRevision and Complete are synonyms.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.StateManager.ShsStandardHandle">
            <summary>
            Since there is no hard and fast rule about the numbering of standard
            handles, whether attached or redirected, the Windows API routines
            abstract away the association. SHS_StandardHandleState adds another
            abstraction, in the form of an enumeration, which identifies the
            handle to query.
            
            Rather than jump through hoops to figure out which of the three
            handles you want to query, I decided that asking you to identify it
            by specifying a member of this enumeration was not excessively
            onerous, since the answer reflects a design time decision.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsStandardHandle.SHSUndefined">
            <summary>
            // Value 0 is reserved for indicating that the value is uninitialized.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsStandardHandle.ShSStdIn">
            <summary>
            Standard Input, also called STDIn, corresponds to Console.In.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsStandardHandle.ShsStdOut">
            <summary>
            Standard Output, also called STDOUT, corresponds to Console.Out.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsStandardHandle.ShsStdEror">
            <summary>
            Standard Error, also called STDERR, corresponds to Console.Error.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.StateManager.ShsHandleState">
            <summary>
            This enumeration maps the value returned by SHS_StandardHandleState
            to a value that ideally indicates whether a handle is attached to a
            console or redirected, while the remaining codes indicate error
            conditions.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsHandleState.ShsUndeterminable">
            <summary>
            Value = 0 indicates that ShsStandardHandle is either undefined
            or out of range.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsHandleState.ShsAttached">
            <summary>
            Value = 1 indicates that the handle corresponding to the value
            of ShsStandardHandle is attached a console.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsHandleState.ShsRedirected">
            <summary>
            Value = 2 indicates that the handle corresponding to the value
            of ShsStandardHandle is redirected to a file or pipe.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.StateManager.ShsHandleState.ShsSystemError">
            <summary>
            Value = 3 indicates that an internal error occurred. Call
            Marshal.GetLastWin32Error to learn why.
            </summary>
        </member>
        <member name="T:WizardWrx.StringTricks">
            <summary>
            This is a class of static functions for performing common tasks not
            provided by the System.String class.
            </summary>
        </member>
        <member name="F:WizardWrx.StringTricks.DEFAULT_TOKEN_DELM">
            <summary>
            Default token terminator string used by the version of public static
            method, MakeToken, which takes one argument.
            </summary>
        </member>
        <member name="F:WizardWrx.StringTricks.TOKEN_TEMPLATE">
            <summary>
            This constant is declared at class scope so that the two MakeToken
            overloads can share it.
            </summary>
        </member>
        <member name="M:WizardWrx.StringTricks.AppendFullStopIfMissing(System.String)">
            <summary>
            Unless the last character of the input string is a period (full
            stop), append one to the returned string.
            </summary>
            <param name="pstrInput">
            Specify the input string to evaluate and edit as needed.
            </param>
            <returns>
            The input string is returned with a period appended to it. If it already
            has one, the input string is returned without changes.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.Char)">
            <summary>
            Return a one-element array containing the input character, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pchrTheCharacter">
            Character to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ArrayOfOne(System.String)">
            <summary>
            Return a one-element array containing the input string, for use
            as input to the Split method of the system.string class.
            </summary>
            <param name="pstrTheString">
            String to use as the split delimiter.
            </param>
            <returns>
            Array of one element, ready to feed to the string.split method.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.Chop(System.String)">
            <summary>
            Return a new string with the terminal newline, if present, removed.
            </summary>
            <param name="pstrIn">
            String to be chopped
            </param>
            <returns>
            Chopped string
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrences of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return MagicNumbers.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or MagicNumbers.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.CountSubstrings(System.String,System.String,System.StringComparison)">
             <summary>
             Strangely, the String class is missing an important static method to
             count substrings within a string. This is the missing method.
             </summary>
             <param name="pstrSource">
             String in which to count occurrences of substring pstrToCount.
            
             If pstrSource is null or empty, the method returns zero.
             </param>
             <param name="pstrToCount">
             Substring to count in string pstrSource. An empty string causes the
             method to return MagicNumbers.STRING_INDEXOF_NOT_FOUND, or -1.
             </param>
             <param name="penmComparisonType">
             A member of the StringComparison enumeration, which defines the
             rules for performing the comparison.
             </param>
             <returns>
             Number of times, if any, that string pstrToCount occurs in string
             pstrSource, or MagicNumbers.STRING_INDEXOF_NOT_FOUND (-1) if
             pstrToCount is either null or empty.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.Int32,System.Int32)">
            <summary>
            Extract the substring bounded by the characters at either end of it.
            </summary>
            <param name="pstrWholeString">
            Extract the substring from this string.
            </param>
            <param name="pintPosBegin">
            This integer is the position, given by IndexOf, of the character
            that bounds the left end of the desired substring.
            </param>
            <param name="pintPosEnd">
            This integer is the position, given by IndexOf, of the character
            that bounds the right end of the desired substring.
            </param>
            <returns>
            The returned substring begins with the character immediately to the
            right of the left hand bounding character, and ending with the last
            character before the right hand bounding character.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBetweenIndexOfs(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Extract the substring bounded by the characters at either end of it.
             </summary>
             <param name="pstrWholeString">
             Extract the substring from this string.
             </param>
             <param name="pstrLeftMarker">
             This overload handles the case where the left boundary is bounded by
             a string. The method needs a copy of the string in order to find the
             true beginning of the substring to extract, and to compute its
             length.
             </param>
             <param name="pintPosBegin">
             This integer is the position, given by IndexOf, of the character
             that bounds the left end of the desired substring.
             </param>
             <param name="pintPosEnd">
             This integer is the position, given by IndexOf, of the character
             that bounds the right end of the desired substring.
             </param>
             <returns>
             The returned substring begins with the character immediately to the
             right of the left hand bounding character, and ending with the last
             character before the right hand bounding character.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrBoundingCharacter">
             This is the bounding character. Please see Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends must be bounded by the same character. To
             extract a string bounded on each end by a different character, use
             the next overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.Char,System.Char)">
             <summary>
             Extract a substring that is bounded by a character. See Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pchrLeftBound">
             This is the character that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pchrRightBound">
             This is the character that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding characters. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             characters. To  extract a string bounded on each end by the same
             character, use the previous overload.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ExtractBoundedSubstrings(System.String,System.String,System.String)">
             <summary>
             Extract a substring that is bounded by a pair of substrings. See
             Remarks.
             </summary>
             <param name="pstrWholeString">
             The substring is extracted from this string.
             </param>
             <param name="pstrLeftBound">
             This is the substring that marks the left end of the string. See
             Remarks.
             </param>
             <param name="pstrRightBound">
             This is the substring that marks the right end of the string. See
             Remarks.
             </param>
             <returns>
             This is the desired substring, without its bounding substrings. See
             Remarks.
             </returns>
             <remarks>
             The left and right ends are expected to be bounded by different
             substrings. To  extract a string bounded on each end by the same
             substring, use the same value for the third and fourth arguments.
            
             Inputs and computed values are thoroughly sanity checked to prevent
             run-time exceptions. If anything is out of order, an empty string is
             returned.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.LengthOfLongestString(System.String[])">
            <summary>
            Given an array of strings, return the length of the longest string.
            </summary>
            <param name="pastrTheseStrings">
            The list of strings to evaluate is supplied as an array of strings,
            which may be an anonymous array, constructed on the fly in the
            argument list.
            </param>
            <returns>
            The return value is the length of the longest string. If the array
            is empty or is composed entirely of empty strings, the return value
            is zero. Since it begins with a null reference test, this routine is
            always successful.
            </returns>
            <remarks>
            Feed the return value to the PadRight method on a string to get back
            a string that, when used as a label, yields vertically aligned data.
            </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String)">
             <summary>
             Given a string containing the name of a form control (field) or
             other token, create its place holder token.
             </summary>
             <param name="pstrFieldName">
             String containing the name of the token.
             </param>
             <returns>
             String containing the text of the corresponding template text place
             holder. See Remarks.
             </returns>
             <remarks>
             The string is constructed by appending a standard token delimiter,
             which is a pair of dollar signs, to each end of the string.
            
             The token is exposed as a static property, DEFAULT_TOKEN_DELM.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.MakeToken(System.String,System.String)">
            <summary>
            Given a string containing the name of a form control (field) or
            other token, and another string containing a static token, create
            its place holder token.
            </summary>
            <param name="pstrFieldName">
            String containing the name of the token.
            </param>
            <param name="pstrTokenEnds"></param>
            <returns>
            The string is constructed by appending the token delimiter specified
            in argument pstrTokenEnds to both ends of the string specified in
            argument pstrFieldName.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.QuoteString(System.String)">
            <summary>
            Append a quote character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <returns>
            String with quote character at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.EncloseInChar(System.String,System.Char)">
            <summary>
            Append a specified character to both ends of a string, unless it is
            already present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the character
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to append, if absent.
            </param>
            <returns>
            String with character pchrEnd at both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndQuotes(System.String)">
            <summary>
            Remove ending quotation marks from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with quotes.
            </param>
            <returns>
            String with ending quotes, if present, removed.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.RemoveEndChars(System.String,System.Char)">
            <summary>
            Remove ending character, such as brackets, from a string, if present.
            </summary>
            <param name="pstrIn">
            String to evaluate, which may, or may not, end with the characterr
            specified in pchrEnd.
            </param>
            <param name="pchrEnd">
            Character to remove, if present.
            </param>
            <returns>
            String with character pchrEnd removed from both ends.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceToken(System.String,System.String,System.String)">
             <summary>
             Given a string of text, another string of place holder text, which
             occurs zero or more times in the input string, return a string in
             which the place holder text is replaced with new text, supplied by
             the third argument.
             </summary>
             <param name="pstrToSearch">
             String to be searched and changed.
             </param>
             <param name="pstrToFind">
             String to be found and replaced.
             </param>
             <param name="strReplaceWith">
             String to substitute for all occurrences of string pstrToFind.
             </param>
             <returns>
             String pstrToSearch, with all occurrences of string pstrToFind
             replaced with string strReplaceWith.
             </returns>
             <remarks>
             The Replace method of the String class behaves in a way that is
             counterintuitive to me, although this behavior is a direct
             consequence of, and consistent with, the characterization of strings
             as immutable objects.
            
             Unlike the Replace method of a String object, this static method
             returns a new String object.
            
             As a bonus, this function accepts string constants for all three
             arguments, although their most practical application is for the
             first two. This overcomes the second, and, in some ways, most
             serious, limitation of the Replace method on a String object, which
             is that string constants are devoid of a Replace method.
            
             One last dirty little secret; this method actually calls the Replace
             method on argument pstrToSearch, which is, in all cases, a first
             class String object, sporting a full complement of properties and
             methods.
            
             Say it's syntactic sugar if you insist, but I'll keep using it in my
             code, and may eventually implement a version that takes references
             as arguments.
             </remarks>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Given a string containing tokens of the form "^^ListKeyValue^^"
            where ListKeyValue is the value of a key in the pnvcList collection,
            which may or may not exist in the collection, replace all such
            tokens with the contents of the like named value in the collection.
            </summary>
            <param name="pstrMsg">
            String containing the message containing the substitution tokens.
            </param>
            <param name="pnvcList">
            A NameValueCollection, in which each key represents a token, and its
            value represents the value to be substituted for it.
            </param>
            <returns>
            String with tokens replaced, and tokens that have no corresponding
            object in the pnvcList collection preserved.
            </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection)">
             <summary>
             Replace place holders (markers) with the value of the corresponding
             form control (field), or a default value, if the field is empty and
             a default is designated.
             </summary>
             <param name="pstrTemplate">
             String containing a template containing the text and place markers.
             </param>
             <param name="pnvcFields">
             NameValueCollection containing the form control (field) values.
             </param>
             <param name="pnvcDefaults">
             NameValueCollection containing the form control (field) or token
             default values.
            
             Default values are optional. If omitted, the method substitutes an
             empty string.
             </param>
             <returns>
             String containing the text in the template, with all tokens
             formatted with default endings replaced by the contents of the
             corresponding, and like named, control (field) on the input form.
            
             Tokens bounded by "##" are replaced by strings from the Session
             variables collection. The same defaults collection is used for both.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named value in the collection.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents o object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ReplaceTokensFromList(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
             <summary>
             Given a string containing tokens of the form "^^ListKeyValue^^"
             where ListKeyValue is the value of a key in the pnvcList collection,
             which may or may not exist in the collection, replace all such
             tokens with the contents of the like named session object.
             </summary>
             <param name="pstrMsg">
             String containing the message containing the substitution tokens.
             </param>
             <param name="pdctList">
             A Dictionary, in which each key represents a token, and its value
             represents the value to be substituted for it.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pdctDefaults">
             A Dictionary, in which each key represents a token, and its value
             represents the default value to be substituted for it, if there is
             no corresponding key in dictionary pdctList.
            
             The Dictionary may contain anything, as it accepts any Object. The
             required substitution string is obtained by calling the default
             ToString method on each Object. To supply a format string, which
             will be applied to each Object, in turn, use the next overload.
             </param>
             <param name="pstrFormat">
             Format string, acceptable to the static String.Format method, which
             is used to format the string representation of each object.
            
             The string must contain a "[0}" placeholder, which may occur one or
             more times in the format string, which is replaced by the string
             returned by the ToString method of each object.
             </param>
             <returns>
             String with tokens replaced, and tokens that have no corresponding
             object in the pnvcList OR the pdctDefaults collection preserved.
             </returns>
        </member>
        <member name="M:WizardWrx.StringTricks.ParseCommentInHTMLComment(System.String)">
            <summary>
            Extract parameters, expressed as key-value pairs, from a standard
            HTML comment.
            </summary>
            <param name="pstrInput">
            String containing a well formed HTML comment, surrounding the
            key-value pairs. If the string is not a well formed HTML comment,
            with a single space between the comment delimiters and the body,
            or the string is null or empty, the returned collection is empty.
            </param>
            <returns>
            A NameValueCollection of parameter names and values, which may be
            empty, but is guaranteed to be returned, empty or not.
            </returns>
            <example>
            Parse this: <!-- ForPage=default;UseTable=False -->
            
            Return this:
            
            		=======================
            		Name		Value
            		-----------	-----------
            		ForPage		default
            		UseTable	False
            		=======================
            		
            The returned NameValueCollection contains two members.
            
            Since this method guarantees to return an initialized
            NameValueCollection, the empty collection is allocated by the first
            statement, and is unconditionally returned by the last statement.
            </example>
        </member>
        <member name="M:WizardWrx.StringTricks.Truncate(System.String,System.Int32)">
             <summary>
             Supply the missing Truncate function to members of the String class.
             </summary>
             <param name="pstrSource">
             String to truncate, if it is longer than pintMaxLength.
            
             A null string is treated as an empty string, and the return value
             for either is an empty string.
             </param>
             <param name="pintMaxLength">
             Desired maximum length of the returned string. If pstrSource is
             longer than pintMaxLength characters, the first pintMaxLength are
             returned. Otherwise, the whole string is returned.
            
             If pintMaxLength is less than or equal to zero, an empty string is
             returned.
             </param>
             <returns>
             If the string length is less than or equal to the specified maximum
             length, the whole string is returned.
            
             Otherwise, the first pintMaxLength characters are returned.
            
             Regardless, the return value is a new System.String object.
             </returns>
        </member>
        <member name="T:WizardWrx.DLLServices2.SyncRoot">
            <summary>
            Use instances of this class to provide classes that must be made
            thread-safe with locks over which the class has complete control.
            </summary>
            <remarks>
            Use labeled instances when you expect to have multiple locks active,
            especially during the lifetime of a single method, or across calls to
            two or more related methods.
            
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="F:WizardWrx.DLLServices2.SyncRoot._strLabel">
            <summary>
            This string provides internal storage for the optional object label.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.SyncRoot.#ctor">
            <summary>
            Create an unlabeled instance.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.SyncRoot.#ctor(System.String)">
            <summary>
            Create a labeled lockable object.
            </summary>
            <param name="pstrLabel">
            Label to assign to the instance.
            </param>
        </member>
        <member name="P:WizardWrx.DLLServices2.SyncRoot.Label">
            <summary>
            Return the label assigned to this instance. Labels are read only.
            You must use the overloaded constructor to create a labeled
            instance.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.SysDateFormatters">
            <summary>
            This class implements my stalwart date formatter, ReformatSysDateP6C,
            which I created initially as a Windows Interface Language (WIL, 
            a. k. a. WinBatch) library function, Reformat_Date_YmdHms_P6C, in
            October 2001, although its roots go back much further in my WIL script
            development.
            
            Since static classes are implicitly sealed, this class cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.DLLServices2.DisplayFormats"/>
            <seealso cref="T:WizardWrx.DLLServices2.TimeDisplayFormatter"/>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_YYYY_MM_DD">
            <summary>
            Apply the following format to a date: YYYY/MM/DD
            
            With respect to the date only, this format confirms to the ISO 8601
            standard for time representation.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_MM_DD_YY">
            <summary>
            Apply the following format to a date: MM/DD/YY
            
            This is the standard short format used in the USA.
            
            Only the date is returned, including only the year of century, and
            the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_MM_DD_YYYY">
            <summary>
            Apply the following format to a date: MM/DD/YYYY
            
            This is the standard format used in the USA.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_DD_MM_YYYY">
            <summary>
            Apply the following format to a date: DD/MM/YYYY
            
            This is the standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_HH_MM">
            <summary>
            Apply the following format to a time: hh:mm
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This is a standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the time is returned, and the hour and minute have leading
            zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_HH_MM_SS">
            <summary>
            Apply the following format to a time: hh:mm:ss
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This is a standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the time is returned, and the hour, minute, and second have 
            leading zeros if any of them is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_HH_MM_SS_TTT">
            <summary>
            Apply the following format to a time: hh:mm:ss.ttt
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            The final token, ttt, is the milliseconds portion of the time,
            which is reported with leading zeros.
            
            This is an extension of a standard format used in most of the
            English speaking world, by all military organizations of which I am
            aware, Europeans, and others who take their lead from any of the
            above groups.
            
            Only the time is returned, and the hour, minute, and second have 
            leading zeros if any of them is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_YYYY_MM_DD_HH_MM_SS">
            <summary>
            Apply the following format to a date and time: YYYY/MM/DD hh:mm:ss
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This format conforms fully to the ISO 8601 standard for time
            representation.
            
            The month, day, hour, minute, and second have leading zeros if any
            of them is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_YYYY_MM_DD_HH_MM_SS_TTT">
            <summary>
            Apply the following format to a date and time: YYYY/MM/DD hh:mm:ss.ttt
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This format conforms fully to the ISO 8601 standard for time
            representation.
            
            The final token, ttt, is the milliseconds portion of the time,
            which is reported with leading zeros.
            
            The month, day, hour, minute, and second have leading zeros if any
            of them is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WWW_DD_MM_YYYY">
            <summary>
            Apply the following format to a date: WWW DD/MM/YYYY
            
            The first token, WWW, represents the three letter abbreviation of
            the weekday name, which is derived from the regional settings in the
            Windows Control Panel. The returned string conforms to the settings
            in the UICulture of the calling thread.
            
            This is the standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WWW_MM_DD_YYYY">
            <summary>
            Apply the following format to a date: WWW DD/MM/YYYY
            
            The first token, WWW, represents the three letter abbreviation of
            the weekday name, which is derived from the regional settings in the
            Windows Control Panel. The returned string conforms to the settings
            in the UICulture of the calling thread.
            
            This is the standard format used in the USA.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WW_DD_MM_YYYY">
            <summary>
            Apply the following format to a date: WW DD/MM/YYYY
            
            The first token, WW, represents enough of the three letter weekday
            name abbreviation, which is derived from the regional settings in
            the Windows Control Panel, to uniquely identify the weekday. The
            returned string conforms to the settings in the UICulture of the
            calling thread.
            
            This is the standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WW_MM_DD_YYYY">
            <summary>
            Apply the following format to a date: WW DD/MM/YYYY
            
            The first token, WW, represents enough of the three letter weekday
            name abbreviation, which is derived from the regional settings in
            the Windows Control Panel, to uniquely identify the weekday. The
            returned string conforms to the settings in the UICulture of the
            calling thread.
            
            This is the standard format used in the USA.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WWWW_DD_MM_YYYY">
            <summary>
            Apply the following format to a date: WWWW DD/MM/YYYY
            
            The first token, WWWW, represents full name of the weekday, which is
            derived from the regional settings in the Windows Control Panel. The
            returned string conforms to the settings in the UICulture of the
            calling thread.
            
            This is the standard format used in most of the English speaking
            world, by all military organizations of which I am aware, Europeans,
            and others who take their lead from any of the above groups.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFD_WWWW_MM_DD_YYYY">
            <summary>
            Apply the following format to a date: WWWW DD/MM/YYYY
            
            The first token, WWWW, represents full name of the weekday, which is
            derived from the regional settings in the Windows Control Panel. The
            returned string conforms to the settings in the UICulture of the
            calling thread.
            
            This is the standard format used in the USA.
            
            Only the date is returned, all four digits of the year are included,
            and the month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFDYYYYMMDD_HHMMSS">
            <summary>
            Apply the following format to a date and time: YYYYMMDD_hhmmss
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This format conforms fully to the ISO 8601 standard for time
            representation.
            
            The month, day, hour, minute, and second have leading zeros if any
            of them is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFDYYYYMMDD">
            <summary>
            Apply the following format to a date and time: YYYYMMDD
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This format conforms fully to the ISO 8601 standard for time
            representation.
            
            The month and day have leading zeros if either is less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RFDHHMMSS">
            <summary>
            Apply the following format to a date and time: hhmmss
            
            The returned string represents the hours on a 24 hour clock.
            
            At present, 12 hour (AM/PM) representation is unsupported.
            
            This format conforms fully to the ISO 8601 standard for time
            representation.
            
            The hour, minute, and second have leading zeros if any of them is
            less than 10.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.SysDateFormatters.RSD_TOKENS">
            <summary>
            The strings in this array are the substitution tokens supported by
            the date formatters in this class.
            </summary>
        </member>
        <member name="M:WizardWrx.DLLServices2.SysDateFormatters.ReformatNow(System.String)">
            <summary>
            This method has a nearly exact analogue in the constellations of WIL
            User Defined Functions that gave rise to its immediate predecessor,
            a like named function implemented in straight C, with a little help
            from the Windows National Language Subsystem, which underlies the
            CultureInfo class.
            </summary>
            <param name="pstrFormat">
            This System.String is a combination of tokens and literal text that
            governs the formatting of the date.
            </param>
            <returns>
            The return value is a string containing the current date and time,
            formatted according to the rules spelled out in format string
            pstrFormat.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.SysDateFormatters.ReformatUtcNow(System.String)">
            <summary>
            In the original constellation of WinBatch functions and their C
            descendants, this function took the form of an optional argument to
            ReformatNow. I think I prefer this way.
            </summary>
            <param name="pstrFormat">
            This System.String is a combination of tokens and literal text that
            governs the formatting of the date.
            </param>
            <returns>
            The return value is a string containing the current UTC time,
            formatted according to the rules spelled out in format string
            pstrFormat.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.SysDateFormatters.ReformatSysDate(System.DateTime,System.String)">
            <summary>
            ReformatSysDate is the core function of the constellation of
            routines that grew from the original WIL script. Substitution tokens
            drive construction of a formatted date string.
            </summary>
            <param name="pdtm">
            This System.DateTime is the time to be formatted.
            </param>
            <param name="pstrFormat">
            This System.String is a combination of tokens and literal text that
            governs the formatting of the date.
            </param>
            <returns>
            The return value is a string containing the date and/or time in
            argument pdtm, formatted according to the rules spelled out in
            format string pstrFormat.
            </returns>
        </member>
        <member name="T:WizardWrx.TextBlocks">
            <summary>
            Methods for creating and manipulating test blocks.
            </summary>
        </member>
        <member name="F:WizardWrx.TextBlocks.BLOCK_BEGIN_TEXT">
            <summary>
            My text block begin markers always end with this string.
            </summary>
        </member>
        <member name="F:WizardWrx.TextBlocks.BLOCK_END_TEXT">
            <summary>
            My text block ending markers always end with this string.
            </summary>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor">
            <summary>
            The default constructor creates an empty class. Its MarkerText
            property must be set before its other properties are useful.
            </summary>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor(System.String)">
            <summary>
            This overload creates an empty class, and initializes its MarkerText
            property.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
        </member>
        <member name="M:WizardWrx.TextBlocks.#ctor(System.String,System.String)">
            <summary>
            This overload creates an empty class, and initializes its rInputData
            and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock">
            <summary>
            Extract a block marked by text constructed from the string in the
            MarkerText property from the text in the InputData property.
            </summary>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock(System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in the InputData property, and
            update the MarkerText property.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlock(System.String,System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Text between block markers. If the prefix marker is followed by a
            newline, the newline is removed. Likewise, if the suffix marker is
            preceded by a newline, that newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray(System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.ExtractBlockToArray(System.String,System.String)">
            <summary>
            Extract a block marked by text constructed from the string in
            argument pstrMarkerText from the text in argument pstrInputData.
            Update the InputData and MarkerText properties.
            </summary>
            <param name="pstrInputData">
            String containing text from which marked blocks will be extracted.
            Also sets the InputData property.
            </param>
            <param name="pstrMarkerText">
            String containing text from which marker prefixes and suffixes are
            constructed. Also sets the MarkerText property.
            </param>
            <returns>
            Array of strings containing the text between block markers. If the
            prefix marker is followed by a newline, the newline is removed.
            Likewise, if the suffix marker is preceded by a newline, that
            newline is also removed.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.CharToArray(System.Char)">
            <summary>
            Return a one-element array containing the input character.
            </summary>
            <param name="pchr">
            Character to place into the returned array.
            </param>
            <returns>
            Array of characters, containing exactly one element, which contains
            the single input character.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringOfLinesToArray(System.String)">
            <summary>
            Split a string containing lines of text into an array of strings.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings.
            </returns>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringOfLinesToArray(System.String,System.StringSplitOptions)">
            <summary>
            Split a string containing lines of text into an array of strings,
            as modified by the StringSplitOptions flag.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings unless penmStringSplitOptions is RemoveEmptyEntries,
            as is most likely to be the case.
            </returns>
            <remarks>
            Use this overload to convert a string, discarding blank lines.
            </remarks>
        </member>
        <member name="M:WizardWrx.TextBlocks.StringToArray(System.String)">
            <summary>
            Return a one-element array containing the input string.
            </summary>
            <param name="pstr">
            String to place into the returned array.
            </param>
            <returns>
            Array of strings, containing exactly one element, which contains
            the single input string.
            </returns>
        </member>
        <member name="P:WizardWrx.TextBlocks.InputData">
            <summary>
            String from which to extract blocks.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.MarkerText">
            <summary>
            This is the text that forms the middle (and variable) part of the 
            TextBlocks marker strings.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.Prefix">
            <summary>
            Construct, on the fly, and return, the block prefix.
            </summary>
        </member>
        <member name="P:WizardWrx.TextBlocks.Suffix">
            <summary>
            Construct, on the fly, and return, the block suffix.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.TimeDisplayFormatter">
            <summary>
            Use instances of this class to return dates and times, uniformly
            formatted by rules set by way of its properties.
            
            This class is sealed, and cannot be inherited.
            </summary>
            <seealso cref="T:WizardWrx.DLLServices2.DisplayFormats"/>
            <seealso cref="T:WizardWrx.DLLServices2.SysDateFormatters"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.TimeDisplayFormatter.#ctor">
             <summary>
             The default constructor initializes an instance that follows the
             default preferences built into the class. Hence, methods called on
             objects created by it are guaranteed to yield a usable string unless
             the DateTime value supplied to the method is, itself, invalid.
             </summary>
             <remarks>
             Rather than attempt to create the numerous constructors that would
             be required to cover every possible combination of properties, there
             is just one constructor. All properties are read-write. Use them to
             change the operating parameters.
            
             If you always use the same combination of settings, you can wrap
             your own class around an instance of this one.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.TimeDisplayFormatter.FormatThisTime(System.DateTime)">
            <summary>
            Format the specified time.
            </summary>
            <param name="pdtmThisTime">
            The DateTime instance to format.
            </param>
            <returns>
            The input time, formatted as dictated by the current settings of the
            properties of the class instance.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.TimeDisplayFormatter.FormatCurrentTime">
            <summary>
            Format the current time.
            </summary>
            <returns>
            The current time, formatted as dictated by the current settings of
            the properties of the class instance.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.TimeDisplayFormatter.GetTimeZoneForTime(System.DateTime)">
            <summary>
            Return the time zone name that corresponds to a local time.
            </summary>
            <param name="pdtmTheTime">
            Specify the System.DateTime for which the correct time zone string
            is required.
            </param>
            <returns>
            If the DateTimeKind of argument pdtmTheTime is Local, the return
            value is a string representation of the spelled out time zone name.
            Otherwise, an ArgumentException is thrown.
            </returns>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.CalendarDateFormat">
            <summary>
            Set this property to override the default formatting of calendar
            dates, which is governed by the active CultureInfo settings, which
            are, themselves, governed by the active Regional Settings of the
            operating system.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.HoursFormat">
             <summary>
             Set the display format for hours. See the HoursFormatType enumeration
             for more details.
             
             When the value is DateFieldOrder.CultureInfoShortDate, the
             HoursFormat and TimePrecision properties are ignored.
            
             The default format is Military, and the value must be a member of
             the HoursFormatType enumeration. If an invalid value is specified, a
             System.ArgumentOutOfRangeException exception is thrown, and the
             property value is unchanged.
            
             When the value of this property is CultureInfoShortTime, the
             TimePrecision property is ignored.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.MachineTimeZone">
            <summary>
            This static property provides convenience access to the
            CurrentTimeZone property maintained in a static TimeZone instance
            for its own use.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.ShowAmPmAsUC">
             <summary>
             Set this property to TRUE to have the AM and PM tokens displayed in
             upper case.
            
             Unless the HoursFormat property is HoursFormatType.Civilian, this
             property is ignored.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.ShowTimeZone">
             <summary>
             Set this property to TRUE to have the local time zone displayed with
             the time. By default, the time zone is omitted.
            
             This property is applied independently of the HoursFormatType and
             Precision properties.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.ShowWeekday">
             <summary>
             Set this property to TRUE to have the local weekday name displayed
             with the time. By default, the weekday name is omitted.
            
             This property is applied independently of the HoursFormatType and
             Precision properties.
             </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecision">
             <summary>
             This property governs the precision used for time displays. The
             class default is HMST.
            
             When the value of the HoursFormat property is CultureInfoShortTime,
             the value of this property is ignored.
            
             For additional information, see the TimePrecisionType enumeration.
             </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder">
            <summary>
            Indicate the format to use for displaying the calendar date.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.CultureInfoShortDate">
            <summary>
            Use the ShortDate format defined in the current CultureInfo.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.MMDDYYYY">
            <summary>
            Display Month, Day, and Year, showing all four digits of the year.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.YYYYMMDD">
            <summary>
            Display Year, Month, and Day, showing all four digits of the year.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.DDMMYYYY">
            <summary>
            Display Day, Month, and Year, showing all four digits of the year.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.MMDDYY">
            <summary>
            Display Month, Day, and Year, discarding the century from the year.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.YYMMDD">
            <summary>
            Display Year, Month, and Day, discarding the century from the year.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.DateFieldOrder.DDMMYY">
            <summary>
            Display Day, Month, and Year, discarding the century from the year.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.TimeDisplayFormatter.HoursFormatType">
            <summary>
            Indicate time format to use (CultureInfoShortTime, Civilian, or
            Military).
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.HoursFormatType.CultureInfoShortTime">
            <summary>
            Use the ShortTime format defined in the current CultureInfo.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.HoursFormatType.Civilian">
            <summary>
            Use civilian (12 hour) display format.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.HoursFormatType.Military">
            <summary>
            Use Military (24 hour) display format.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecisionType">
            <summary>
            Indicate the precision to use for the time display. The class
            default is HMST.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecisionType.HM">
            <summary>
            Display only hours and minutes (HH:MM).
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecisionType.HMS">
            <summary>
            Display hours, minutes, and seconds (HH:MM:SS).
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecisionType.HMST">
            <summary>
            Display hours, minutes, seconds, and milliseconds.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.TimeDisplayFormatter.TimePrecisionType.HMSTN">
            <summary>
            Display hours, minutes, seconds, milliseconds, and ticks.
            </summary>
        </member>
        <member name="T:WizardWrx.DLLServices2.Util">
             <summary>
             This static class exposes utility constants and methods that run the
             gamut from syntactic sugar to functions that hide useful, but somewhat
             obscure capabilities of the Microsoft Base Class Library, and don't fit
             neatly into another class.
            
             Since static classes are implicitly sealed, this class cannot be inherited.
             </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.Util.BYTES_TO_STRING_BLOCK_OF_4">
            <summary>
            Use this to set ByteArrayToHexDigitString argument puintGroupSize to
            insert a space between every 4th byte.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.Util.BYTES_TO_STRING_BLOCK_OF_8">
            <summary>
            Use this to set ByteArrayToHexDigitString argument puintGroupSize to
            insert a space between every 8th byte.
            </summary>
        </member>
        <member name="F:WizardWrx.DLLServices2.Util.BYTES_TO_STRING_NO_SPACING">
            <summary>
            Use this to set ByteArrayToHexDigitString argument puintGroupSize to
            format the string without any spaces.
            </summary>
            <remarks>
            This constant is intended primarily for internal use by the first
            overload, which omits the second argument, to call the second
            overload, which does the work.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.ByteArrayToHexDigitString(System.Byte[])">
            <summary>
            Convert a byte array into a printable hexadecimal representation.
            </summary>
            <param name="pbytInputData">
            Specify the byte array to be formatted. Any byte array will do.
            </param>
            <returns>
            The return value is a string that contains two characters for each
            byte in the array.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.ByteArrayToHexDigitString(System.Byte[],System.UInt32)">
            <summary>
            Convert a byte array into a printable hexadecimal representation.
            </summary>
            <param name="pbytInputData">
            Specify the byte array to be formatted. Any byte array will do.
            </param>
            <param name="puintGroupSize">
            Specify the number of bytes to display as a group.
            </param>
            <returns>
            The return value is a string that contains two characters for each
            byte in the array, plus one space between every puintGroupSizeth
            byte.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.FileMatchesRegExpMask(System.String,System.String)">
            <summary>
            Match file names against a true regular expression, as opposed to
            the anemic masks supported by DOS and Windows. Though occasionally
            referred to as regular expressions, file specifications that use
            DOS wild cards are a far cry from true regular expressions.
            </summary>
            <param name="pstrPathString">
            Specify the path string to match against PCRE pstrRegExpToMatch.
            </param>
            <param name="pstrRegExpToMatch">
            Specify the Perl Compatible Regular Expression against which to
            evaluate pstrFileName.
            </param>
            <returns>
            The function returns TRUE if neither string is null or empty AND
            pstrRegExpToMatch matches PCRE pstrFileName.
            </returns>
            <remarks>
            This method could have been coded inline. However, since I have at
            least one other project in the works that requires it, I segregated
            it in this routine in this small, easily navigable class.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.GetAssemblyGuidString(System.Reflection.Assembly)">
            <summary>
            Get the GUID string (Registry format) attached to an assembly.
            </summary>
            <param name="pasm">
            Assembly from which to return the GUID string.
            </param>
            <returns>
            If the method succeeds, the return value is the GUID attached to it
            and intended to be associated with its type library if the assembly
            is exposed to COM.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.LoadTextFileFromCallingAssembly(System.String)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            the assembly as a embedded resource into an array of native strings.
            </summary>
            <param name="pstrResourceName">
            Specify the fully qualified resource name, which is its source file
            name appended to the default application namespace.
            </param>
            <returns>
            The return value is an array of Unicode strings, each of which is
            the text of a line from the original text file, sans terminator.
            </returns>
            <see cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromEntryAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.LoadTextFileFromEntryAssembly(System.String)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            the assembly as a embedded resource into an array of native strings.
            </summary>
            <param name="pstrResourceName">
            Specify the fully qualified resource name, which is its source file
            name appended to the default application namespace.
            </param>
            <returns>
            The return value is an array of Unicode strings, each of which is
            the text of a line from the original text file, sans terminator.
            </returns>
            <see cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromCallingAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.LoadTextFileFromAnyAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Load the lines of a plain ASCII text file that has been stored with
            a specified assembly as a embedded resource into an array of native
            strings.
            </summary>
            <param name="pstrResourceName">
            Specify the fully qualified resource name, which is its source file
            name appended to the default application namespace.
            </param>
            <param name="pasmSource">
            Pass in a reference to the Assembly from which you expect to load
            the text file. Use any means at your disposal to obtain a reference
            from the System.Reflection namespace.
            </param>
            <returns></returns>
            <seealso cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromCallingAssembly(System.String)"/>
            <seealso cref="M:WizardWrx.DLLServices2.Util.LoadTextFileFromEntryAssembly(System.String)"/>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.LoadBinaryResourceFromAnyAssembly(System.String,System.Reflection.Assembly)">
             <summary>
             Load the named embedded binary resource into a byte array.
             </summary>
             <param name="pstrResourceName">
             Specify the external name of the file as it appears in the source
             file tree and the Solution Explorer.
             </param>
             <param name="pasmSource">
             Supply a System.Reflection.Assembly reference to the assembly that
             contains the embedded resource.
             </param>
             <returns>
             If the function succeeds, it returns a byte array containing the raw
             bytes that comprise the embedded resource. Hence, this method can
             load ANY embedded resource.
             </returns>
             <remarks>
             Since all other resource types ultimately come out as byte arrays,
             the text file loaders call upon this routine to extract their data.
            
             The notes in the cited reference refreshed my memory of observations
             that I made and documented a couple of weeks ago. However, it was a
             lot easier to let Google find a reference document, which was
             probably intended for students in the Computer Science department at
             Columbia University, at http://www1.cs.columbia.edu/~lok/csharp/refdocs/System.IO/types/Stream.html"/>,
             than find my own source.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.SafeConsoleClear">
             <summary>
             Use this method as a non-throwing replacement for Console.Clear,
             which throws an System.IO.IOException exception if the standard
             output stream is redirected. This catches that exception, and
             casts it to an instance of EnhancedIOException, which is derived from
             System.IO.IOException.
             </summary>
             <remarks>
             This feat is accomplished by a round trip through SerializeObject,
             followed immediately by DeserializeObject, both static methods on
             the JsonConvert object. These tactics give me read only access to
             the HResult, which is hidden in version 2.0 of the .NET Framework.
            
             Comparing the HResult to a local constant, E_HANDLE, means that the
             error test works correctly in any locale.
            
             Thankfully, Microsoft came to their senses, and made the HResult
             visible in later frameworks.
             </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.ShowKeyAssemblyProperties(System.Reflection.Assembly)">
            <summary>
            List selected properties of any assembly on a console.
            </summary>
            <param name="pmyLib">
            Pass in a reference to the desired assembly, which may be the
            assembly that exports a specified type, the executing assembly, the
            calling assembly, the entry assembly, or any other assembly for
            which you can obtain a reference.
            </param>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.StringFromANSICharacterArray(System.Byte[])">
            <summary>
            Transform an array of bytes, each representing one ANSI character, into a string.
            </summary>
            <param name="pabytWholeFile">
            Specify the array to transform.
            </param>
            <returns>
            The specified array is returned as a string.
            </returns>
            <remarks>
            I did this refactoring, thinking that I had a new use for the code,
            only to realize as I finished cleaning it up that I can't use it,
            because it deals in ANSI characters, and my present need involves
            Unicode characters. Nevertheless, the exercise is not a total loss,
            because it reminded me of the trick that I needed to transform the
            array of Unicode characters into a string.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.StringOfLinesToArray(System.String)">
            <summary>
            Split a string containing lines of text into an array of strings.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.StringOfLinesToArray(System.String,System.StringSplitOptions)">
            <summary>
            Split a string containing lines of text into an array of strings,
            as modified by the StringSplitOptions flag.
            </summary>
            <param name="pstrLines">
            String containing lines of text, terminated by CR/LF pairs.
            </param>
            <param name="penmStringSplitOptions">
            A member of the StringSplitOptions enumeration, presumably other
            than StringSplitOptions.None, which is assumed by the first
            overload. The only option supported by version 2 of the Microsoft
            .NET CLR is RemoveEmptyEntries.
            </param>
            <returns>
            Array of strings, one line per string. Blank lines are preserved as
            empty strings unless penmStringSplitOptions is RemoveEmptyEntries,
            as is most likely to be the case.
            </returns>
            <remarks>
            Use this overload to convert a string, discarding blank lines.
            </remarks>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.StringToArray(System.String)">
            <summary>
            Return a one-element array containing the input string.
            </summary>
            <param name="pstr">
            String to place into the returned array.
            </param>
            <returns>
            Array of strings, containing exactly one element, which contains
            the single input string.
            </returns>
        </member>
        <member name="M:WizardWrx.DLLServices2.Util.GetInternalResourceName(System.String,System.Reflection.Assembly)">
            <summary>
            Use the list of Manifest Resource Names returned by method
            GetManifestResourceNames on a specified assembly. Each of several
            methods employs a different mechanism to identify the assembly of
            interest.
            </summary>
            <param name="pstrResourceName">
            Specify the name of the file from which the embedded resource was
            created. Typically, this will be the local name of the file in the
            source code tree.
            </param>
            <param name="pasmSource">
            Pass a reference to the Assembly that is supposed to contain the
            desired resource.
            </param>
            <returns>
            If the function succeeds, the return value is the internal name of
            the requested resource, which is fed to GetManifestResourceStream on
            the same assembly, which returns a read-only Stream backed by the
            embedded resource. If the specified resource is not found, it
            returns null.
            </returns>
            <remarks>
            Since I cannot imagine any use for this method beyond its
            infrastructure role in this class, I marked it private.
            </remarks>
        </member>
        <member name="T:WizardWrx.DLLServices2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ARGNAME_PENMCONSTRUCTIONSTAGE">
            <summary>
              Looks up a localized string similar to penmConstructionStage.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.DEFAULT_EVENT_SOURCE_ID">
            <summary>
              Looks up a localized string similar to DefaultWindowsEventSourceID.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.EMPTY_ALIAS_LIST">
            <summary>
              Looks up a localized string similar to The list of aliases is empty..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_ARG_IS_NULL">
            <summary>
              Looks up a localized string similar to The specified argument is a null reference..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_ARG_IS_NULL_OR_EMPTY">
            <summary>
              Looks up a localized string similar to The argument is a null reference or the empty string..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_ARGNAME_TPL">
            <summary>
              Looks up a localized string similar to Argument Name    = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_ARGVALUE_TPL">
            <summary>
              Looks up a localized string similar to Argument Value   = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_ASM_SUBSYSTEM">
            <summary>
              Looks up a localized string similar to While attempting to identify the subsystem of {0}, GetExeSubsystem returned exit code {1}: {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_CONFIG_FILE_IS_EMPTY">
            <summary>
              Looks up a localized string similar to The specified DLL configuration file, {0}, exists, but is empty.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_DUPLICATE_SWITCH">
            <summary>
              Looks up a localized string similar to Switch {0} with a default value of {1} is a duplicate..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_NOT_FOUND">
            <summary>
              Looks up a localized string similar to Resource {0} cannot be found in assembly {1}..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_READ_ERROR">
            <summary>
              Looks up a localized string similar to An error occurred while reading data from resources embedded in an assembly.{3}Assembly Full Name     = {0}{3}Internal Resource Name = {1}{3}I/O Error Message      = {2}{3}{3}The associated Inner Exception may contain additional clues..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EMBEDDED_RESOURCE_READ_TRUNCATED">
            <summary>
              Looks up a localized string similar to An error occurred while reading a file from resources embedded in an assembly.{3}Internal Name = {0}{3}Expected File Length (bytes) = {1}{3}Bytes successfully read = {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EX_EVTMSG_TPL">
            <summary>
              Looks up a localized string similar to An {0} exception was caught in routine {1}:{3}               Message          = {2}{3}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EX_MSG_TPL">
            <summary>
              Looks up a localized string similar to An {0} exception was caught in routine {1}:{3}               Message          = {2}{3}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_EXCEPTION_IN_DEFINE_NEW_SWITCH">
            <summary>
              Looks up a localized string similar to An {0} Exception was caught while attempting to define a switch named {1} with a default value of {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_FILENAME_TPL">
            <summary>
              Looks up a localized string similar to File Name        = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_FORMATSTRING_TPL">
            <summary>
              Looks up a localized string similar to Format String    = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_HRESULT">
            <summary>
              Looks up a localized string similar to HRESULT = {0} ({1} decimal){2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_INNER">
            <summary>
              Looks up a localized string similar to Inner Exception:{1}               Message          = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_INTEGER2HEXSTR_INVALID_INPUT">
            <summary>
              Looks up a localized string similar to The type of the first argument, pintegralValue, is invalid.{2}Argument value = {0}{2}Argument type  = {1}{2}{2}Limitations of the underlying formatting engine{2}restrict this method to integral types.{2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_INVALID_ERROREXITOPTIONS">
            <summary>
              Looks up a localized string similar to An internal error has occurred.{1}Internal routine GetReservedErrorMessage was called with an invalid ErrorExitOptions value of {0}..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_METHOD">
            <summary>
              Looks up a localized string similar to Exception Method = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_MISSING_CONFIG_FILE">
            <summary>
              Looks up a localized string similar to There is no valid configuration file for DLL file {0}..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_NULL_EnhancedIOException">
            <summary>
              Looks up a localized string similar to The EnhancedIOException is unexpectedly null, probably due to an internal error..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_OBJNAME_TPL">
            <summary>
              Looks up a localized string similar to Object Name      = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_RUNTIME_SEE_EVENT_LOG">
            <summary>
              Looks up a localized string similar to A run-time exception forced the program to end prematurely.{0}Pleasr see he (0) event log for a message with event source = (0)..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_RUNTIME_SEE_MESSAGE_ABOVE">
            <summary>
              Looks up a localized string similar to A run-time exception forced the program to end prematurely.{0}Please see the message just above this line..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_SOURCE">
            <summary>
              Looks up a localized string similar to Exception Source = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_STD_HANDLE_STATE">
            <summary>
              Looks up a localized string similar to The StandardHandleState routine reported an exception.\nException Code = 0x{0} ({1} decimal): {2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.ERRMSG_UNBALANCED">
            <summary>
              Looks up a localized string similar to The sizes of internal tables s_astrTrimStart and s_astrExceptionTypeNames are unequal.{2}    s_astrTrimStart Elemnent Count          = {0}{2}    s_astrExceptionTypeNames  Elemnent Count = {1}{2}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.FATAL_EXCEPTION_BACKCOLOR">
            <summary>
              Looks up a localized string similar to FatalExceptionBackgroundColor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.FATAL_EXCEPTION_FORECOLOR">
            <summary>
              Looks up a localized string similar to FatalExceptionTextColor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>
              Looks up a localized string similar to Image is an EFI Application..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>
              Looks up a localized string similar to Image is a EFI Boot Service Driver..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>
              Looks up a localized string similar to Image runs from a EFI ROM..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>
              Looks up a localized string similar to Image is a EFI Runtime Driver..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_NATIVE">
            <summary>
              Looks up a localized string similar to Image doesn&apos;t require a subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_NATIVE_WINDOWS">
            <summary>
              Looks up a localized string similar to Image is a native Win9x driver..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_OS2_CUI">
            <summary>
              Looks up a localized string similar to Image runs in the OS/2 character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>
              Looks up a localized string similar to Image runs in the Posix character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_UNDEFINED_VALUE">
            <summary>
              Looks up a localized string similar to The specified image subsystem ID, {0} is undefined..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>
              Looks up a localized string similar to Unknown subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>
              Looks up a localized string similar to Image runs in the Windows CE subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>
              Looks up a localized string similar to Image runs in the Windows character subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>
              Looks up a localized string similar to Image runs in the Windows GUI subsystem..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.IMAGE_SUBSYSTEM_XBOX">
            <summary>
              Looks up a localized string similar to Image runs on XBOX..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_APP_CHARACTER_MODE_APPS_ONLY">
            <summary>
              Looks up a localized string similar to The GetStdHandleFQFN routine supports only character mode (console mode) applications..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYFILEBASENAME">
            <summary>
              Looks up a localized string similar to     AssemblyFileBaseName = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYFILENAME">
            <summary>
              Looks up a localized string similar to     AssemblyFileName     = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_ASSEMBLYGUIDSTRING">
            <summary>
              Looks up a localized string similar to     AssemblyGuidString   = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_ASSEMBYDIRNAME">
            <summary>
              Looks up a localized string similar to     AssembyDirName       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_COMMENTS">
            <summary>
              Looks up a localized string similar to     Comments             = {0}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_COMPANYNAME">
            <summary>
              Looks up a localized string similar to     CompanyName          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_CULTURE">
            <summary>
              Looks up a localized string similar to     Culture              = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_DESCRIPTION">
            <summary>
              Looks up a localized string similar to     Description          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_FILE_CREATION_DATE">
            <summary>
              Looks up a localized string similar to     File Creation Date   = {0} ({1} UTC).
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_FILE_MODIFIED_DATE">
            <summary>
              Looks up a localized string similar to     File Modified Date   = {0} ({1} UTC).
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_LEGALCOPYRIGHT">
            <summary>
              Looks up a localized string similar to     LegalCopyright       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_LEGALTRADEMARKS">
            <summary>
              Looks up a localized string similar to     LegalTrademarks      = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_PRODUCTNAME">
            <summary>
              Looks up a localized string similar to     ProductName          = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_PUBLICKEYTOKEN">
            <summary>
              Looks up a localized string similar to     PublicKeyToken       = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_RUNTIME_VERSION">
            <summary>
              Looks up a localized string similar to     Runtime Version      = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_SELECTED_DLL_PROPS_BEGIN">
            <summary>
              Looks up a localized string similar to Selected properties of the library under test:{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_SELECTED_DLL_PROPS_END">
            <summary>
              Looks up a localized string similar to {0}End of selected properties{0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_ASM_PROPS_VERSIONSTRING">
            <summary>
              Looks up a localized string similar to     VersionString        = {0}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.MSG_CONSOLE_HAS_STD_HANDLE">
            <summary>
              Looks up a localized string similar to , NOT redirected.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.OUTPUT_OPTIONS_DISPLAY_FORMAT">
            <summary>
              Looks up a localized string similar to OutputOptions {0}= {1} ({2} decimal = {3}).
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.PRODUCT_NAME_AND_VERSION_TPL">
            <summary>
              Looks up a localized string similar to {0}, version {1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.PROPID_ERROR_MSG_COLOR">
            <summary>
              Looks up a localized string similar to ErrorMessageColors.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.RECOVERABLE_EXCEPTION_BACKCOLOR">
            <summary>
              Looks up a localized string similar to RecoverableExceptionBackgroundColor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.RECOVERABLE_EXCEPTION_FORECOLOR">
            <summary>
              Looks up a localized string similar to RecoverablelExceptionTextColor.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.STACKTRACE_TPL">
            <summary>
              Looks up a localized string similar to {1}Stack Trace Begin:{1}{0}{1}End of Stack Trace{1}{1}.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.SWITCH_IS_OFF">
            <summary>
              Looks up a localized string similar to OFF.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.SWITCH_IS_ON">
            <summary>
              Looks up a localized string similar to ON.
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.TDF_INVALID_ARG_VALUE">
            <summary>
              Looks up a localized string similar to The value of {1} specified for argument {0} is invalid..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.TDF_INVALID_ENUM_VALUE">
            <summary>
              Looks up a localized string similar to The new value of {1} specified for the {0} property is invalid.{3}The previous value of {2} is retained..
            </summary>
        </member>
        <member name="P:WizardWrx.DLLServices2.Properties.Resources.THIS_IS_THE_LAST">
            <summary>
              Looks up a localized string similar to There are no further exceptions to report.{0}.
            </summary>
        </member>
    </members>
</doc>
