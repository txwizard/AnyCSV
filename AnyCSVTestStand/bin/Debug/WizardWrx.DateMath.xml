<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WizardWrx.DateMath</name>
    </assembly>
    <members>
        <member name="T:WizardWrx.DateMath.ISO8601">
            <summary>
            This sealed class, comprised entirely of static methods, provides
            methods for creating date and time strings that conform to the ISO 8601
            recommendations for unambigous date formatting.
            
            As a bonus, date and time strings in these formats can be easily sorted
            in either ascending or descending order by the value of the underlying
            date or time value.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ISO8601.FORMAT_2DIGITS">
            <summary>
            Use this format string with members of a System.DateTime structure
            to format them as numbers that always display two digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ISO8601.FORMAT_YEAR">
            <summary>
            Use this format string with years, taken from a System.DateTime
            structure or elsewhere, to format them as numbers that always
            display four digits.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.ISO8601.DateTimeToISO8601DateUnformatted(System.DateTime)">
            <summary>
            Convert the date from a DataTime structure into a date string that
            follows the ISO 8601 formatting recommendation, but is devoid of
            field separators. This is the most compact string format of a date.
            </summary>
            <param name="pdtmIn">
            The initialized System.DateTime structure to be formatted.
            </param>
            <returns>
            A string representation of the date (only) from the input pdtmIn, 
            formatted as YYYYMMDD.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ISO8601.DateTimeToISO8601DateTimeUnformatted(System.DateTime)">
            <summary>
            Convert the date AND time from a DataTime structure into a date
            string that follows the ISO 8601 formatting recommendation, but is
            devoid of field separators. This is the most compact string format
            of a date.
            </summary>
            <param name="pdtmIn">
            The initialized System.DateTime structure to be formatted.
            </param>
            <returns>
            A string representation of the date (only) from the input pdtmIn,
            formatted as YYYYMMDDhhmmss.
            </returns>
        </member>
        <member name="T:WizardWrx.DateMath.ArchaicDateTime">
            <summary>
            This sealed class, which contains only static methods, provides utility
            functions to format System.DateTime values as MM/DD/YY, hh:mm:ss, and
            similar such formats, for export to old applications that don't support
            four digit years.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.ArchaicDateTime.DateTimeToMMDDYY(System.DateTime)">
            <summary>
            Given a DateTime value, return a string representation of the date,
            in MM/DD/YY format, suitable for input to old MS-DOS applications,
            such as DataEase, that accept only two digit years.
            </summary>
            <param name="pdtmIn">
            A System.DateTime object, initialized to the date to be rendered.
            </param>
            <returns>
            The calendar date, in MM/DD/YY format, showing leading zeros for
            month and day value less than ten.
            </returns>
            <remarks>
            This function employs locally defined format strings, so that it is
            independent of the culture context of the calling process, or of its
            settings. It uses the Modulus operator to separate the year of the
            century from the full four digit year.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ArchaicDateTime.DateTimeToHHMMSS(System.DateTime)">
            <summary>
            Given a DateTime value, return a string representation of the date,
            in MM/DD/YY format, suitable for input to old MS-DOS applications,
            such as DataEase, that accept only two digit years.
            </summary>
            <param name="pdtmIn">
            A System.DateTime object, initialized to the date to be rendered.
            </param>
            <returns>
            The wall clock time, in hh:mm:ss format, showing leading zeros for
            values less than ten, and hours in 24 hour (military) format.
            </returns>
            <remarks>
            This function employs locally defined format strings, so that it is
            independent of the culture context of the calling process, or of its
            settings.
            </remarks>
        </member>
        <member name="T:WizardWrx.DateMath.NumberFormatters">
            <summary>
            This class defines standard numeric format strings, for use with the
            string.format method and its derivatives and relatives.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.CURRENCY">
            <summary>
            Currency, which obeys the Regional Settings for currency, including
            the currency symbol and number of decimal places to show.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.DECIMAL">
            <summary>
            Decimal, which the documentation says is supported only for integral
            types. They mean business; if you try to use this type with a
            decimal or floating point number, you get an exception.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.FIXED">
            <summary>
            This is the minimal fixed point format string. Modifiers can be
            appended to it to specify significant digits after the decimal
            point.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.FIXED_2">
            <summary>
            This gives fixed point, with 2 places to the right of the decimal
            point, but without thousands separators.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.FIXED_3">
            <summary>
            This gives fixed point, with 3 places to the right of the decimal
            point, but without thousands separators.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.GENERAL">
            <summary>
            This is the default, and it's pretty minimal. The documentation
            states that the number is converted to the most compact format.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing the minimum number of
            hexacecimal numerals required to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_2">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of two hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_4">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of four hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_8">
            <summary>
            Hexadecimal, which the documentation says is supported only for
            integral types. They mean business; if you try to use this type with
            a decimal or floating point number, you get an exception.
            
            This format yields a result containing a minimum of 8 hexadecimal
            numerals. If the number needs more than two numerals, the returned
            string contains the minimum number of hexacecimal numerals required
            to represent the integer.
            
            Use this format to represent result codes returned by Windows DLLs
            and other such functions that return things such as HRESULTs.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_PREFIX_0H_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_PREFIX_0H_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_PREFIX_0X_LC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.HEXADECIMAL_PREFIX_0X_UC">
            <summary>
            Not strictly a format string, this string is intended for use as a
            prefix for the string returned from a call to string.format with any
            of the HEXADECIMAL format strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.NUMBER_PER_REG_SETTINGS">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            number of decimal (fraction) places, and number of digits to display
            between each thousands separator.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.NUMBER_PER_REG_SETTINGS_0D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays ZERO digits to the
            right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.NUMBER_PER_REG_SETTINGS_2D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays two digits to the
            right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.NUMBER_PER_REG_SETTINGS_3D">
            <summary>
            Format a number (integer or fixed point), using the Regional
            Settings (Locale) defaults for thousands separator, decimal symbol,
            and number of digits to display between each thousands separator.
            
            In contrast to NUMBER_PER_REG_SETTINGS, this string overrides the
            default decimal places value, and always displays three digits to
            the right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.PERCENT">
            <summary>
            Display a fixed point number as a percentage, using the default
            number of decimal places, per the Regional Settings (Locale).
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.PERCENT_DIGITS_2">
            <summary>
            Display a fixed point number as a percentage, showing two digits to
            the right of the decimal point.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.SCIENTIFIC_LC">
            <summary>
            Scientific notation, with a lower case "e" for the exponent.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.SCIENTIFIC_UC">
            <summary>
            Scientific notation, with an upper case "E" for the exponent.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.DECIMAL_DIGITS_DEFAULT">
            <summary>
            For some applications, such as the static methods of this class, we
            set our own default number of decimal places, rather than relying on
            the Regional Settings (Locale), which can be changed, at any time,
            by any user, even with restricted permissions.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.DECIMAL_DIGITS_MIN">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this lower limit.
            
            If the specified number is less than this value, the methods behave
            as if the default had been specified.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.NumberFormatters.DECIMAL_DIGITS_MAX">
            <summary>
            The static format string generator methods in this class test the
            requested number of decimal points against this upper limit.
            
            If the specified number is greater than this value, the methods
            behave as if the default had been specified.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.FixedPointDecimal">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <returns>
            Format string for formatting a fixed point number with the default
            number of digits to the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.FixedPointDecimal(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed point number.
            </summary>
            <param name="pintFractionDigits">
            Number of digits to allow to the right of the decimal point.
            </param>
            <returns>
            Format string for formatting a fixed point number with the specified
            number of digits to the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.FixedWidthInteger">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <returns>
            Format string for formatting a fixed width integer, with the default
            number of digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.FixedWidthInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a fixed width integer.
            </summary>
            <param name="pintTotalDigits">
            Minimum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting a fixed width integer, with the specified
            number of digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.GeneralXPrecision(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits.
            </returns>
            <remarks>
            Since the General format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display. If more digits are required, General
            format reverts to scientific notation.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.HexadecimalInteger">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the default maximum number of numerals.
            </summary>
            <returns>
            Format string for formatting an integer as a hexadecmal number.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.HexadecimalInteger(System.Int32)">
            <summary>
            Return a string suitable for formatting a hexadecimal representation
            of an integer with the specified minimum number of numerals.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting an integer as a hexadecmal number
            containing the specified minimum number of numerals.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.NumberPerRegSettings">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display two digits to the right of the decimal point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.NumberPerRegSettings(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number, per the Regional Settings, overriding the default number of
            digits to display to the right of the decimal point, if necessary,
            to display a specified number of digits to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number with a specified number of digits to the right of the decimal
            point.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.PercentToDecimalPlaces">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.PercentToDecimalPlaces(System.Int32)">
            <summary>
            Return a string suitable for formatting an integer or fixed point
            number as a percentage, with two places to the right of the decimal
            point.
            </summary>
            <param name="pintFractionDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string suitable for formatting an integer or fixed point
            number as a percentage, displaying a specified number of digits to
            the right of the decimal point.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.ScientificXPrecisionLC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notaiont.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.NumberFormatters.ScientificXPrecisionUC(System.Int32)">
            <summary>
            Return a string suitable for formatting any numeric value in
            scientific notaiont.
            </summary>
            <param name="pintTotalDigits">
            Maximum number of digits to return in the formatted number.
            </param>
            <returns>
            Format string for formatting any numeric value, with the specified
            number of digits, in scientific notation.
            
            The exponent is lower case.
            </returns>
            <remarks>
            Since the Scientific format differs significantly in intent and
            behavior, I chose to provide only one version of its format string
            generator, which takes an integer, which specifies the maximum
            number of digits to display.
            </remarks>
        </member>
        <member name="T:WizardWrx.DateMath.DateTimeDisplayFormatters">
            <summary>
            This sealed class exposes methods for formatting dates, times, and parts
            thereof, for display on screens and reports.
            </summary>
            <remarks>
            Notwithstanding the fact that these functions are very simple, they are
            repetitive, required frequently, and rely upon the obtuse format strings
            used by the static String.Format method.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.DateTimeUTCFromString(System.String)">
            <summary>
            Given a string containing a well formed date/time value, return it
            as a populated System.DateTime structure.
            </summary>
            <param name="pstrDateString">
            String to parse into a DateTime structure, with its Kind property
            set to UTC.
            </param>
            <returns>
            A populated DateTime structur, if the string is valid. Otherwise,
            the return value is DateTime.MinValue.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatDay(System.Int32)">
            <summary>
            Return a string representation of a day of a month, formatted with
            two digits, even if the value is 9 or less.
            </summary>
            <param name="pintDay">
            Number to be formatted, which must be a valid day of the month for A
            month. Since this method sees the date out of context, it cannot
            validate it for a given month.
            </param>
            <returns>
            A string representation of the day number, always containing two
            digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatDay(System.Int32,System.Boolean)">
            <summary>
            Return a string representation of a day of a month, formatted with
            two digits, even if the value is 9 or less.
            </summary>
            <param name="pintDay">
            Number to be formatted, which must be a valid day of the month for A
            month. Since this method sees the date out of context, it cannot
            validate it for a given month.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            A string representation of the day number, always containing two
            digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatMilliseconds(System.Int32)">
            <summary>
            Return a string representation
            </summary>
            <param name="pintMilliseconds">
            An integer, containing a valid number of milliseconds, appropriate
            to represent a fraction of a second to the nearest millisecond.
            </param>
            <returns>
            A string representation of pintMilliseconds, unless it is out of
            range, in which case, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatMilliseconds(System.Int32,System.Boolean)">
            <summary>
            Return a string representation
            </summary>
            <param name="pintMilliseconds">
            An integer, containing a valid number of milliseconds.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            A string representation of pintMilliseconds, unless it is out of
            range, in which case, an empty string is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatMonth(System.Int32)">
            <summary>
            Return a string representation of the ordinal number of a month,
            formatted with two digits, even if the value is 9 or less.
            </summary>
            <param name="pintMonth">
            Number to be formatted, which must be a valid month number.
            </param>
            <returns>
            A string representation of the month number, always containing two
            digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatMonth(System.Int32,System.Boolean)">
            <summary>
            Return a string containing the ordinal number of a month, formatted
            with two digits, even if the value is 9 or less.
            </summary>
            <param name="pintMonth">
            Number to be formatted, which must be a valid month number.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            A string representation of the month number, always containing two
            digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatYear(System.Int32)">
            <summary>
            Return a string containing the ordinal number of a year, formatted
            with four digits.
            </summary>
            <param name="pintYear">
            Number to be formatted, which must be a valid Gregorian year number.
            </param>
            <returns>
            A string representation of the year number, always containing four
            digits.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.DateTimeDisplayFormatters.FormatYear(System.Int32,System.Boolean)">
            <summary>
            Return a string containing the ordinal number of a year, formatted
            with four digits.
            </summary>
            <param name="pintYear">
            Number to be formatted, which must be a valid Gregorian year number.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            A string representation of the year number, always containing four
            digits.
            </returns>
        </member>
        <member name="T:WizardWrx.DateMath.PureDate">
            <summary>
            Through objects of type PureDate, this class provides methods for
            processing dates without regard for the time of day.
            
            This class also provides static methods that provide functions that are
            missing from the System.DateTime object, such as the ability to
            determine whether a specified year is a leap year, and to range check
            month and day of month values.
            
            Month day values can be subjected to successively rigorous range checks,
            if accompanied by month and year values. If a year is supplied for such
            a range check, the range check takes leap years into account.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.INVALID_DATE_ELEMENT">
            <summary>
            Property values are initizlized to this value. Callers can test
            against this constant before calling a method that depends on all
            three date parts (Year, Month, Day) being valid.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.EXCEPTION_ON_INVALID_INPUT">
            <summary>
            Use this constant to set the pfThrowError Validate* methods to TRUE,
            indicating that they should throw an ArgumentOutOfRangeException if
            their numeric argument is out of range.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.RETURN_ON_INVALID_INPUT">
            <summary>
            Use this constant to set the pfThrowError Validate* methods to FALSE,
            indicating that they should return FALSE if their numeric argument
            is out of range.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.DAY_VALUE_MIN">
            <summary>
            Day values must be greater than or equal to this value. Callers may
            use this constant to perform their own validations, or for other
            purposes.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.DAY_VALUE_ABS_MAX">
            <summary>
            Day values must be less than or equal to this value. Callers may
            use this constant to perform their own validations, or for other
            purposes.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.MONTH_VALUE_MIN">
            <summary>
            Month values must be greater than or equal to this value. Callers may
            use this constant to perform their own validations, or for other
            purposes.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.MONTH_VALUE_MAX">
            <summary>
            Month values must be less than or equal to this value. Callers may
            use this constant to perform their own validations, or for other
            purposes.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.GRGORIAN_CALENDAR_ADOPTION_YEAR">
            <summary>
            Year values must be greater than this value. Callers may use this
            constant to perform their own validations, or for other
            purposes.
            
            The Gregorian calendar was adopted in 1582. To be on the safe side,
            this class rejects years prior to the following year, since, in its
            present form, it cannot correctly process dates on the Julian
            calendar that was in use before 1583.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.#ctor">
            <summary>
            (Deprecated) The default constructor returns an object with
            properties set based on the machine date.
            </summary>        
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.#ctor(System.DateTime)">
            <summary>
            (Deprecated) This constructor takes a DateTime object, which is
            expected to be initialized.
            </summary>        
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            (Deprecated) This constructor takes three integers, representing a
            year, month, and day, all of which are expected to be initialized to
            consitent, valid values. Invalid values cause the constructor to
            throw an error.
            
            This method supports the Gregorian calendar. Consequently, year
            values must be greater than GRGORIAN_CALENDAR_ADOPTION_YEAR.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.DaysInMonth(System.Int32)">
            <summary>
            Given a vaid month number (1 through 12), return the number of
            days in that month, in a regular (non-leap) year.
            
            If the month value is invalid, the method throws an
            ArgumentOutOfRange exception.
            
            This method uses a private static lookup table.
            </summary>
            <param name="pintMonth">
            Month number (1-12) to evaluate.
            </param>
            <returns>
            Number of days in month, assuming a normal year.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Given a vaid month number (1 through 12) and a valid year,
            return the number of days in that month and year.
            
            If the month or year value is invalid, the method throws an
            ArgumentOutOfRange exception.
            
            This method uses private static lookup tables.
            </summary>
            <param name="pintMonth">
            Month number (1-12) to evaluate.
            </param>
            <param name="pintYear">
            Gregorian year number, greater than 1582, to evaluate.
            </param>
            <returns>
            Number of days in month in the specified year.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.IsLeapYear(System.Int32)">
            <summary>
            Given a valid year, return True if the year is a leap year, else
            return False.
            
            If the input year is invalid, an ArgumentOutOfRange exception is
            thrown.
            
            According to the first reference cited below, the Grgorian
            calendar was adopted in 1582. Hence, this formula is invalid for
            years before 1583. Consequently, any hear before 1583 is treated
            as invalid, and an ArgumentOutOfRange exception is thrown. This
            rule is enforced by the ValidateYear method.
            </summary>
            <param name="pintYear">
            Gregorian year number, greater than 1582, to evaluate
            </param>
            <returns>
            TRUE if year is a leap year, else FALSE.
            </returns>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.maintDaysInMonthNormalYear">
            <summary>
            The elements of this static array represent the number of days in the
            corresponding month of a regular year. Element zero has a value of
            INVALID_DATE_ELEMENT. This layout means that a month number can be
            used, as is, to look up the number of days in the corresponding
            month.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.PureDate.maintDaysInMonthLeapYear">
            <summary>
            The elements of this static array represent the number of days in the
            corresponding month of a leap year. Element zero has a value of
            INVALID_DATE_ELEMENT. This layout means that a month number can be
            used, as is, to look up the number of days in the corresponding
            month.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.PureDateFromDateTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method returns a regular System.DateTime object with its
            time fields set to zeros.
            
            You can use objects returned by this method from different
            instances of this class to perform calendar date comparisons
            that are free of interferance from different time values.
            </summary>
            <param name="pintPureYear">
            Gregorian year number, greater than 1582, to evaluate
            </param>
            <param name="pintPureMonth">
            Month number (1-12) to evaluate.
            </param>
            <param name="pintPureDay">
            Day of month (1-31, subject to limitations imposed by the values of
            arguments pintPureYear and pintPureMonth.
            </param>
            <returns>System.DateTime object equivalent to the specif3ed year,
            month, and day, with all three time values explicitly set to zero.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.ValidateDay(System.Int32,System.Boolean)">
            <summary>
            This method evaluates a calendar day number against a bare
            minimum set of criteria.
            </summary>
            <param name="pintDay">
            Day of month to evaluate.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            TRUE if the input is a valid day of the month.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.ValidateDay(System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method evaluates a calendar day number against more
            restrictive criteria, based on a specified month. For February,
            this method assumes a leap year.
            </summary>
            <param name="pintDay">
            Day of month to evaluate.
            </param>
            <param name="pintMonth">
            Month number (1-12) against which to evaluate argument pintDay.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            TRUE if the input is a valid day of the month.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.ValidateDay(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method evaluates a calendar day number against the most
            rigorous possible criteria, taking into account the month and
            year. Evaluation for days in February take leap years into
            account. Hence, February 29, 2003 is invalid.
            </summary>
            <param name="pintDay">
            Day of month to evaluate.
            </param>
            <param name="pintMonth">
            Month number (1-12) against which to evaluate argument pintDay.
            </param>
            <param name="pintYear">
            Gregorian year number, greater than 1582, to evaluate
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            TRUE if the input is a valid day of the month.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.ValidateMonth(System.Int32,System.Boolean)">
            <summary>
            This method range checks a month, returning True if the month
            number is valid. Otherwise, the method returns False or, if flag
            pfThrowError is True, throws an ArgumentOutOfRange exception.
            </summary>
            <param name="pintMonth">
            Month number (1-12) to evaluate.
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            TRUE if the input is a valid day of the month.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.ValidateYear(System.Int32,System.Boolean)">
            <summary>
            This method returns True if the year is valid for the Gregorian
            calendar.
            
            The lower limit is exposed as a public constant,
            GRGORIAN_CALENDAR_ADOPTION_YEAR.
            </summary>
            /// <param name="pintYear">
            Gregorian year number, greater than 1582, to evaluate
            </param>
            <param name="pfThrowError">
            TRUE if caller wants an invalid input to provoke an exception.
            
            To inprove the quality of your internal documentation, You may use
            public constant EXCEPTION_ON_INVALID_INPUT in lieu of TRUE, and
            RETURN_ON_INVALID_INPUT in lieu of FALSE.
            </param>
            <returns>
            TRUE if the input is a valid day of the month.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.CreateDayOutOfRangeMsg(System.Int32,System.Int32)">
            <summary>
            This method returns a string that contains the value, and the
            upper and lower limits that it must meet, according to the rules
            against which it was evaluated.
            </summary>
            <param name="pintBadDay">
            Value of invalid day of month to report.
            </param>
            <param name="pintMaxValue">
            Maximum value allowed by the function that rejected the value.
            </param>
            <returns>
            The returned string is a message, suitable for use as the Message
            argument to an ArgumentOutOfRange exception constructor.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.CreateMonthOutOfRangeMsg(System.Int32)">
            <summary>
            This method returns a string that contains the value, and the
            upper and lower limits that it must meet, according to the rules
            against which it was evaluated.
            </summary>
            <param name="pintBadMOnth">
            Invalid month value that provoked the error.
            </param>
            <returns>
            The returned string is a message, suitable for use as the Message
            argument to an ArgumentOutOfRange exception constructor.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.PureDate.CreateYearOutOfRangeMsg(System.Int32)">
            <summary>
            This method returns a string that contains the value, and the
            upper and lower limits that it must meet, according to the rules
            against which it was evaluated.
            </summary>
            <param name="pintBadYear">
            Invalid Gregorian year that provoked the error.
            </param>
            <returns>
            The returned string is a message, suitable for use as the Message
            argument to an ArgumentOutOfRange exception constructor.
            </returns>
        </member>
        <member name="P:WizardWrx.DateMath.PureDate.LeapYear">
            <summary>
            This property returns True if the Year property is a leap year.
            It does so by returning the value returned by the IsLeapYear
            static method.
            </summary>
        </member>
        <member name="P:WizardWrx.DateMath.PureDate.Year">
            <summary>
            (Deprecated) This property returns the Year part of the pure date.
            
            If you attempt to set this property, you must supply a valid
            year for the Gregorian calendar. Otherwise, the attempt to set
            the property throws an ArgumenntOutOfRange exception.
            
            Validation is preformed by calling static method ValidateYear,
            which enforces the lower limit.
            
            The lower limit is exposed as a public constant,
            GRGORIAN_CALENDAR_ADOPTION_YEAR.
            </summary>
        </member>
        <member name="P:WizardWrx.DateMath.PureDate.Month">
            <summary>
            (Deprecated) This property returns the Month part of the pure date.
            
            If you attempt to set this property, you must supply a valid
            month number. Otherwise, the attempt to set the property throws
            an ArgumenntOutOfRange exception.
            
            Validation is preformed by calling static method ValidateMonth.
            </summary>
        </member>
        <member name="P:WizardWrx.DateMath.PureDate.Day">
            <summary>
            (Deprecated) This property returns the Day part of the pure date.
            
            If you attempt to set this property, you must supply a valid
            day number. Otherwise, the attempt to set the property throws an
            ArgumenntOutOfRange exception.
            
            Validation is preformed by calling static method ValidateDay.
            </summary>
        </member>
        <member name="P:WizardWrx.DateMath.PureDate.CalendarDate">
            <summary>
            (Deprecated) This property returns a regular System.DateTime object
            with its time fields set to zeros.
            
            You can use objects returned by this method from different
            instances of this class to perform calendar date comparisons
            that are free of interferance from different time values.
            
            This method returns the result of a call to static method,
            PureDateFromDateTime, which can be called directly if you have
            no other need for the PureDate object, itself, and want to save
            the overhead of constructing two of them.
            </summary>
        </member>
        <member name="T:WizardWrx.DateMath.TimeStampFactory">
            <summary>
            This class generates timestamps from the system clock, with a user
            specified minimum interval between them. Since it is implemented as a
            Singleton, these limits are enforced across an entire application.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TSF_MINIMUM_INTERVAL">
            <summary>
            Since the value of MimimumInterval is expressed in ticks, its value
            must be greater than zero. Otherwise, the MimimumInterval Set
            method throws an ArgumentOutOfRangeException exception.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TSF_ONE_SECOND">
            <summary>
            Since the resulution of DateTime is 100 nanoseconds, and we may want
            intervals of one second, this constant provides a symbol to use when
            you want a minimum interval of exactly one second, which equates to
            ten million ticks.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TSF_SQL_DATETIME_RESOLUTION">
            <summary>
            The resolution of a SQL Server datetime type is 1/300th of a second,
            or 33,333.3333333333 ticks. To ensure that two successive timestamps
            are sufficiently far apart to be useful, this value must be rounded
            UP to the next whole number, 33,334.
            
            Since the motivation for this class is to generate unique values for
            use as values for datetime columns in Microsoft SQL Server data base
            tables, this is the default value for the MimimumInterval property.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TSF_TICKS_1_JANUARY_1901">
            <summary>
            This value, in Ticks, equates to Midnight on 01 January 1901, the
            first day of the twentieth century C. E.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TSF_TICKS_PER_MILLISECOND">
            <summary>
            Since the minimum time for which a thread can be put to sleep is one
            millisecond, a conversion constant simplifies coding and documenting
            the GetNewTimestamp method. Because this constant could also be used
            in other contexts, I marked it Public.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory._astrDateFormats">
            <summary>
            This array is used by static method FormatTimestamp, in conjunction
            with the TimestampFormatID enumeration and the _atsfPrecision and 
            _astrDateFmtTokenCounts arrays to implement advacned table driven
            formatting of DateTime strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory._astrDateFmtTokenCounts">
            <summary>
            This array is used by static method FormatTimestamp, in conjunction
            with the TimestampFormatID enumeration and the _astrDateFormats and
            _atsfPrecision arrays to implement advacned table driven formatting
            of DateTime strings.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory._atsfPrecision">
            <summary>
            This array is used by static method FormatTimestamp, in conjunction
            with the TimestampFormatID enumeration and the _astrDateFormats and
            _astrDateFmtTokenCounts arrays to implement advacned table driven
            formatting of DateTime strings.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.GetInstance">
            <summary>
            Before this class can be used, callers need a reference to the
            single instance, which they acquire by calling this method, and
            assigning its return value to a local TimeStampFactory variable.
            </summary>
            <returns>
            Reference to the single TimeStampFactory, which is created the first
            time this method is called. Subsequent calls return a reference to
            the object created by the first call.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.GetInstance(System.Int64)">
            <summary>
            Before this class can be used, callers need a reference to the
            single instance, which they acquire by calling this method, and
            assigning its return value to a local TimeStampFactory variable.
            </summary>
            <param name="plngMinimumInterval">
            Value to assign to the MimimumInterval property of the single
            TimeStampFactory. This value must meet the documented requirements
            for the MimimumInterval property.
            </param>
            <returns>
            Reference to the single TimeStampFactory, which is created the first
            time this method is called. Subsequent calls return a reference to
            the object created by the first call.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.GetInstance(System.Int64,WizardWrx.DateMath.TimeStampFactory.TimestampType)">
            <summary>
            Before this class can be used, callers need a reference to the
            single instance, which they acquire by calling this method, and
            assigning its return value to a local TimeStampFactory variable.
            </summary>
            <param name="plngMinimumInterval">
            Value to assign to the MimimumInterval property of the single
            TimeStampFactory. This value must meet the documented requirements
            for the MimimumInterval property.
            </param>
            <param name="ptsfType">
            </param>
            <returns>
            Reference to the single TimeStampFactory, which is created the first
            time this method is called. Subsequent calls return a reference to
            the object created by the first call.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.FormatTimestamp(System.DateTime,WizardWrx.DateMath.TimeStampFactory.TimestampFormatID)">
            <summary>
            Given a System.DateTime, such the value returned by method
            GetNewTimestamp of a single instance of this class, and a member of
            the TimestampFormatID enumeration, return the time, formatted as
            indicated.
            </summary>
            <param name="pdtmTimeStamp">
            Although desinged to process timestamps, since GetNewTimestamp
            returns ordinary System.DateTime structures, and this is a static
            method, you can use this method to format any System.DateTime.
            </param>
            <param name="ptsfFormatID">
            This member of the TimestampFormatID enumeration maps to one of six
            internally defined format strings.
            
            See the Remarks in the TimestampFormatID documentation for details.
            </param>
            <returns>
            A string representation of the value of argument pdtmTimeStamp,
            formatted as indicated by format ID argument ptsfFormatID.
            </returns>
            <remarks>
            Since timestamp objects are actually populated DateTime structures,
            and this method is fully static, you can use it to format ANY
            DateTime.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.GetNewTimestamp">
            <summary>
            Get a new timestamp, which represents a System.DateTime structure,
            initialized to the current time, with its issuance deferred until
            the current time is greater than or equal to the value of the last
            timestamp issued plus the value of the MinimumInterval property.
            </summary>
            <returns>
            A System.DateTime structure, initialized to the value of the machine
            time, at the time of issue.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.LockSettings">
            <summary>
            Lock the settings, to prevent accidental modification during a
            series of calls, or during the lifetime of a Web application. You
            may wish to use the SettingsAreLocked property to determine their
            current state, or you can just always call this method.
            </summary>
            <remarks>
            The most efficient approach is to simply call this method, without
            checking the flag.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.TimeStampFactory.UnlockSettings">
            <summary>
            Unlock the settings so that changes can be made. You may wish to use
            the SettingsAreLocked property to determine their current state, or
            you can just always call this method.
            </summary>
            <remarks>
            The most efficient approach is to simply call this method, without
            checking the flag.
            </remarks>
        </member>
        <member name="P:WizardWrx.DateMath.TimeStampFactory.LastTimestampIssued">
            <summary>
            This property returns a read-only copy of the last timestamp issued
            by the active singleton. If this value is DateTime.MinValue, the
            object has been instantiated, but has yet to issue a timestmp.
            </summary>
        </member>
        <member name="P:WizardWrx.DateMath.TimeStampFactory.MimimumInterval">
            <summary>
            This long integer specifies the minimum permissible interval between
            the last timestamp returned by the GetNewTimestamp method and the
            next one.
            </summary>
            <remarks>
            If you intend to use the timestamps returned by GetNewTimestamp to
            populate a datetime column in a Microsoft SQL Server data base table
            that has a UNIQUE constraint, the lowest permissible value of this
            property is TSF_SQL_DATETIME_RESOLUTION.
            
            Beware, however, that no warning is issued; you MAY use any integer
            greater than zero.
            
            Since this object is a singleton, changes made to this property are
            global, so they affect all timestamps returned by subsequent calls
            to  the GetNewTimestamp method of this class. To prevent accidental
            changes, call the LockSettings method.
            
            An ArgumentOutOfRangeException exception is thrown if you atempt to
            set this property to a value of less than zero.
            
            Since attempting to specify an invalid value throws an exception,
            the previous value remains undisturbed.
            
            This property is a long, rather than an int, to correspond with the
            size of the Ticks member of the DateTime structur, against which it
            is directly compared to determine whether enough time has elapsed
            since the last timestamp was issued. Since both are __int64,
            comparing them is quite fast, especially if the CLR has access to
            the extra-wide registers of a floating point coprocessor or, better
            yet, the 64 bit integer registers of the new 64 bit CPUs.
            
            Finally, since the constructors use these routines to initialize the
            property, they, too, protect the integrity of the object properties.
            </remarks>
        </member>
        <member name="P:WizardWrx.DateMath.TimeStampFactory.SettingsAreLocked">
            <summary>
            This read only property lets you check the state of the settings
            lock.
            </summary>
            <remarks>
            Use the LockSettings method to engage the lock, and its twin,
            UnlockSettings, to disengage it.
            
            Since this object is a singleton, changes made to this property are
            global, so they affect all timestamps returned by subsequent calls
            to  the GetNewTimestamp method of this class. To prevent accidental
            changes, call the LockSettings method.
            
            Since the settings are initially unlocked, if you are about to issue
            a series of timestamp requests, or are running this class in a Web
            application, locking the settings as a precaution is a good ides. To
            facilitate this, for each methad that returns a reference to the
            single instance, with and without overrides for the default property
            values, there is a corresponding method call that simultaneously
            locks them.
            </remarks>
        </member>
        <member name="P:WizardWrx.DateMath.TimeStampFactory.TimestampKind">
            <summary>
            This property uses a TimestampType enumeration to prevent users from
            specifying a value of Unspecified from the DateTimeKind Enumeration
            as the value of the Kind property to be assigned to the timestamps
            returned by the GetNewTimestamp method of this class.
            </summary>
            <remarks>
            I made no attempt to map the numeric values of the TimestampType
            enumeration to the corresponding members of the DateTimeKind
            enumeration.
            
            Since this object is a singleton, changes made to this property are
            global, so they affect all timestamps returned by subsequent calls
            to  the GetNewTimestamp method of this class. To prevent accidental
            changes, call the LockSettings method.
            
            An ArgumentOutOfRangeException exception is thrown if you atempt to
            set this property to an invalid value (i. e., an integral value that
            is not the numeric value of one of its members).
            
            Since attempting to specify an invalid value throws an exception,
            the previous value is undisturbed.
            
            Finally, since the constructors use these routines to initialize the
            property, they, too, protect the integrity of the object properties.
            </remarks>
        </member>
        <member name="T:WizardWrx.DateMath.TimeStampFactory.TimestampType">
            <summary>
            Since the timestamps returned by the TimeStampFactory must have an
            an intrinsic Kind, and DateTimeKind.Unspecified is unacceptable, we
            use a TimestampType to protect the timestamp, by limiting it to the
            two permissible values of Local and UTC. Attemtping to set the
            associated TimeType property to an invalid TimestampKind value is
            rejected with an ArgumentOutOfRangeException exception.
            </summary>
            <remarks>
            Although using a TimestampType of Local is permitted, there are two
            VERY SOUND resons to refrain from doing so.
            
            1) If your locale implements Daylight Saving Time, there is a span
            of one hour, in Autumn, when clocks revert from daylight to standard
            time, when this class must either generate duplicate timestamps or
            hold requests for up to an hour.
            
            2) Likewise, in Spring, when your locale switches from Standard to
            Daylight Saving time, there is an unavoidable artificial gap in the
            time stamps.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampType.Local">
            <summary>
            Use Local time. Using local time is strongly discouraged.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampType.UTC">
            <summary>
            Use UTC time. This is preferred, and is the default behavior.
            </summary>
        </member>
        <member name="T:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID">
            <summary>
            Use the values of this enmeration to request a formatted timestamp
            from the static FormatTimestamp method.
            </summary>
            <remarks>
            The layout of each format is described in the documentation of its
            corresponding enumeration member. Descriptions use the following
            tokens to identify fields.
            
            YYYY = Year         - Always shown as 4 digits
            MM   = Month        - Always shown as two digits, with leading zeros.
            DD   = Day          - Always shown as two digits, with leading zeros.
            hh   = Hour         - Always shown as two digits, with leading zeros, using the 24 hour military style.
            mm   = Minute       - Always shown as two digits, with leading zeros.
            ss   = Second       - Always shown as two digits, with leading zeros.
            ttt  = Milliseconds - Always shown as three digits, with leading zeros.
            nnnn = Ticks        - Always shown as an unformatted quadword (64 bit) integer.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.SecondsPrecisionText">
            <summary>
            Format the timestamp with the time to the nearest second, as a
            text string, suitable for use on reports and screens.
            
            Format String: YYYY/MM/DD hh:mm:ss
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.SecondsPrecisionCompact">
            <summary>
            Format the timestamp with the time to the nearest second, as a
            compact text string, suitable for use as input to a conversion
            routine.
            
            Format String: YYYYMMDD_hhmmss
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.MillisecondsPrecisonText">
            <summary>
            Format the timestamp with the time to the nearest millisecond,
            as a text string, suitable for use on reports and screens.
            
            Format String: YYYY/MM/DD hh:mm:ss.ttt
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.MillisecondsPrecisonCompact">
            <summary>
            Format the timestamp with the time to the nearest millisecond,
            as a compact text string, suitable for use as input to a
            conversion routine.
            
            Format String: YYYYMMDD_hhmmss.ttt
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.MillisecondsPrecisonSQLServer">
            <summary>
            Format the timestamp with the time to the nearest millisecond,
            in a format suitable for matching against SQL Server DateTime
            types.
            Example:	   2010-04-02 08:04:48.130
            Format String: yyyy-mm-dd hh:mm:ss.ttt
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.TicksPrecisionText">
            <summary>
            Format the timestamp with the time to the nearest tick, as a
            text string, suitable for use on reports and screens.
            
            Format String: YYYY/MM/DD hh:mm:ss.ttt_nnnn
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.TimeStampFactory.TimestampFormatID.TicksPrecisionCompact">
            <summary>
            Format the timestamp with the time to the nearest tick, as a
            compact text string, suitable for use as input to a conversion
            routine.
            Format String: YYYYMMDD_hhmmss.ttt_nnnn
            </summary>
        </member>
        <member name="T:WizardWrx.DateMath.UtilityConstants">
            <summary>
            This class consists entirely of commonly used constants.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ARRAY_FIRST_ELEMENT">
            <summary>
            All CLR arrays are zero based. Therefore, the index of the first
            element is always zero.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ARRAY_INVALID_INDEX">
            <summary>
            All CLR arrays are zero based. Therefore, the index of the first
            element is always zero, and a number less than zero is always an
            invalid index value.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ARRAY_LIST_ORDINAL_TO_SUBSCRIPT">
            <summary>
            Subtract this value from a human readable list number (1 based) to
            derive an equivalent array index, or add it to an array subscript to
            derive an equivalent human readable list number.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERROR_SUCCESS">
            <summary>
            Use this with environment.exit() and other situations when you want
            to report the default "success" exit code of zero.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_01KB">
            <summary>
            This is the smallest buffer that I can imagine allocating for
            sequential file I/O. If I need to allocate a smaller buffer, I'll
            use a locally defined constant.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_02KB">
            <summary>
            For reading a typical configuration file, 2KB should be more than
            adequate, so why waste memory on a bigger buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_04KB">
            <summary>
            Something that tends to come in chunks the size of a logical memory
            page justify only
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_08KB">
            <summary>
            For most applications, I use a buffer size of 8KB for sequential
            file I/O.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_16KB">
            <summary>
            A few circumstances may warrant a slightly bigger buffer, especially
            if it means that there is a good chance that a file completely fits
            in one buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_32KB">
            <summary>
            A VERY few circumstances may warrant a slightly bigger buffer,
            if it means that there is a good chance that a file completely fits
            in one buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FILE_BUFSIZE_STANDARD_64KB">
            <summary>
            Finally, for those rare cases in which we want to read chunks the
            size of an 8086 memory segment, I define a truly huge buffer.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FQFN_PREFIX_START_POS">
            <summary>
            A fully qualified file name that starts with a drive letter starts
            here.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.FQFN_PREFIX_START_LEN">
            <summary>
            A fully qualified file name that starts with a drive letter is this
            long.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HIGHEST_7_BIT_ASCII">
            <summary>
            The highest value that is a legal 7 bit ASCII code.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.MAX_PATH">
            <summary>
            Constant equivalent to the longest path that can be passed to a
            regular (ANSI) Win32 file I/O function.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.MINUS_ONE">
            <summary>
            Constant equivalent to integer value of -1, to disambiguate literal
            values in code, and to clarify that the adjacent minus sign is part
            of the value.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.PLUS_ONE">
            <summary>
            Constant equivalent to integer value of +1, to disambiguate literal
            values in code, and to clarify that the adjacent plus sign is part
            of the value.
            
            Compare to character constants CHAR_LC_I, CHAR_UC_I, CHAR_LC_L, and
            CHAR_UC_L, all of which can look similar in code, especially if the
            plus sign is omitted, as is often the case.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.SB_CAPACITY_01KB">
            <summary>
            Constant for constructing a 1KB StringBuilder object.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.SB_CAPACITY_08KB">
            <summary>
            Constant for constructing a 8KB StringBuilder object.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STRING_INDEXOF_NOT_FOUND">
            <summary>
            Value returned by the IndexOf methods, e. g., of the String class,
            if the object sought is not found.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STRING_SUBSTR_BEGINNING">
            <summary>
            Use with the Substring method of the String class to denote the
            first character in a string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.UNC_PREFIX_START_POS">
            <summary>
            A UNC prefix starts here.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.UNC_PREFIX_START_LEN">
            <summary>
            A UNC prefix is this long.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.PLUS_TWO">
            <summary>
            Number 2, to clearly distinguish it from a letter Z, which can look
            a lot like it.
            
            Compare to character constants CHAR_LC_Z and CHAR_UC_Z.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ZERO">
            <summary>
            Constant equivalent to integer value of zero, to disambiguate zero
            literal values in code.
            
            Compare to character constants CHAR_LC_O and CHAR_UC_O.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_LC_I">
            <summary>
            Lower case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_UC_I">
            <summary>
            Upper case I, for use in code, where it might be easily mistaken for
            a number 1 or a letter L.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_LC_L">
            <summary>
            Lower case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_UC_L">
            <summary>
            Upper case L, for use in code, where it might be easily mistaken for
            a number 1 or a letter I.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_LC_O">
            <summary>
            Lower case O, for use in code, where it might be easily mistaken for
            a number zero.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_UC_O">
            <summary>
            Upper case O, for use in code, where it might be easily mistaken for
            a number zero.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_LC_Z">
            <summary>
            Lower case Z, for use in code, where it might be easily mistaken for
            a number two.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CHAR_UC_Z">
            <summary>
            Upper case Z, for use in code, where it might be easily mistaken for
            a number two.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.DLM_COMMA">
            <summary>
            Comma, used mostly as a list delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.DLM_EMAIL_ADDRESS">
            <summary>
            At sign, used as delimiter in email addresses.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.DLM_SEMICOLON">
            <summary>
            Semicolon, used mostly as a list delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.EQUALS_SIGN">
            <summary>
            Equal sign, used as delimiter in private profile key-value pairs.ww
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HYPHEN">
            <summary>
            Literal hyphens are also easly confused in code, especially with
            minus signs.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.OS_EXTENSION_DELIM">
            <summary>
            Operating system extension delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.OS_PATH_DELIM">
            <summary>
            Operating system path delimiter.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.QUOTE_CHAR">
            <summary>
            We are always needing to embed a quote character in a string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.SINGLE_SPACE">
            <summary>
            It is often important to know that the character is a particlular
            position in a string is, indeed, a space, rather than a non-printing
            character that the printer or video rendering engine mapped to one.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.TAB_CHAR">
            <summary>
            Tab charecters are in constant use, as delimiters, and for white
            space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.UNDERSCORE">
            <summary>
            Underscores can be really hard to see in code, both on paper and
            on screen.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.URI_PATH_DELIM">
            <summary>
            The URI path delimiter is a forward slash, and we use lots of them
            to parse URI strings in ways that are beyond the capabilities of the
            built-in URI parsing classes.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ADDRESS_SPACER">
            <summary>
            Space, middle dot, and space, for use as a sort of horizontal bullet.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.APP_DIR_START_PAGE">
            <summary>
            A URI that ends with a forward slash calls forth this specially
            named page.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.APP_START_PAGE_KEY">
            <summary>
            Key, in web.config, that contains the name of the application's
            start (home) page.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ASP_RELATIVE_PATH_BEGIN">
            <summary>
            Relative path strings returned by the Request object begin with one
            of these.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ASP_NET_REL_EXEC_PATH_PREFIX">
            <summary>
            Relative path strings returned by the Request object begin with one
            of thest.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CITY_STATE_SPACER">
            <summary>
            Comma, then space, for use as a separator between a city and state.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CONSOLE_APP_BOJ">
            <summary>
            Format string, for use with the static string.format method, to
            generate a formatted BOJ message for a console application.
            </summary>
            <remarks>
            The substitution tokens are intended to be replaced as follows.
            
            1) Program name, such as MyProgram. Forego the .exe bit.
            
            2) Program version string.
            
            3) Environment.Newline.
            
            4) Startup time, me.StartupTime.ToString.
            
            5) Startup time, UTC, me.StartupTime.ToUniversalTime().ToString ().
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.CONSOLE_APP_EOJ">
            <summary>
            Format string, for use with the static string.format method, to
            generate a formatted BOJ message for a console application.
            </summary>
            <remarks>
            The substitution tokens are intended to be replaced as follows.
            
            1) Environment.Newline.
            
            2) Program name, such as MyProgram. Forego the .exe bit.
            
            3) Finish time, usually dtmFinish.ToString().
            
            4)  Finish time, usually dtmFinish.ToUniversalTime().ToString().
            
            5) Program elapsed time, usually me.UpTimeDispHms.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.EMPTY_STRING">
            <summary>
            I like having a way to initialize a string to an emptry string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERRMSG_ARG_IS_EMPTY_STRING">
            <summary>
            Error message to return when an unexpected empty string is passed
            into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERRMSG_ARG_IS_NULL">
            <summary>
            Error message to return when an unexpected NULL reference is passed
            into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERRMSG_ARG_IS_NULL_OR_EMPTY">
            <summary>
            Error message to return when an unexpected NULL or empty string is
            passed into a function.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERRMSG_ARG_ENUM_VALUE_IS_INVALID">
            <summary>
            Error message to return when an enumerator is set to an undefined
            value.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.ERRMSG_ARG_FILE_NOT_FOUND">
            <summary>
            Error message to return when a file is not found.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HTML_COMMENT_PREFIX">
            <summary>
            Minimal HTML (and XML) comment prefix string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HTML_COMMENT_PREFIX_SP">
            <summary>
            HTML (and XML) comment prefix string, followed by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HTML_COMMENT_SUFFIX">
            <summary>
            Minimal HTML (and XML) comment suffix string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HTML_COMMENT_SUFFIX_SP">
            <summary>
            HTML (and XML) comment suffix string, preceded by a single space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.HTML_NONBREAKING_SPACE">
            <summary>
            Web Developers are always needing a non-breaking space, for use as
            filler, especially in dynamically generated tables.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.LOCALHOST">
            <summary>
            The DNS name of the local loopback is always "localhost".
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.LOCALHOST_IP_ADDR">
            <summary>
            The local loopback has the reserved IP address of 127.0.0.1.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STRING_SPLIT_CARRIAGE_RETURN">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            carriage returns only.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STRING_SPLIT_LINEFEED">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file of lines delimited by
            line feeds only.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STRING_SPLIT_NEWLINE">
            <summary>
            Use this string as the solitary element of an array of strings to
            split a string that contains text from a file into an array of
            strings, each element of which is a line of text, stripped of its
            line ending, if any.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.OS_DRIVE_PATH_DELIMITER">
            <summary>
            Operating system drive path delimiter, for old style windows drive
            specifications.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.RELATIVE_URI_DFLT_DOC_CURR_DIR">
            <summary>
            This is the string that the MakeRelativeUri function returns,given a
            URI to the default document for a directory and the root of the Web
            application.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.STATE_ZIP_SPACER">
            <summary>
            Two nonbreaking spaces, for use between a state and Zip code.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.UNC_SERVER_DELIM">
            <summary>
            The server delimiter string.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.UtilityConstants.URI_PROTOCOL_DELIM">
            <summary>
            The URI protocol delimiter is a colon, follwed by two forward
            slashes, and we use lots of them to parse URI strings in ways
            that are beyond the capabilities of the built-in URI parsing
            classes.
            </summary>
        </member>
        <member name="T:WizardWrx.DateMath.StandardDateFormat">
            <summary>
            This static class exposes constants for every standard DateTime constant
            listed and defined in "Standard DateTime Format Specifiers," in the MSDN
            article, "Standard DateTime Format Strings," cited in reference 1.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.SHORT_DATE">
            <summary>
            Represents a custom DateTime format string defined by the current
            ShortDatePattern property.
            
            For additional information, please see the article in reference 2.
            </summary>
            <example>
            For example, the custom format string for the invariant culture is
            "MM/dd/yyyy".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.LONG_DATE">
            <summary>
            Represents a custom DateTime format string defined by the current
            LongDatePattern property. 
            
            For additional information, please see the article in reference 3.
            </summary>
            <example>
            For example, the custom format string for the invariant culture is
            "dddd, dd MMMM yyyy".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.FULL_DATE_SHORT_TM">
            <summary>
            Represents a combination of the long date (D) and short time (t)
            patterns, separated by a space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.FULL_DATE_TIME_LONG_TM">
            <summary>
            Represents a custom DateTime format string defined by the current
            FullDateTimePattern property.
            </summary>
            
            For additional information, please see the article in reference 4.
            <example>
            For example, the custom format string for the invariant culture is
            "dddd, dd MMMM yyyy HH:mm:ss".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.GENERAL_DATE_TIME_SHORT_TM">
            <summary>
            Represents a combination of the short date (d) and short time (t)
            patterns, separated by a space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.GENERAL_DATE_TIME_LONG_TM">
            <summary>
            Represents a combination of the short date (d) and long time (T)
            patterns, separated by a space.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.MONTH_DAY">
            <summary>
            Represents a custom DateTime format string defined by the current
            MonthDayPattern property. 
            
            For additional information, please see the article in reference 5.
            </summary>
            <example>
            For example, the custom format string for the invariant culture
            is "MMMM dd".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.ROUND_TRIP_DATE">
            <summary>
            Represents a custom DateTime format string using a pattern that
            preserves time zone information. The pattern is designed to
            round-trip DateTime formats, including the Kind property, in text.
            Then the formatted string can be parsed back using Parse or
            ParseExact with the correct Kind property value.
            
            The format string is "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK".
            
            The pattern for this specifier is a defined standard. Therefore, it
            is always the same, regardless of the culture used or the format
            provider supplied.
            
            For additional information, please see the article in reference 6.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.RFC1123">
            <summary>
            Represents a custom DateTime format string defined by the current
            RFC1123Pattern property. The pattern is a defined standard and the
            property is read-only. Therefore, it is always the same regardless
            of the culture used or the format provider supplied.
            
            For additional information, please see the article in reference 6.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.SORTABLE">
            <summary>
            Represents a custom DateTime format string defined by the current
            SortableDateTimePattern property.
            
            This pattern is a defined standard and the property is read-only.
            Therefore, it is always the same regardless of the culture used orthe format provider supplied.
            
            This pattern conforms to ISO 8601.
            
            For additional information, please see the article in reference 7.
            </summary>
            <example>
            The custom format string is "yyyy'-'MM'-'dd'T'HH':'mm':'ss".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.SHORT_TIME">
            <summary>
            Represents a custom DateTime format string defined by the current
            ShortTimePattern property. 
            
            For additional information, please see the article in reference 8.
            </summary>
            <example>
            For example, the custom format string for the invariant culture
            is "HH:mm".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.LONG_TIME">
            <summary>
            Represents a custom DateTime format string defined by the current
            LongTimePattern property. 
            
            For additional information, please see the article in reference 9.
            </summary>
            <example>
            For example, the custom format string for the invariant culture
            is "HH:mm:ss".
            </example>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.UNIV_SORTABLE_DATETIME_AS_IS">
            <summary>
            Represents a custom DateTime format string defined by the current
            UniversalSortableDateTimePattern property.
            
            This pattern is a defined standard and the property is read-only.
            Therefore, it is always the same regardless of the culture used or
            the format provider supplied.
            
            For additional information, please see the article in reference 10.
            </summary>
            <example>
            The custom format string is "yyyy'-'MM'-'dd HH':'mm':'ss'Z'".
            </example>
            <remarks>
            No time zone conversion is done when the date and time is formatted.
            Therefore, the application must convert a local date and time to
            Coordinated Universal Time (UTC) before using this format specifier.
            
            UniversalSortableDateTimePattern can be used to display time in a
            sortable format with the universal time designator "Z" at the end.
            The format is sortable because it uses leading zeros for year,
            month, day, hour, minute, and second.
            
            The pattern ("yyyy'-'MM'-'dd HH':'mm':'ss'Z'") is the same
            regardless of culture or format provider.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.UNIV_SORTABLE_DATETIME_CONVERTED">
            <summary>
            Represents a custom DateTime format string defined by the current
            FullDateTimePattern property.
            
            This pattern is the same as the full date/long time (F) pattern.
            However, formatting operates on the Coordinated Universal Time (UTC)
            that is equivalent to the DateTime object being formatted.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.StandardDateFormat.YEAR_MONTH">
            <summary>
            Represents a custom DateTime format string defined by the current
            YearMonthPattern property.
            
            For additional information, please see the article in reference 11.
            </summary>
            <example>
            For example, the custom format string for the invariant culture
            is "yyyy MMMM".
            </example>
        </member>
        <member name="T:WizardWrx.DateMath.ElapsedTime">
            <summary>
            This class is composed entirely of static methods for computing and
            formatting elapsed times.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.DAYS_IN_REGULAR_YEAR">
            <summary>
            Though not scientifically correct, for everyday uses, a year has 365
            days, unless it's a leap year.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.DAYS_IN_LEAP_YEAR">
            <summary>
            As the name implies, leap years have an extra day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.HOURS_IN_DAY">
            <summary>
            Though not scientifically correct, for everyday uses, a day has this
            many hours.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.MILLISECONDS_IN_DAY">
            <summary>
            Since a millisecond is 1/1000th of a second, it's quite simple to compute,
            but why bother, when the answer is a constant.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.MINUTES_IN_DAY">
            <summary>
            The number of minutes in a 24 hour day, though easily computed, may
            as well be made avaialble as a constant.
            </summary>
            <remarks>
            It's never safe to assume that "everybody" knows a value, just because it
            is both easily computed and often cited.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.SECONDS_IN_DAY">
            <summary>
            It is often handy to know how many seconds are in a 24 hour day, and
            to have it available as a handy constant.
            </summary>
            <remarks>
            It's never safe to assume that "everybody" knows a value, just because it
            is both easily computed and often cited.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TICKS_IN_DAY">
            <summary>
            The documentation for the Microsoft .NET Framework Base Class 
            Library defines a tick as 100 nanoseconds, or 1/10,000th of a 
            econd. Hence, there are 10,000 ticks for every second, an
            astonishingly huge number, 864,000,000,000, which requires a
            64 bit integer to hold it.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_OF_DAY_LAST_HOUR">
            <summary>
            This constant defines the TotalHours member of the TimeOfDay member
            of a DateTime value whose value is the last tick before Midnight.
            </summary>
            <remarks>
            This value almost certainly has no practical value, other than for
            amazing your geeky friends, or maybe winning a trivia contest.
            
            It must be stored as a double precision number to acommodate its
            many significant digits.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_OF_DAY_LAST_MILLISECOND">
            <summary>
            This constant defines the TotalMilliseconds member of the TimeOfDay member
            of a DateTime value whose value is the last tick before Midnight.
            </summary>
            <remarks>
            This value almost certainly has no practical value, other than for
            amazing your geeky friends, or maybe winning a trivia contest.
            
            It must be stored as a double precision number to acommodate its
            many significant digits.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_OF_DAY_LAST_MINUTE">
            <summary>
            This constant defines the TotalMinutes member of the TimeOfDay member
            of a DateTime value whose value is the last tick before Midnight.
            </summary>
            <remarks>
            This value almost certainly has no practical value, other than for
            amazing your geeky friends, or maybe winning a trivia contest.
            
            It must be stored as a double precision number to acommodate its
            many significant digits.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_OF_DAY_LAST_SECOND">
            <summary>
            This constant defines the TotalSeconds member of the TimeOfDay member
            of a DateTime value whose value is the last tick before Midnight.
            </summary>
            <remarks>
            This value almost certainly has no practical value, other than for
            amazing your geeky friends, or maybe winning a trivia contest.
            
            It must be stored as a double precision number to acommodate its
            many significant digits.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TINE_OF_DAY_LAST_TICk">
            <summary>
            This constant defines the Ticks member of the TimeOfDay member of a
            DateTime value whose value is the last tick before Midnight.
            </summary>
            <remarks>
            Unlike the other TIME_OF_DAY_LAST_* constants, this one has a
            practical use. By adding it to the Ticks member of the Date member
            of a System.DateTime structure, you get a new System.DateTime whose
            value is the last tick before Midnight on the date represented by
            the input DateTime. This is the appliction which motivated creation
            of this constant. While I was at it, I decided that I might as well
            add the others, too, since I had all of them at my disposal from the
            Locals window of a debug session of the prototype of static method
            MidnightTonight, which got its value in a more roundabout way.
            
            This value can be applied to testing the upper limit of a date range
            represented by a System.DateTime structure against another 
            System.DateTime structure. The most computationally efficient way to
            perform such a test is to compare their Ticks members. It is a safe
            bet that the Equals operator overload of a System.DateTime structure
            uses exactly this method, which reduces to two machine instructions.
            
            The documentation for the Microsoft .NET Framework Base Class 
            Library defines a tick as 100 nanoseconds, or 1/10,000th of a 
            econd. Hence, there are 10,000 ticks for every second, an
            astonishingly huge number, 863,999,999,999, which requires a
            64 bit integer to hold it.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.HMS_FORMAT">
            <summary>
            Format string to use for formatting hours, minutes, and seconds so
            that they always display as two digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.MS_FORMAT">
            <summary>
            Format string to use for frmatting Milliseconds so that they always
            display as two digits.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TICKS_FORMAT">
            <summary>
            Format string to use for formatting the Ticks property of a TimeSpan
            structure, which is represented as a 64 bit (int64) long integer.
            </summary>
            <remarks>
            This string is identical, except in name, of course, to FORMAT_TICKS
            in my TimeStampFactory class. Unlike this string, however, that one
            is marked Private.
            
            This string is used internally, with TIME_SPAN_FORMAT_DAYS_WITH_TICKS and
            TIME_SPAN_FORMAT_HOURS_WITH_TICKS, to format displayable time spans,
            including their associated Ticks properties.
            
            Since the Ticks property is an alternate representation of the TimeSpan,
            there may also be times when you are more interested in one or the other,
            but not both. When those circumstnaces call for the Ticks property alone,
            pass this string directly to either string.format or the overload of the
            ToString method that takes a format string.
            </remarks>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_DAYS">
            <summary>
            This is the default format string that method FormatTimeSpan uses if
            the time span covers at least one day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_HOURS">
            <summary>
            This is the default format string that method FormatTimeSpan uses if
            the time span covers less than one day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_DAYS_PRECISE">
            <summary>
            Use this format string with the second and fourth overloads of 
            ElapsedTimeDisp to display a time span that you expect to cover at
            least one day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_DAYS_WITH_TICKS">
            <summary>
            Use this format string with the second and fourth overloads of 
            ElapsedTimeDisp to display a time span that you expect to cover at
            least one day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_HOURS_PRECISE">
            <summary>
            Use this format string with the second and fourth overloads of 
            ElapsedTimeDisp to display a time span that you expect to cover less
            than one day.
            </summary>
        </member>
        <member name="F:WizardWrx.DateMath.ElapsedTime.TIME_SPAN_FORMAT_HOURS_WITH_TICKS">
            <summary>
            Use this format string with the second and fourth overloads of 
            ElapsedTimeDisp to display a time span that you expect to cover at
            least one day.
            </summary>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.DaysInYearOfDate(System.DateTime)">
            <summary>
            Given a populated System.DateTime structure, evaluate its year, and report
            whether or not it is a leap year.
            </summary>
            <param name="pdtmThisDate">
            The populated System.DateTime structure to evaluate.
            </param>
            <returns>
            TRUE if the Year member of pdtmThisDate is a leap year. Otherwise,
            returns FALSE.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeCalc(System.DateTime)">
            <summary>
            Compute elapsed time from a given DateTime value until now.
            </summary>
            <param name="pdtmStartTime">
            DateTime value for which elapsed time is desired, which must be less
            than UtcNow.
            </param>
            <returns>
            A TimeSpan object, representing the elapsed time from time pdtmStartTime
            until now (UTC).
            </returns>
            <remarks>
            DateTime values are never null.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeCalc(System.DateTime,System.DateTime)">
            <summary>
            Compute elapsed time between two DateTime values.
            </summary>
            <param name="pdtmStartTime">
            Earlier of two DateTime values for which elapsed time is desired,
            which must be less than the value of pdtmEndTime.
            </param>
            <param name="pdtmEndTime">
            Later of the DateTime value for which elapsed time is desired,
            which must be greater than or equal to the value of pdtmStartTime.
            </param>
            <returns>
            A TimeSpan object, representing the elapsed time from time pdtmStartTime
            until time pdtmEndTime.
            </returns>
            <remarks>
            DateTime values are never null, but it is theoretically possible for
            a time conversion to yield a value that is too high or too low. When
            this happens, the DateTime.ToUniversalTime method, which is used
            internally to convert both inputs to UTC returns a value at one or
            the other extreme of the range of valid System.DateTime values.
            
            While this avoids throwing an exception, the practical result could
            be incorrect calculations or other unexpected and unwanted results.
            Alas, the task of working out a proper response to this special case
            must wait for another day, as it MAY not adversely affect this
            method.
            </remarks>
            <![CDATA[http://msdn.microsoft.com/en-us/library/system.datetime.touniversaltime(VS.80).aspx ]]>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeDisp(System.DateTime)">
            <summary>
            Compute elapsed time from a given DateTime value until now, and
            format it for display in a message for human consumption.
            </summary>
            <param name="pdtmStartTime">
            DateTime value for which elapsed time is desired, which must be less
            than Now.
            </param>
            <returns>
            A formatted string, representing the elapsed time from time
            pdtmStartTime until now. The string is formatted by calling the the
            first overload of the FormatTimeSpan method.  We provide our own
            method because the string returned by the ToString method on a
            System.TimeSpan object is not especially useful.
            
            Our format is as follows.
            
            1) If the elapsed time is greater than or equal to 1 day, the value
               looks something like this:
            
                    12:13:14:15
            
               The above value represents 12 days, 13 hours, 14 minutes, and
               15 seconds.
            
            2) If the elapsed time is less than one day, the value looks
               something like this:
            
                    01:02:03
            
               The above value represents 1 hour, 2 minutes, and 3 seconds.
            
            Note that, in the above example, single digit values are padded on
            the left, so that all numbers display two digits.
            
            Days, however, are formatted as general integer numbers, which means
            that they have neither leading zeros, nor thousands separators.
            </returns>
            <remarks>
            DateTime values are never null, but it is theoretically possible for
            a time conversion to yield a value that is too high or too low. When
            this happens, the DateTime.ToUniversalTime method, which is used
            internally to convert both inputs to UTC returns a value at one or
            the other extreme of the range of valid System.DateTime values.
            
            While this avoids throwing an exception, the practical result could
            be incorrect calculations or other unexpected and unwanted results.
            Alas, the task of working out a proper response to this special case
            must wait for another day, as it MAY not adversely affect this
            method.
            </remarks>
            <![CDATA[http://msdn.microsoft.com/en-us/library/system.datetime.touniversaltime(VS.80).aspx ]]>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeDisp(System.DateTime,System.String)">
             <summary>
             Compute elapsed time from a given DateTime value until now, and
             format it for display in a message for human consumption.
             </summary>
             <param name="pdtmStartTime">
             DateTime value for which elapsed time is desired, which must be less
             than Now.
             </param>
             <param name="pstrFormat">
             A Format string, suitable for processing by the static String.Format
             method, which describes the desired output format.
             
             Please see the Remarks section for important details about the
             order of the time span members in the Format method argument list.
             </param>
             <returns>
             A formatted string, representing the elapsed time from time
             pdtmStartTime until now. The string is formatted by passing the string
             specified in argument pstrFormat to the Format method of a String
             object. Please see Remarks for important information about the
             format string.
             </returns>
             <remarks>
             DateTime values are never null, although they may be zero.
            
             This method formats the elapsed time, using the Format method of the
             String object, which receives an array of strings, derived from the
             components of a TimeSpan object, in the following order:
            
              1) Days
            
              2) Hours
            
              3) Minutes
            
              4) Seconds
            
              5) Milliseconds
            
              6) Ticks
            
              7) TotalDays
            
              8) TotalHours
            
              9) TotalMinutes
            
             10) TotalSeconds
            
             11) TotalMilliseconds
            
             Format strings are defined by inserting numbered placeholders,
             starting from zero, where you want the values substituted into the
             string. 
            
             Use "{0}" to indicate where you want the Days value from the
             calculated elapsed time inserted, "{1}" for Hours, "{2}" for
             Minutes, and "{3}" for Seconds.
            
             For example:
            
                 {0} days, {1} hours, {2} minutes, and {3} seconds
            
             yields the following for an elapsed time of 2 days, 11 hours,
             20 minutes, and 15 seconds.
            
                 2 days, 11 hours, 20 minutes, and 15 seconds
            
             To omit days, such as in a timing report on a short batch process,
             omit the days place holder.
            
                 {1} hours, {2} minutes, and {3} seconds
            
             yields the following for an elapsed time of 14 hours,
             45 minutes, and 8 seconds.
            
                 14 hours, 45 minutes, and 08 seconds
            
             Note that the seconds value in the above example has a leading zero.
             Single digit values for hours, minutes, and seconds are reported in
             this fashion. All other values are displayed using default formats
             for numeric values. Therefore, days and milliseconds are formatted
             as general integers, and everything else is formatted as a general
             floating point number, adorned only by a decimal point.
             </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeDisp(System.DateTime,System.DateTime)">
            <summary>
            Compute elapsed time between two DateTime values, and format it for
            display in a message for human consumption.
            </summary>
            <param name="pdtmStartTime">
            Earlier of two DateTime values for which elapsed time is desired,
            which must be less than the value of pdtmEndTime.
            </param>
            <param name="pdtmEndTime">
            Later of the DateTime value for which elapsed time is desired,
            which must be greater than or equal to the value of pdtmStartTime.
            </param>
            <returns>
            A formatted string, representing the elapsed time from time
            pdtmStartTime until time pdtmEndTime. The string is formatted by calling
            the first overload of the FormatTimeSpan method.  We provide our own
            method because the string returned by the ToString method on a
            System.TimeSpan object is not especially useful.
            
            Our format is as follows.
            
            1) If the elapsed time is greater than or equal to 1 day, the value
               looks something like this:
            
                    12:13:14:15
            
               The above value represents 12 days, 13 hours, 14 minutes, and
               15 seconds.
            
            2) If the elapsed time is less than one day, the value looks
               something like this:
            
                    01:02:03
            
               The above value represents 1 hour, 2 minutes, and 3 seconds.
            
            Note that, in the above example, single digit values are padded on
            the left, so that all numbers display two digits.
            
            Days, however, are formatted as general integer numbers, which means
            that they have neither leading zeros, nor thousands separators.
            </returns>
            <remarks>
            DateTime values are never null, although they may be zero.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.ElapsedTimeDisp(System.DateTime,System.DateTime,System.String)">
             <summary>
             Compute elapsed time between two DateTime values, and format it for
             display in a message for human consumption.
             </summary>
             <param name="pdtmStartTime">
             Earlier of two DateTime values for which elapsed time is desired,
             which must be less than the value of pdtmEndTime.
             </param>
             <param name="pdtmEndTime">
             Later of the DateTime value for which elapsed time is desired,
             which must be greater than or equal to the value of pdtmStartTime.
             </param>
             <param name="pstrFormat">
             A Format string, suitable for processing by the static String.Format
             method, which describes the desired output format.
             
             Please see the Remarks section for important details about the
             order of the time span members in the Format method argument list.
             </param>
             <returns>
             A formatted string, representing the elapsed time from time
             pdtmStartTime until time pdtmEndTime. The string is formatted by passing
             the string specified in argument pstrFormat to the Format method of
             a String object. Please see Remarks for important information about
             the format string.
             </returns>
             <remarks>
             DateTime values are never null, although they may be zero.
            
             This method formats the elapsed time, using the Format method of the
             String object, which receives an array of strings, derived from the
             components of a TimeSpan object, in the following order:
            
              1) Days
            
              2) Hours
            
              3) Minutes
            
              4) Seconds
            
              5) Milliseconds
            
              6) Ticks
            
              7) TotalDays
            
              8) TotalHours
            
              9) TotalMinutes
            
             10) TotalSeconds
            
             11) TotalMilliseconds
            
             Format strings are defined by inserting numbered placeholders,
             starting from zero, where you want the values substituted into the
             string. 
            
             Use "{0}" to indicate where you want the Days value from the
             calculated elapsed time inserted, "{1}" for Hours, "{2}" for
             Minutes, and "{3}" for Seconds.
            
             For example:
            
                 {0} days, {1} hours, {2} minutes, and {3} seconds
            
             yields the following for an elapsed time of 2 days, 11 hours,
             20 minutes, and 15 seconds.
            
                 2 days, 11 hours, 20 minutes, and 15 seconds
            
             To omit days, such as in a timing report on a short batch process,
             omit the days place holder.
            
                 {1} hours, {2} minutes, and {3} seconds
            
             yields the following for an elapsed time of 14 hours,
             45 minutes, and 8 seconds.
            
                 14 hours, 45 minutes, and 08 seconds
            
             Note that the seconds value in the above example has a leading zero.
             Single digit values for hours, minutes, and seconds are reported in
             this fashion. All other values are displayed using default formats
             for numeric values. Therefore, days and milliseconds are formatted
             as general integers, and everything else is formatted as a general
             floating point number, adorned only by a decimal point.
             </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.FormatTimeSpan(System.TimeSpan)">
            <summary>
            Format a TimeSpan object, such that the returned string is something
            that makes sense to a human, in the context of a printed report.
            </summary>
            <param name="ptmsElapsedToThen">
            A TimeSpan object, such as the ones returned by the various static
            ElapsedTimeCalc methods of this class.
            </param>
            <returns>
            A String representation of the prinicpal values in the TimeSpan
            object, formatted for use by a human. See the Remarks for the first
            and third overloads of the ElapsedTimeDisp method, both of which
            call this overload, for additional information.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.FormatTimeSpan(System.TimeSpan,System.String)">
             <summary>
             Format a TimeSpan object, such that the returned string is something
             that makes sense to a human, in the context of a printed report.
             </summary>
             <param name="ptmsElapsedToThen">
             A TimeSpan object, such as the ones returned by the various static
             ElapsedTimeCalc methods of this class.
             </param>
             <param name="pstrFormat">
             A Format string, suitable for use with the static String.Format
             method, subject to the limitations discussed in the Remarks sections
             of the public methods that call on this method.
            
             See the Remarks sections of the documentation for overloads 2 and 4
             of method ElapsedTimeDisp for essential information about the format
             string.
             </param>
             <returns>
             A String representation of the properties expoed by the TimeSpan
             object, formatted for use by a human, and as specified in the format
             string passed through argument pstrFormat.
            
             See the Remarks sections of the documentation for overloads 2 and 4
             of method ElapsedTimeDisp for essential information about the format
             string.
             </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.FirstDayOfYearFromDate(System.DateTime)">
            <summary>
            Given a populated DateTime structure, return a new DateTime with its
            Month and Day set to the first day of the year, its TimeOfDay set to
            Midnight, and its Ticks and other properties set accordingly.
            </summary>
            <param name="pdtmThisDate">
            System.DateTime to evaluate.
            </param>
            <returns>
            A new System.DateTime structure, populated with its date set to the
            first day of the Year member of the input, pdtmThisDate, and its
            TimeOfDay set to Midnight.
            </returns>
            <remarks>
            This method is intended for generating values for use as the second
            argument to sibling method RangeDateLower.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.LastDayofYearFromDate(System.DateTime)">
            <summary>
            Given a populated DateTime structure, return a new DateTime with its
            Month and Day set to the last day of the year, its TimeOfDay set to
            Midnight, and its Ticks and other properties set accordingly.
            </summary>
            <param name="pdtmThisDate">
            System.DateTime to evaluate.
            </param>
            <returns>
            A new System.DateTime structure, populated with its date set to the
            last day of the Year member of the input, pdtmThisDate, and its
            TimeOfDay set to Midnight.
            </returns>
            <remarks>
            This method is intended for generating values for use as the second
            argument to sibling method RangeDateUpper.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.MidnightLastNight(System.DateTime)">
            <summary>
            Given a filled DateTime structure, return a new structure, populated
            with a value equal to the Midnight tick on the same date as the Date
            member of the input.
            </summary>
            <param name="pdtmThisDate">
            DateTime to evaluate.
            </param>
            <returns>
            New DateTime structure, whose Date member is equal to the one in the
            input, pdtmThisDate, and whose TimeOfDay and Ticks members reflect the
            last clock tick before Midnight of the same date.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.MidnightTonight(System.DateTime)">
            <summary>
            Given a filled DateTime structure, return a new structure, populated
            with a value equal to the last tick before Midnight on the same date
            as the Date member of the input.
            </summary>
            <param name="pdtmThisDate">
            DateTime to evaluate.
            </param>
            <returns>
            New DateTime structure, whose Date member is equal to the one in the
            input, pdtmThisDate, and whose TimeOfDay and Ticks members reflect the
            last clock tick before Midnight of the same date.
            </returns>
            <remarks>
            The general case of this method takes advantage of a magic number,
            TINE_OF_DAY_LAST_TICk, which represents the number of ticks that
            must be added to the Date member of a System.DateTime structure to
            derive a new structure whose value is the last tick before Midnight
            of the same date.
            
            The degenerate case is one tick before Midnight (23:59:59.999) on
            Friday, 31 December 9999, which happens to be DateTime pdtmThisDate.
            </remarks>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.RangeDateLower(System.String)">
            <summary>
            Parse a string that is supposed to contain a date for use as the
            lower limit of a date range, to be compared against populated
            System.DateTime structures.
            </summary>
            <param name="pstrInputDate">
            String to evaluate and transform into a System.DateTime structure
            suitable for comparing against System.DateTime structures, such as
            those which contain column values retrieved from SQL Server tables.
            </param>
            <returns>
            A populated System.DateTime structure whose value equals Midnight of
            the input date.
            
            If the input string cannot be parsed, DateTime.MinValue is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.RangeDateLower(System.String,System.DateTime)">
            <summary>
            Parse a string that is supposed to contain a date for use as the
            lower limit of a date range, to be compared against populated
            System.DateTime structures.
            </summary>
            <param name="pstrInputDate">
            String to evaluate and transform into a System.DateTime structure
            suitable for comparing against System.DateTime structures, such as
            those which contain column values retrieved from SQL Server tables.
            </param>
            <param name="pdtmDefault">
            A DateTime structure to return if pstrInputDate cannot be parsed.
            </param>
            <returns>
            A populated System.DateTime structure whose value equals Midnight of
            the input date.
            
            If the input string cannot be parsed, pdtmDefault is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.RangeDateUpper(System.String)">
            <summary>
            Parse a string that is supposed to contain a date for use as the
            upper limit of a date range, to be compared against populated
            System.DateTime structures.
            </summary>
            <param name="pstrInputDate">
            String to evaluate and transform into a System.DateTime structure
            suitable for comparing against System.DateTime structures, such as
            those which contain column values retrieved from SQL Server tables.
            </param>
            <returns>
            A populated System.DateTime structure whose value equals the last tick before
            Midnigh (23:59:59.999) of the input date.
            
            If the input string cannot be parsed, DateTime.MaxValue is returned.
            </returns>
        </member>
        <member name="M:WizardWrx.DateMath.ElapsedTime.RangeDateUpper(System.String,System.DateTime)">
            <summary>
            Parse a string that is supposed to contain a date for use as the
            upper limit of a date range, to be compared against populated
            System.DateTime structures.
            </summary>
            <param name="pstrInputDate">
            String to evaluate and transform into a System.DateTime structure
            suitable for comparing against System.DateTime structures, such as
            those which contain column values retrieved from SQL Server tables.
            </param>
            <param name="pdtmDefault">
            A DateTime structure to return if pstrInputDate cannot be parsed.
            </param>
            <returns>
            A populated System.DateTime structure whose value equals the last tick before
            Midnigh (23:59:59.999) of the input date.
            
            If the input string cannot be parsed, pdtmDefault is returned.
            </returns>
        </member>
    </members>
</doc>
