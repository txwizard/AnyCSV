                          Article for The Code Project

================================================================================
2015-05-01 12:09:26
================================================================================

1)	A Fast CSV Reader
	http://www.codeproject.com/Articles/9258/A-Fast-CSV-Reader#latup

-----------------------------------------------------------------------------------------------------
C:\Users\DAVE\Documents\Visual Studio 2013\Projects\WizardWrx_Libs\AnyCSV\NOTES\CSV_Test_Strings.TXT:
-----------------------------------------------------------------------------------------------------

CN=RapidSSL CA, O="GeoTrust, Inc.", C=US

<table class="themed" cellspacing="0" cellpadding="0

<table class="simple" cellspacing="0" cellpadding="0">
<thead>
<tr><td>Col 1</td><td>Col 2</td><td>Col 3</td></tr>
</thead>
<tbody><tr><td>1</td><td>2</td><td>3</td></tr>
<tr><td>A</td><td>B</td><td>C</td></tr>
</tbody></table>


================================================================================
2015-06-01 23:36:53	- "C# CSV File and String Reader Classes,"
                      Vladimir Nikitenko,
                      Systems Engineer, USA
                      3 September 2014
                      http://www.codeproject.com/Articles/770337/Csharp-CSV-File-and-String-Reader-Classes
================================================================================

Seeing this article listed in the "related articles" area next to my own article
on the same subject, I eagerly downloaded and browsed the source code. Alas, it
suffe5rs from the same weakness that rendered the others that I reviewed useless
for the intended application.


================================================================================
2015-06-01 23:47:07
================================================================================

First, please accept my apology for my tardy response; I have been preoccupied with other matters, and I haven't visited this article since the day after I published it.

Though I don't remember where they are stored, as I recall, they live in deeply hidden, heavily guarded Registry keys. At any rate, there are several levels of certificate authorities, with Trusted Root Certificates forming the trunks of the trees that inhabit the certificate forest.

The certificate that protects SSL connections to an individual Web server, which maps to its IP address, are the leaves of the trees, and it's easy enough to order a certificate from a CA that matches its IP address. When you order such a certificate, the order, itself, originates from the server for which it is intended, by way of a Certificate Signing Request, and the CA encodes the IP address from which the request originated into the certificate before they sign it. At the same time, they also encode the fully qualified hostname (e. g., www.google.com), unless the certificate is a "wild card," which is encoded to be valid for any host at the Internet domain on whose behalf it is issued (e. g., *.MyDomain.com). Such certificates have no business in the store of Trusted Root Certificates; when you install one, it goes into one of the other stores.

<b>Personal </b>is the generic name of the default store. For example, if you install a certificate from a Web server through Internet Explorer, that's where it lands unless you override the default.

<b>Trusted People</b> refers to certificates from people (or organizations) that you have elected to trust. Like the Personal store, this is a per user store.

<b>Trusted Publishers</b> refers to code signing certificates that you designate as having been issued to software publishers whom you trust.

<b>Enterprise Trust</b> is the other major machine wide certificate store, which holds server and code signing certificates that the owner of the machine designates as trustworthy.

As I recall from when I studied all of this in 2006, when I was working on an application that  required a robust Public Key Infrastructure, to be admitted to any of the trusted stores, a certificate must either have an unbroken Chain of Trust that leads all the way back to a Trusted Root Certificate, or be self signed.

I'm not certain who handles it on behalf of open source operating systems such as Linux, but I know that in the case of Windows, the store is managed by Microsoft, and only they can add certificates to it. 

All the fuss a couple of years ago about certificates being booted from the Trusted Root Certificates store included several out of cycle updates that <i>removed </i>certificates from it that had been discovered to be <b><i>fraudulent</i></b>. Those certificates were issued on behalf of Commodo, and other established members of the club of Trusted Root CAs, by rogue <u>licensees</u>. You don't hear as much about them any more because Microsoft and others quickly made the revocation process more highly automated, so that the updates happen without fanfare, and the operators of the Trusted Root CAs imposed tighter restrictions on who, and under what circumstances, the good name of a Trusted Root CA can be attached to a certificate.

Based on this information, I seldom give much thought to the trustworthiness of the root certificates. The audit that you surmised that I must be doing had a more limited scope, yet it required me to enumerate every certificate on the machine. I was investigating why a certificate that was issued to me by GlobalSign, a member of the Trusted Root CA club, was inexplicably being marked as invalid on scores of machines in a client's offices in several US cities. Since I have a copy installed without its private key on two machines at my office, both of which are treated as valid, I was trying to determine whether the certificates that were classified as expired were in the wrong store on the client's machines.